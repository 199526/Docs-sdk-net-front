### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  commentId: T:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  id: DataLakeStoreAccount
  parent: Microsoft.Azure.Management.DataLake.Store.Models
  children:
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor(System.String,System.String,System.String,System.String,Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
  - Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
  langs:
  - csharp
  - vb
  name: DataLakeStoreAccount
  nameWithType: DataLakeStoreAccount
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DataLakeStoreAccount
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nData Lake Store account information\n"
  example: []
  syntax:
    content: public class DataLakeStoreAccount
    content.vb: Public Class DataLakeStoreAccount
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor
  commentId: M:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: DataLakeStoreAccount()
  nameWithType: DataLakeStoreAccount.DataLakeStoreAccount()
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.DataLakeStoreAccount()
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nInitializes a new instance of the DataLakeStoreAccount class.\n"
  example: []
  syntax:
    content: public DataLakeStoreAccount()
    content.vb: Public Sub New
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor(System.String,System.String,System.String,System.String,Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)
  commentId: M:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor(System.String,System.String,System.String,System.String,Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)
  id: '#ctor(System.String,System.String,System.String,System.String,Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity,System.Collections.Generic.IDictionary{System.String,System.String},Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)'
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: DataLakeStoreAccount(String, String, String, String, EncryptionIdentity, IDictionary<String, String>, DataLakeStoreAccountProperties)
  nameWithType: DataLakeStoreAccount.DataLakeStoreAccount(String, String, String, String, EncryptionIdentity, IDictionary<String, String>, DataLakeStoreAccountProperties)
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.DataLakeStoreAccount(System.String, System.String, System.String, System.String, Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity, System.Collections.Generic.IDictionary<System.String, System.String>, Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nInitializes a new instance of the DataLakeStoreAccount class.\n"
  example: []
  syntax:
    content: public DataLakeStoreAccount(string location = null, string name = null, string type = null, string id = null, EncryptionIdentity identity = null, IDictionary<string, string> tags = null, DataLakeStoreAccountProperties properties = null)
    content.vb: Public Sub New(location As String = Nothing, name As String = Nothing, type As String = Nothing, id As String = Nothing, identity As EncryptionIdentity = Nothing, tags As IDictionary(Of String, String) = Nothing, properties As DataLakeStoreAccountProperties = Nothing)
    parameters:
    - id: location
      type: System.String
      description: the account regional location.
    - id: name
      type: System.String
      description: the account name.
    - id: type
      type: System.String
      description: the namespace and type of the account.
    - id: id
      type: System.String
      description: the account subscription ID.
    - id: identity
      type: Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity
      description: >-
        The Key vault encryption identity, if

        any.
    - id: tags
      type: System.Collections.Generic.IDictionary{System.String,System.String}
      description: the value of custom properties.
    - id: properties
      type: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties
      description: >-
        the Data Lake Store account

        properties.
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor*
  nameWithType.vb: DataLakeStoreAccount.DataLakeStoreAccount(String, String, String, String, EncryptionIdentity, IDictionary(Of String, String), DataLakeStoreAccountProperties)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.DataLakeStoreAccount(System.String, System.String, System.String, System.String, Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity, System.Collections.Generic.IDictionary(Of System.String, System.String), Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties)
  name.vb: DataLakeStoreAccount(String, String, String, String, EncryptionIdentity, IDictionary(Of String, String), DataLakeStoreAccountProperties)
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
  id: Location
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Location
  nameWithType: DataLakeStoreAccount.Location
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Location
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 54
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets or sets the account regional location.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "location")]

      public string Location { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="location")>

      Public Property Location As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: location
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
  id: Name
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Name
  nameWithType: DataLakeStoreAccount.Name
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Name
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets or sets the account name.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "name")]

      public string Name { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="name")>

      Public Property Name As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: name
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
  id: Type
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Type
  nameWithType: DataLakeStoreAccount.Type
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Type
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets the namespace and type of the account.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "type")]

      public string Type { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="type")>

      Public ReadOnly Property Type As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: type
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
  id: Id
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: DataLakeStoreAccount.Id
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Id
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 72
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets the account subscription ID.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "id")]

      public string Id { get; }
    content.vb: >-
      <JsonProperty(PropertyName:="id")>

      Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: id
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
  id: Identity
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Identity
  nameWithType: DataLakeStoreAccount.Identity
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Identity
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets or sets the Key vault encryption identity, if any.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "identity")]

      public EncryptionIdentity Identity { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="identity")>

      Public Property Identity As EncryptionIdentity
    parameters: []
    return:
      type: Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: identity
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
  id: Tags
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Tags
  nameWithType: DataLakeStoreAccount.Tags
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Tags
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 84
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets or sets the value of custom properties.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tags")]

      public IDictionary<string, string> Tags { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tags")>

      Public Property Tags As IDictionary(Of String, String)
    parameters: []
    return:
      type: System.Collections.Generic.IDictionary{System.String,System.String}
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tags
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
  commentId: P:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
  id: Properties
  parent: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount
  langs:
  - csharp
  - vb
  name: Properties
  nameWithType: DataLakeStoreAccount.Properties
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Properties
    path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Generated/Models/DataLakeStoreAccount.cs
    startLine: 90
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store.Models
  summary: "\nGets or sets the Data Lake Store account properties.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "properties")]

      public DataLakeStoreAccountProperties Properties { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="properties")>

      Public Property Properties As DataLakeStoreAccountProperties
    parameters: []
    return:
      type: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties
  overload: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties*
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: properties
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.DataLake.Store.Models
  commentId: N:Microsoft.Azure.Management.DataLake.Store.Models
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.Store.Models
  nameWithType: Microsoft.Azure.Management.DataLake.Store.Models
  fullName: Microsoft.Azure.Management.DataLake.Store.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.#ctor
  isExternal: false
  name: DataLakeStoreAccount
  nameWithType: DataLakeStoreAccount.DataLakeStoreAccount
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.DataLakeStoreAccount
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity
  commentId: T:Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity
  parent: Microsoft.Azure.Management.DataLake.Store.Models
  isExternal: false
  name: EncryptionIdentity
  nameWithType: EncryptionIdentity
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.EncryptionIdentity
- uid: System.Collections.Generic.IDictionary{System.String,System.String}
  commentId: T:System.Collections.Generic.IDictionary{System.String,System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: System.Collections.Generic.IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: System.Collections.Generic.IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties
  commentId: T:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties
  parent: Microsoft.Azure.Management.DataLake.Store.Models
  isExternal: false
  name: DataLakeStoreAccountProperties
  nameWithType: DataLakeStoreAccountProperties
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccountProperties
- uid: System.Collections.Generic.IDictionary`2
  commentId: T:System.Collections.Generic.IDictionary`2
  isExternal: true
  name: IDictionary<TKey, TValue>
  nameWithType: IDictionary<TKey, TValue>
  fullName: System.Collections.Generic.IDictionary<TKey, TValue>
  nameWithType.vb: IDictionary(Of TKey, TValue)
  fullname.vb: System.Collections.Generic.IDictionary(Of TKey, TValue)
  name.vb: IDictionary(Of TKey, TValue)
  spec.csharp:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: System.Collections.Generic.IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TKey
    nameWithType: TKey
    fullName: TKey
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: TValue
    nameWithType: TValue
    fullName: TValue
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
  isExternal: false
  name: Location
  nameWithType: DataLakeStoreAccount.Location
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Location
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
  isExternal: false
  name: Name
  nameWithType: DataLakeStoreAccount.Name
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Name
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
  isExternal: false
  name: Type
  nameWithType: DataLakeStoreAccount.Type
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Type
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
  isExternal: false
  name: Id
  nameWithType: DataLakeStoreAccount.Id
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Id
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
  isExternal: false
  name: Identity
  nameWithType: DataLakeStoreAccount.Identity
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Identity
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
  isExternal: false
  name: Tags
  nameWithType: DataLakeStoreAccount.Tags
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Tags
- uid: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
  isExternal: false
  name: Properties
  nameWithType: DataLakeStoreAccount.Properties
  fullName: Microsoft.Azure.Management.DataLake.Store.Models.DataLakeStoreAccount.Properties
