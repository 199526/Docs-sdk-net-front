### YamlMime:ManagedReference
items:
- uid: Microsoft.ApplicationInsights.Channel.Transmission
  commentId: T:Microsoft.ApplicationInsights.Channel.Transmission
  id: Transmission
  parent: Microsoft.ApplicationInsights.Channel
  children:
  - Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  - Microsoft.ApplicationInsights.Channel.Transmission.#ctor(Uri,System.Byte[],System.String,System.String,TimeSpan)
  - Microsoft.ApplicationInsights.Channel.Transmission.Content
  - Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  - Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  - Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(Uri)
  - Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  - Microsoft.ApplicationInsights.Channel.Transmission.Id
  - Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  - Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  langs:
  - csharp
  - vb
  name: Transmission
  nameWithType: Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Transmission
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 22
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nImplements an asynchronous transmission of data to an HTTP POST endpoint.\n"
  example: []
  syntax:
    content: 'public class Transmission : object'
    content.vb: >-
      Public Class Transmission
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor(Uri,System.Byte[],System.String,System.String,TimeSpan)
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.#ctor(Uri,System.Byte[],System.String,System.String,TimeSpan)
  id: '#ctor(Uri,System.Byte[],System.String,System.String,TimeSpan)'
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Transmission(Uri, Byte[], String, String, TimeSpan)
  nameWithType: Transmission.Transmission(Uri, Byte[], String, String, TimeSpan)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(Uri, System.Byte[], System.String, System.String, TimeSpan)
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 36
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Channel.Transmission\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public Transmission(Uri address, byte[] content, string contentType, string contentEncoding, TimeSpan timeout = null)
    content.vb: Public Sub New(address As Uri, content As Byte(), contentType As String, contentEncoding As String, timeout As TimeSpan = Nothing)
    parameters:
    - id: address
      type: Uri
    - id: content
      type: System.Byte[]
    - id: contentType
      type: System.String
    - id: contentEncoding
      type: System.String
    - id: timeout
      type: TimeSpan
  overload: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  nameWithType.vb: Transmission.Transmission(Uri, Byte(), String, String, TimeSpan)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Channel.Transmission.Transmission(Uri, System.Byte(), System.String, System.String, TimeSpan)
  name.vb: Transmission(Uri, Byte(), String, String, TimeSpan)
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  id: '#ctor'
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Transmission()
  nameWithType: Transmission.Transmission()
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission()
  type: Constructor
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: .ctor
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 72
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.ApplicationInsights.Channel.Transmission\" data-throw-if-not-resolved=\"false\"></xref> class. This overload is for Test purposes. \n"
  example: []
  syntax:
    content: protected Transmission()
    content.vb: Protected Sub New
  overload: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  id: EndpointAddress
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: EndpointAddress
  nameWithType: Transmission.EndpointAddress
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: EndpointAddress
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 79
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the Address of the endpoint to which transmission will be sent.\n"
  example: []
  syntax:
    content: public Uri EndpointAddress { get; }
    content.vb: Public ReadOnly Property EndpointAddress As Uri
    parameters: []
    return:
      type: Uri
  overload: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Content
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Content
  id: Content
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Content
  nameWithType: Transmission.Content
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Content
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Content
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 88
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the content of the transmission.\n"
  example: []
  syntax:
    content: public byte[] Content { get; }
    content.vb: Public ReadOnly Property Content As Byte()
    parameters: []
    return:
      type: System.Byte[]
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Content*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  id: ContentType
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: ContentType
  nameWithType: Transmission.ContentType
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: ContentType
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 97
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the content's type of the transmission.\n"
  example: []
  syntax:
    content: public string ContentType { get; }
    content.vb: Public ReadOnly Property ContentType As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.ContentType*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  id: ContentEncoding
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: ContentEncoding
  nameWithType: Transmission.ContentEncoding
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: ContentEncoding
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 106
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets the encoding method of the transmission.\n"
  example: []
  syntax:
    content: public string ContentEncoding { get; }
    content.vb: Public ReadOnly Property ContentEncoding As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  id: Timeout
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Timeout
  nameWithType: Transmission.Timeout
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Timeout
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 115
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets a timeout value for the transmission.\n"
  example: []
  syntax:
    content: public TimeSpan Timeout { get; }
    content.vb: Public ReadOnly Property Timeout As TimeSpan
    parameters: []
    return:
      type: TimeSpan
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Timeout*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Id
  commentId: P:Microsoft.ApplicationInsights.Channel.Transmission.Id
  id: Id
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: Id
  nameWithType: Transmission.Id
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Id
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Id
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 124
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nGets an id of the transmission.\n"
  example: []
  syntax:
    content: public string Id { get; }
    content.vb: Public ReadOnly Property Id As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.ApplicationInsights.Channel.Transmission.Id*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  id: SendAsync
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: SendAsync()
  nameWithType: Transmission.SendAsync()
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: SendAsync
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 133
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nExecutes the request that the current transmission represents.\n"
  example: []
  syntax:
    content: public virtual Task<HttpWebResponseWrapper> SendAsync()
    content.vb: Public Overridable Function SendAsync As Task(Of HttpWebResponseWrapper)
    return:
      type: Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}
      description: The task to await.
  overload: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(Uri)
  commentId: M:Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(Uri)
  id: CreateRequest(Uri)
  parent: Microsoft.ApplicationInsights.Channel.Transmission
  langs:
  - csharp
  - vb
  name: CreateRequest(Uri)
  nameWithType: Transmission.CreateRequest(Uri)
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest(Uri)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Channel/Transmission.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: CreateRequest
    path: src/Core/Managed/Shared/Channel/Transmission.cs
    startLine: 202
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Channel
  summary: "\nCreates a post web request.  \n"
  example: []
  syntax:
    content: protected virtual WebRequest CreateRequest(Uri address)
    content.vb: Protected Overridable Function CreateRequest(address As Uri) As WebRequest
    parameters:
    - id: address
      type: Uri
      description: The Address in the web request.
    return:
      type: WebRequest
      description: A web request pointing to the <code>Address</code>.
  overload: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.ApplicationInsights.Channel
  commentId: N:Microsoft.ApplicationInsights.Channel
  isExternal: false
  name: Microsoft.ApplicationInsights.Channel
  nameWithType: Microsoft.ApplicationInsights.Channel
  fullName: Microsoft.ApplicationInsights.Channel
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.ApplicationInsights.Channel.Transmission
  commentId: T:Microsoft.ApplicationInsights.Channel.Transmission
  isExternal: false
  name: Transmission
  nameWithType: Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission
- uid: Microsoft.ApplicationInsights.Channel.Transmission.#ctor*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.#ctor
  isExternal: false
  name: Transmission
  nameWithType: Transmission.Transmission
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Transmission
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
  isExternal: false
  name: EndpointAddress
  nameWithType: Transmission.EndpointAddress
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.EndpointAddress
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Content*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Content
  isExternal: false
  name: Content
  nameWithType: Transmission.Content
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Content
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentType*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.ContentType
  isExternal: false
  name: ContentType
  nameWithType: Transmission.ContentType
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentType
- uid: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
  isExternal: false
  name: ContentEncoding
  nameWithType: Transmission.ContentEncoding
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.ContentEncoding
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Timeout*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Timeout
  isExternal: false
  name: Timeout
  nameWithType: Transmission.Timeout
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Timeout
- uid: Microsoft.ApplicationInsights.Channel.Transmission.Id*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.Id
  isExternal: false
  name: Id
  nameWithType: Transmission.Id
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.Id
- uid: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: Transmission.SendAsync
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.SendAsync
- uid: Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}
  commentId: '!:Task{Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper}'
  definition: Task`1
  name: Task<HttpWebResponseWrapper>
  nameWithType: Task<HttpWebResponseWrapper>
  fullName: Task<Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper>
  nameWithType.vb: Task(Of HttpWebResponseWrapper)
  fullname.vb: Task(Of Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper)
  name.vb: Task(Of HttpWebResponseWrapper)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
    name: HttpWebResponseWrapper
    nameWithType: HttpWebResponseWrapper
    fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
    name: HttpWebResponseWrapper
    nameWithType: HttpWebResponseWrapper
    fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.HttpWebResponseWrapper
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest*
  commentId: Overload:Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest
  isExternal: false
  name: CreateRequest
  nameWithType: Transmission.CreateRequest
  fullName: Microsoft.ApplicationInsights.Channel.Transmission.CreateRequest
- uid: WebRequest
  isExternal: true
  name: WebRequest
  nameWithType: WebRequest
  fullName: WebRequest
