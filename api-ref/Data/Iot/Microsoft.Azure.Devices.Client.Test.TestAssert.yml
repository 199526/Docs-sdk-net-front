### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert
  commentId: T:Microsoft.Azure.Devices.Client.Test.TestAssert
  id: TestAssert
  parent: Microsoft.Azure.Devices.Client.Test
  children:
  - Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Action,System.String)
  - Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Func{System.Threading.Tasks.Task},System.String)
  - Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String)
  langs:
  - csharp
  - vb
  name: TestAssert
  nameWithType: TestAssert
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert
  type: Class
  source:
    remote:
      path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdks
    id: TestAssert
    path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.Devices.Client.Test
  namespace: Microsoft.Azure.Devices.Client.Test
  syntax:
    content: public static class TestAssert
    content.vb: Public Module TestAssert
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Action,System.String)
  commentId: M:Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Action,System.String)
  id: Throws``1(System.Action,System.String)
  parent: Microsoft.Azure.Devices.Client.Test.TestAssert
  langs:
  - csharp
  - vb
  name: Throws<TException>(Action, String)
  nameWithType: TestAssert.Throws<TException>(Action, String)
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws<TException>(System.Action, System.String)
  type: Method
  source:
    remote:
      path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdks
    id: Throws
    path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Devices.Client.Test
  namespace: Microsoft.Azure.Devices.Client.Test
  syntax:
    content: 'public static TException Throws<TException>(Action action, string errorMessage = null)where TException : Exception'
    content.vb: Public Shared Function Throws(Of TException As Exception)(action As Action, errorMessage As String = Nothing) As TException
    parameters:
    - id: action
      type: System.Action
    - id: errorMessage
      type: System.String
    typeParameters:
    - id: TException
    return:
      type: '{TException}'
  overload: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws*
  nameWithType.vb: TestAssert.Throws(Of TException)(Action, String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws(Of TException)(System.Action, System.String)
  name.vb: Throws(Of TException)(Action, String)
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Func{System.Threading.Tasks.Task},System.String)
  commentId: M:Microsoft.Azure.Devices.Client.Test.TestAssert.Throws``1(System.Func{System.Threading.Tasks.Task},System.String)
  id: Throws``1(System.Func{System.Threading.Tasks.Task},System.String)
  parent: Microsoft.Azure.Devices.Client.Test.TestAssert
  langs:
  - csharp
  - vb
  name: Throws<TException>(Func<Task>, String)
  nameWithType: TestAssert.Throws<TException>(Func<Task>, String)
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws<TException>(System.Func<System.Threading.Tasks.Task>, System.String)
  type: Method
  source:
    remote:
      path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdks
    id: Throws
    path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.Devices.Client.Test
  namespace: Microsoft.Azure.Devices.Client.Test
  syntax:
    content: 'public static TException Throws<TException>(Func<Task> action, string errorMessage = null)where TException : Exception'
    content.vb: Public Shared Function Throws(Of TException As Exception)(action As Func(Of Task), errorMessage As String = Nothing) As TException
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
    - id: errorMessage
      type: System.String
    typeParameters:
    - id: TException
    return:
      type: '{TException}'
  overload: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws*
  nameWithType.vb: TestAssert.Throws(Of TException)(Func(Of Task), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws(Of TException)(System.Func(Of System.Threading.Tasks.Task), System.String)
  name.vb: Throws(Of TException)(Func(Of Task), String)
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String)
  commentId: M:Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String)
  id: ThrowsAsync``1(System.Func{System.Threading.Tasks.Task},System.String)
  parent: Microsoft.Azure.Devices.Client.Test.TestAssert
  langs:
  - csharp
  - vb
  name: ThrowsAsync<TException>(Func<Task>, String)
  nameWithType: TestAssert.ThrowsAsync<TException>(Func<Task>, String)
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync<TException>(System.Func<System.Threading.Tasks.Task>, System.String)
  type: Method
  source:
    remote:
      path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdks
    id: ThrowsAsync
    path: csharp/device/Microsoft.Azure.Devices.Client/test/Microsoft.Azure.Devices.Api.Test/TestAssert.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Devices.Client.Test
  namespace: Microsoft.Azure.Devices.Client.Test
  syntax:
    content: 'public static Task<TException> ThrowsAsync<TException>(Func<Task> action, string errorMessage = null)where TException : Exception'
    content.vb: Public Shared Function ThrowsAsync(Of TException As Exception)(action As Func(Of Task), errorMessage As String = Nothing) As Task(Of TException)
    parameters:
    - id: action
      type: System.Func{System.Threading.Tasks.Task}
    - id: errorMessage
      type: System.String
    typeParameters:
    - id: TException
    return:
      type: System.Threading.Tasks.Task{{TException}}
  overload: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync*
  nameWithType.vb: TestAssert.ThrowsAsync(Of TException)(Func(Of Task), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync(Of TException)(System.Func(Of System.Threading.Tasks.Task), System.String)
  name.vb: ThrowsAsync(Of TException)(Func(Of Task), String)
references:
- uid: Microsoft.Azure.Devices.Client.Test
  commentId: N:Microsoft.Azure.Devices.Client.Test
  isExternal: false
  name: Microsoft.Azure.Devices.Client.Test
  nameWithType: Microsoft.Azure.Devices.Client.Test
  fullName: Microsoft.Azure.Devices.Client.Test
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws*
  commentId: Overload:Microsoft.Azure.Devices.Client.Test.TestAssert.Throws
  isExternal: false
  name: Throws<TException>
  nameWithType: TestAssert.Throws<TException>
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws<TException>
  nameWithType.vb: TestAssert.Throws(Of TException)
  fullname.vb: Microsoft.Azure.Devices.Client.Test.TestAssert.Throws(Of TException)
  name.vb: Throws(Of TException)
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: '{TException}'
  commentId: '!:TException'
  definition: TException
  name: TException
  nameWithType: TException
  fullName: TException
- uid: TException
  isExternal: false
  name: TException
  nameWithType: TException
  fullName: TException
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullname.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync*
  commentId: Overload:Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync
  isExternal: false
  name: ThrowsAsync<TException>
  nameWithType: TestAssert.ThrowsAsync<TException>
  fullName: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync<TException>
  nameWithType.vb: TestAssert.ThrowsAsync(Of TException)
  fullname.vb: Microsoft.Azure.Devices.Client.Test.TestAssert.ThrowsAsync(Of TException)
  name.vb: ThrowsAsync(Of TException)
- uid: System.Threading.Tasks.Task{{TException}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TException>
  nameWithType: Task<TException>
  fullName: System.Threading.Tasks.Task<TException>
  nameWithType.vb: Task(Of TException)
  fullname.vb: System.Threading.Tasks.Task(Of TException)
  name.vb: Task(Of TException)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TException
    nameWithType: TException
    fullName: TException
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TException
    nameWithType: TException
    fullName: TException
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
