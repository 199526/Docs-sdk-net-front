### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager
  commentId: T:Microsoft.ServiceFabric.Data.IReliableStateManager
  id: IReliableStateManager
  parent: Microsoft.ServiceFabric.Data
  children:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri,System.TimeSpan)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  - Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(Uri)
  langs:
  - csharp
  - vb
  name: IReliableStateManager
  nameWithType: IReliableStateManager
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: IReliableStateManager
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 15
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nManages all <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> for a service replica.\nEach replica in a service has its own state manager and thus its own set of <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public interface IReliableStateManager : IAsyncEnumerable<IReliableState>'
    content.vb: >-
      Public Interface IReliableStateManager
          Inherits IAsyncEnumerable(Of IReliableState)
  inheritedMembers:
  - Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  extensionMethods:
  - Microsoft.ServiceFabric.Data.IReliableStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  commentId: E:Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  id: TransactionChanged
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: TransactionChanged
  nameWithType: IReliableStateManager.TransactionChanged
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TransactionChanged
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: TransactionChanged
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 21
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nOccurs when a transaction's state changes.\nFor example, commit of a transaction.\n"
  example: []
  syntax:
    content: event EventHandler<NotifyTransactionChangedEventArgs> TransactionChanged
    content.vb: Event TransactionChanged As EventHandler(Of NotifyTransactionChangedEventArgs)
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  commentId: E:Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  id: StateManagerChanged
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: StateManagerChanged
  nameWithType: IReliableStateManager.StateManagerChanged
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.StateManagerChanged
  type: Event
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: StateManagerChanged
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 27
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nOccurs when State Manager's state changes.\nFor example, creation or delete of reliable state or rebuild of the reliable state manager.\n"
  example: []
  syntax:
    content: event EventHandler<NotifyStateManagerChangedEventArgs> StateManagerChanged
    content.vb: Event StateManagerChanged As EventHandler(Of NotifyStateManagerChangedEventArgs)
    return:
      type: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  id: TryAddStateSerializer``1(Microsoft.ServiceFabric.Data.IStateSerializer{``0})
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: TryAddStateSerializer<T>(IStateSerializer<T>)
  nameWithType: IReliableStateManager.TryAddStateSerializer<T>(IStateSerializer<T>)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>(Microsoft.ServiceFabric.Data.IStateSerializer<T>)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: TryAddStateSerializer
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 90
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRegisters a custom serializer for all reliable collections.\n"
  remarks: "\n<p>\nWhen a reliable collection needs to serialize an object, it asks the state manager for a serializer for the given type.\nThe state manager will first check if there is a custom serializer registered for the input type. If not, it will check if one of the built-in\nserializers can serialize the type. The state manager has built-in serializers for the following types: guid, bool, byte, sbyte, char, decimal, double,\nfloat, int, uint, long, ulong, short, ushort and string. If not, it will use <see cref=\"!:System.Runtime.Serialization.DataContractSerializer\"></see>.\n</p>\n<p>\nSerializers must be infinitely forwards and backwards compatible. For the types that are using built-in serializers, Service Fabric ensures\nforwards and backwards compatibility. However, if a custom serializer is added for a type with a built-in serializer, the custom serializer\nmust be compatible with the built-in serialization format for that type.\n</p>\n<p>\nThis method can only be called during the onInitializeStateSerializersEvent callback that was given in the <xref href=\"Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration\" data-throw-if-not-resolved=\"false\"></xref>\nwhen the state manager was created.\n</p>\n<p>\nThe onInitializeStateSerializersEvent callback is set during construction of a state manager, and the callback must in turn call this method on\n<xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>. In order to register a callback on itself during construction, an adapter must be used to forward the initialize\ncallback back to the ReliableStateManager instance that is being created. Inside the callback, call this method to register custom serializers.\n</p>\n"
  example:
  - "\n<pre><code>class InitializationCallbackAdapter\n{\n    public Task OnInitialize()\n    {\n        this.StateManager.TryAddStateSerializer(new MyStateSerializer());\n        return Task.FromResult(true);\n    }\n\n    public IReliableStateManager StateManager { get; set; }\n}\n\nclass MyStatefulService : StatefulService\n{\n    public MyStatefulService(StatefulServiceContext context)\n        : this(context, new InitializationCallbackAdapter())\n    {\n    }\n\n    public MyStatefulService(StatefulServiceContext context, InitializationCallbackAdapter adapter)\n        : base(context, new ReliableStateManager(context, new ReliableStateManagerConfiguration(onInitializeStateSerializersEvent: adapter.OnInitialize)))\n    {\n        adapter.StateManager = this.StateManager;\n    }\n}</code></pre>\n"
  syntax:
    content: >-
      [Obsolete("This API is subject to removal or change in future releases.", false)]

      bool TryAddStateSerializer<T>(IStateSerializer<T> stateSerializer)
    content.vb: >-
      <Obsolete("This API is subject to removal or change in future releases.", False)>

      Function TryAddStateSerializer(Of T)(stateSerializer As IStateSerializer(Of T)) As Boolean
    parameters:
    - id: stateSerializer
      type: Microsoft.ServiceFabric.Data.IStateSerializer{{T}}
      description: "\nThe state serializer to be added.\n"
    typeParameters:
    - id: T
      description: Type that will be serialized and deserialized.
    return:
      type: System.Boolean
      description: "\nTrue if the custom serializer was added.\nFalse if a custom serializer for the given type already exists.\n"
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer*
  attributes:
  - type: System.ObsoleteAttribute
    ctor: System.ObsoleteAttribute.#ctor(System.String,System.Boolean)
    arguments:
    - type: System.String
      value: This API is subject to removal or change in future releases.
    - type: System.Boolean
      value: false
  nameWithType.vb: IReliableStateManager.TryAddStateSerializer(Of T)(IStateSerializer(Of T))
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)(Microsoft.ServiceFabric.Data.IStateSerializer(Of T))
  name.vb: TryAddStateSerializer(Of T)(IStateSerializer(Of T))
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  id: CreateTransaction
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: CreateTransaction()
  nameWithType: IReliableStateManager.CreateTransaction()
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction()
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: CreateTransaction
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 100
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nCreate and start a new transaction that can be used to group operations to be performed atomically.\n"
  remarks: "\nOperations are added to the transaction by passing the <xref href=\"Microsoft.ServiceFabric.Data.ITransaction\" data-throw-if-not-resolved=\"false\"></xref> object in to reliable state methods.\n"
  example: []
  syntax:
    content: ITransaction CreateTransaction()
    content.vb: Function CreateTransaction As ITransaction
    return:
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: A new transaction.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction*
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  id: GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 134
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(ITransaction tx, Uri name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As Uri, timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, Uri, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(ITransaction, Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  id: GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(ITransaction, Uri)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 167
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(ITransaction tx, Uri name)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As Uri) As Task(Of T)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, Uri)
  name.vb: GetOrAddAsync(Of T)(ITransaction, Uri)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri,System.TimeSpan)
  id: GetOrAddAsync``1(Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(Uri, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 200
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(Uri name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(name As Uri, timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: name
      type: Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(Uri, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(Uri, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Uri)
  id: GetOrAddAsync``1(Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(Uri)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 232
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(Uri name)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(name As Uri) As Task(Of T)
    parameters:
    - id: name
      type: Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Uri)
  name.vb: GetOrAddAsync(Of T)(Uri)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  id: GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 266
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(ITransaction tx, string name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As String, timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(ITransaction, String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  id: GetOrAddAsync``1(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(ITransaction, String)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 299
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(ITransaction tx, string name)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(tx As ITransaction, name As String) As Task(Of T)
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(ITransaction, String)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  name.vb: GetOrAddAsync(Of T)(ITransaction, String)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String,System.TimeSpan)
  id: GetOrAddAsync``1(System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(String, TimeSpan)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 332
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(string name, TimeSpan timeout)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(name As String, timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(String, TimeSpan)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String, System.TimeSpan)
  name.vb: GetOrAddAsync(Of T)(String, TimeSpan)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync``1(System.String)
  id: GetOrAddAsync``1(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: GetOrAddAsync<T>(String)
  nameWithType: IReliableStateManager.GetOrAddAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetOrAddAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 364
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nGets an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name if it exists, or creates one\nand returns it if it doesn't already exist.\n"
  remarks: "\nThis is an atomic operation. When an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> needs to be created, it will either complete and return successfully\nor it will not be created.\n"
  example: []
  syntax:
    content: 'Task<T> GetOrAddAsync<T>(string name)where T : IReliableState'
    content.vb: Function GetOrAddAsync(Of T As IReliableState)(name As String) As Task(Of T)
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> type, you may ask for either a class type or an interface type.\n<p>\nIf specifying a class type, the system will attempt to return an instance of that type. \nIf an instance of that type cannot be instantiated (e.g., abstract class, no suitable constructor), an ArgumentException is thrown.\n</p>\n<p>\nIf specifying an interface type, the manager will attempt to resolve the interface to a concrete type.\nIf type mapping is specified by the user, this method will use the user-specified mapping to resolve the type (not yet supported).\nIf type mapping is not specified by the user this method will select the default implementation for the interface given.\nIf the given interface type does not have a default implementation, or a user-specified mapping for the type is not provided or the type\nis invalid, this method will throw ArgumentException.\n</p>\n"
    return:
      type: System.Threading.Tasks.Task{{T}}
      description: Task that represents the asynchronous operation. The task result is the reliable state instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An instance of the type <em>T</em> cannot be created, or the existing <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not of type <em>T</em>.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)(String)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)(System.String)
  name.vb: GetOrAddAsync(Of T)(String)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  id: RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(ITransaction, Uri, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 381
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task RemoveAsync(ITransaction tx, Uri name, TimeSpan timeout)
    content.vb: Function RemoveAsync(tx As ITransaction, name As Uri, timeout As TimeSpan) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  id: RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(ITransaction, Uri)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 397
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task RemoveAsync(ITransaction tx, Uri name)
    content.vb: Function RemoveAsync(tx As ITransaction, name As Uri) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri,System.TimeSpan)
  id: RemoveAsync(Uri,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(Uri, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(Uri, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 413
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task RemoveAsync(Uri name, TimeSpan timeout)
    content.vb: Function RemoveAsync(name As Uri, timeout As TimeSpan) As Task
    parameters:
    - id: name
      type: Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
  id: RemoveAsync(Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(Uri)
  nameWithType: IReliableStateManager.RemoveAsync(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 428
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task RemoveAsync(Uri name)
    content.vb: Function RemoveAsync(name As Uri) As Task
    parameters:
    - id: name
      type: Uri
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  id: RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(ITransaction, String, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 445
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task RemoveAsync(ITransaction tx, string name, TimeSpan timeout)
    content.vb: Function RemoveAsync(tx As ITransaction, name As String, timeout As TimeSpan) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  id: RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction,System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(ITransaction, String)
  nameWithType: IReliableStateManager.RemoveAsync(ITransaction, String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(Microsoft.ServiceFabric.Data.ITransaction, System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 461
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas when the transaction is committed.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact. If this method throws an exception, the transaction must be aborted.\n"
  example: []
  syntax:
    content: Task RemoveAsync(ITransaction tx, string name)
    content.vb: Function RemoveAsync(tx As ITransaction, name As String) As Task
    parameters:
    - id: tx
      type: Microsoft.ServiceFabric.Data.ITransaction
      description: Transaction to associate this operation with.
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>tx</em> is null, or <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String,System.TimeSpan)
  id: RemoveAsync(System.String,System.TimeSpan)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(String, TimeSpan)
  nameWithType: IReliableStateManager.RemoveAsync(String, TimeSpan)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 477
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task RemoveAsync(string name, TimeSpan timeout)
    content.vb: Function RemoveAsync(name As String, timeout As TimeSpan) As Task
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    - id: timeout
      type: System.TimeSpan
      description: The amount of time to wait for the operation to complete before throwing a TimeoutException. Primarily used to prevent deadlocks. The default is 4 seconds.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist, or <em>timeout</em> is negative.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the given timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  id: RemoveAsync(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: RemoveAsync(String)
  nameWithType: IReliableStateManager.RemoveAsync(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: RemoveAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 492
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nRemoves the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> with the given name from this state manager. The state is\npermanently removed from persistent storage and all replicas.\n"
  remarks: "\nThis is an atomic operation. The <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> will be successfully removed along with all state\nor be left in-tact.\n"
  example: []
  syntax:
    content: Task RemoveAsync(string name)
    content.vb: Function RemoveAsync(name As String) As Task
    parameters:
    - id: name
      type: System.String
      description: The name of the <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> to remove.
    return:
      type: System.Threading.Tasks.Task
      description: Task that represents the asynchronous remove operation.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: An <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> with the given name does not exist.
  - type: System.TimeoutException
    commentId: T:System.TimeoutException
    description: The operation failed to complete within the default timeout.
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(Uri)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(Uri)
  id: TryGetAsync``1(Uri)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: TryGetAsync<T>(Uri)
  nameWithType: IReliableStateManager.TryGetAsync<T>(Uri)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(Uri)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: TryGetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 508
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAttempts to get an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name.\n"
  example: []
  syntax:
    content: 'Task<ConditionalValue<T>> TryGetAsync<T>(Uri name)where T : IReliableState'
    content.vb: Function TryGetAsync(Of T As IReliableState)(name As Uri) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: name
      type: Uri
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will\nbe cast to the given type.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not convertible to type <em>T</em>.
  nameWithType.vb: IReliableStateManager.TryGetAsync(Of T)(Uri)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(Uri)
  name.vb: TryGetAsync(Of T)(Uri)
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  commentId: M:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync``1(System.String)
  id: TryGetAsync``1(System.String)
  parent: Microsoft.ServiceFabric.Data.IReliableStateManager
  langs:
  - csharp
  - vb
  name: TryGetAsync<T>(String)
  nameWithType: IReliableStateManager.TryGetAsync<T>(String)
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>(System.String)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: TryGetAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Data.Interfaces/IReliableStateManager.cs
    startLine: 524
  assemblies:
  - Microsoft.ServiceFabric.Data.Interfaces
  namespace: Microsoft.ServiceFabric.Data
  summary: "\nAttempts to get an <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> of the given type <em>T</em> and with the given name.\n"
  example: []
  syntax:
    content: 'Task<ConditionalValue<T>> TryGetAsync<T>(string name)where T : IReliableState'
    content.vb: Function TryGetAsync(Of T As IReliableState)(name As String) As Task(Of ConditionalValue(Of T))
    parameters:
    - id: name
      type: System.String
      description: "\nThe name of the <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref>. This name must be unique in this <xref href=\"Microsoft.ServiceFabric.Data.IReliableStateManager\" data-throw-if-not-resolved=\"false\"></xref>\nacross <xref href=\"Microsoft.ServiceFabric.Data.IReliableState\" data-throw-if-not-resolved=\"false\"></xref> types, including unrelated types.\n"
    typeParameters:
    - id: T
      description: "\nWhen specifying the type, you may ask for either a concrete type or an interface type. The retrieved object will\nbe cast to the given type.\n"
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
      description: Task that represents the asynchronous operation. The task result is a tuple indicating whether the reliable state was found, and if so the instance.
  overload: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>name</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <xref href="Microsoft.ServiceFabric.Data.IReliableState" data-throw-if-not-resolved="false"></xref> instance is not convertible to type <em>T</em>.
  nameWithType.vb: IReliableStateManager.TryGetAsync(Of T)(String)
  fullName.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)(System.String)
  name.vb: TryGetAsync(Of T)(String)
references:
- uid: Microsoft.ServiceFabric.Data.IReliableState
  commentId: T:Microsoft.ServiceFabric.Data.IReliableState
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableState
  nameWithType: IReliableState
  fullName: Microsoft.ServiceFabric.Data.IReliableState
- uid: Microsoft.ServiceFabric.Data
  commentId: N:Microsoft.ServiceFabric.Data
  isExternal: false
  name: Microsoft.ServiceFabric.Data
  nameWithType: Microsoft.ServiceFabric.Data
  fullName: Microsoft.ServiceFabric.Data
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}.GetAsyncEnumerator
  parent: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  definition: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  name: GetAsyncEnumerator()
  nameWithType: IAsyncEnumerable<IReliableState>.GetAsyncEnumerator()
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>.GetAsyncEnumerator()
  nameWithType.vb: IAsyncEnumerable(Of IReliableState).GetAsyncEnumerator()
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState).GetAsyncEnumerator()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<IReliableState>.GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>.GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of IReliableState).GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState).GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  parent: System.Fabric.Messaging.Stream.ByteArraySerializer
  definition: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  name: Serialize<IReliableStateManager>()
  nameWithType: ByteArraySerializer.Serialize<IReliableStateManager>()
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.IReliableStateManager>()
  nameWithType.vb: ByteArraySerializer.Serialize(Of IReliableStateManager)()
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.IReliableStateManager)()
  name.vb: Serialize(Of IReliableStateManager)()
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize<IReliableStateManager>
    nameWithType: ByteArraySerializer.Serialize<IReliableStateManager>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<Microsoft.ServiceFabric.Data.IReliableStateManager>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1
    name: Serialize(Of IReliableStateManager)
    nameWithType: ByteArraySerializer.Serialize(Of IReliableStateManager)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of Microsoft.ServiceFabric.Data.IReliableStateManager)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  commentId: M:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
  isExternal: false
  name: GetAsyncEnumerator()
  nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator()
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>.GetAsyncEnumerator()
  nameWithType.vb: IAsyncEnumerable(Of T).GetAsyncEnumerator()
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T).GetAsyncEnumerator()
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable<T>.GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>.GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1.GetAsyncEnumerator
    name: GetAsyncEnumerator
    nameWithType: IAsyncEnumerable(Of T).GetAsyncEnumerator
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T).GetAsyncEnumerator
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerable{Microsoft.ServiceFabric.Data.IReliableState}
  parent: Microsoft.ServiceFabric.Data
  definition: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  name: IAsyncEnumerable<IReliableState>
  nameWithType: IAsyncEnumerable<IReliableState>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<Microsoft.ServiceFabric.Data.IReliableState>
  nameWithType.vb: IAsyncEnumerable(Of IReliableState)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of Microsoft.ServiceFabric.Data.IReliableState)
  name.vb: IAsyncEnumerable(Of IReliableState)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.IReliableState
    name: IReliableState
    nameWithType: IReliableState
    fullName: Microsoft.ServiceFabric.Data.IReliableState
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  commentId: M:System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
  isExternal: false
  name: Serialize<T>(T)
  nameWithType: ByteArraySerializer.Serialize<T>(T)
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>(T)
  nameWithType.vb: ByteArraySerializer.Serialize(Of T)(T)
  fullname.vb: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)(T)
  name.vb: Serialize(Of T)(T)
  spec.csharp:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize<T>
    nameWithType: ByteArraySerializer.Serialize<T>
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize``1(``0)
    name: Serialize(Of T)
    nameWithType: ByteArraySerializer.Serialize(Of T)
    fullName: System.Fabric.Messaging.Stream.ByteArraySerializer.Serialize(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream.ByteArraySerializer
  commentId: T:System.Fabric.Messaging.Stream.ByteArraySerializer
  parent: System.Fabric.Messaging.Stream
  isExternal: false
  name: ByteArraySerializer
  nameWithType: ByteArraySerializer
  fullName: System.Fabric.Messaging.Stream.ByteArraySerializer
- uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  commentId: T:Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
  isExternal: false
  name: IAsyncEnumerable<T>
  nameWithType: IAsyncEnumerable<T>
  fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable<T>
  nameWithType.vb: IAsyncEnumerable(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IAsyncEnumerable(Of T)
  name.vb: IAsyncEnumerable(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IAsyncEnumerable`1
    name: IAsyncEnumerable
    nameWithType: IAsyncEnumerable
    fullName: Microsoft.ServiceFabric.Data.IAsyncEnumerable
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Fabric.Messaging.Stream
  commentId: N:System.Fabric.Messaging.Stream
  isExternal: false
  name: System.Fabric.Messaging.Stream
  nameWithType: System.Fabric.Messaging.Stream
  fullName: System.Fabric.Messaging.Stream
- uid: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyTransactionChangedEventArgs>
  nameWithType: EventHandler<NotifyTransactionChangedEventArgs>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs>
  nameWithType.vb: EventHandler(Of NotifyTransactionChangedEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs)
  name.vb: EventHandler(Of NotifyTransactionChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
    name: NotifyTransactionChangedEventArgs
    nameWithType: NotifyTransactionChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
    name: NotifyTransactionChangedEventArgs
    nameWithType: NotifyTransactionChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyTransactionChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
  commentId: T:System.EventHandler{Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<NotifyStateManagerChangedEventArgs>
  nameWithType: EventHandler<NotifyStateManagerChangedEventArgs>
  fullName: System.EventHandler<Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs>
  nameWithType.vb: EventHandler(Of NotifyStateManagerChangedEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs)
  name.vb: EventHandler(Of NotifyStateManagerChangedEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
    name: NotifyStateManagerChangedEventArgs
    nameWithType: NotifyStateManagerChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
    name: NotifyStateManagerChangedEventArgs
    nameWithType: NotifyStateManagerChangedEventArgs
    fullName: Microsoft.ServiceFabric.Data.Notifications.NotifyStateManagerChangedEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
  commentId: T:Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ReliableStateManagerConfiguration
  nameWithType: ReliableStateManagerConfiguration
  fullName: Microsoft.ServiceFabric.Data.ReliableStateManagerConfiguration
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager
  commentId: T:Microsoft.ServiceFabric.Data.IReliableStateManager
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: IReliableStateManager
  nameWithType: IReliableStateManager
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer*
  commentId: Overload:Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer
  isExternal: false
  name: TryAddStateSerializer<T>
  nameWithType: IReliableStateManager.TryAddStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer<T>
  nameWithType.vb: IReliableStateManager.TryAddStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryAddStateSerializer(Of T)
  name.vb: TryAddStateSerializer(Of T)
- uid: Microsoft.ServiceFabric.Data.IStateSerializer{{T}}
  commentId: T:Microsoft.ServiceFabric.Data.IStateSerializer{``0}
  parent: Microsoft.ServiceFabric.Data
  definition: Microsoft.ServiceFabric.Data.IStateSerializer`1
  name: IStateSerializer<T>
  nameWithType: IStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.IStateSerializer<T>
  nameWithType.vb: IStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IStateSerializer(Of T)
  name.vb: IStateSerializer(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
  commentId: T:Microsoft.ServiceFabric.Data.IStateSerializer`1
  isExternal: false
  name: IStateSerializer<T>
  nameWithType: IStateSerializer<T>
  fullName: Microsoft.ServiceFabric.Data.IStateSerializer<T>
  nameWithType.vb: IStateSerializer(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IStateSerializer(Of T)
  name.vb: IStateSerializer(Of T)
  spec.csharp:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.ServiceFabric.Data.IStateSerializer`1
    name: IStateSerializer
    nameWithType: IStateSerializer
    fullName: Microsoft.ServiceFabric.Data.IStateSerializer
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Data.ITransaction
  commentId: T:Microsoft.ServiceFabric.Data.ITransaction
  parent: Microsoft.ServiceFabric.Data
  isExternal: false
  name: ITransaction
  nameWithType: ITransaction
  fullName: Microsoft.ServiceFabric.Data.ITransaction
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction*
  commentId: Overload:Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
  isExternal: false
  name: CreateTransaction
  nameWithType: IReliableStateManager.CreateTransaction
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.CreateTransaction
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync
  isExternal: false
  name: GetOrAddAsync<T>
  nameWithType: IReliableStateManager.GetOrAddAsync<T>
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync<T>
  nameWithType.vb: IReliableStateManager.GetOrAddAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.GetOrAddAsync(Of T)
  name.vb: GetOrAddAsync(Of T)
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.TimeoutException
  commentId: T:System.TimeoutException
- uid: Uri
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: Uri
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: System.Threading.Tasks.Task{{T}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: System.Threading.Tasks.Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: System.Threading.Tasks.Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
  isExternal: false
  name: RemoveAsync
  nameWithType: IReliableStateManager.RemoveAsync
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.RemoveAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync*
  commentId: Overload:Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync
  isExternal: false
  name: TryGetAsync<T>
  nameWithType: IReliableStateManager.TryGetAsync<T>
  fullName: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync<T>
  nameWithType.vb: IReliableStateManager.TryGetAsync(Of T)
  fullname.vb: Microsoft.ServiceFabric.Data.IReliableStateManager.TryGetAsync(Of T)
  name.vb: TryGetAsync(Of T)
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{{T}}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Data.ConditionalValue{``0}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ConditionalValue<T>>
  nameWithType: Task<ConditionalValue<T>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Data.ConditionalValue<T>>
  nameWithType.vb: Task(Of ConditionalValue(Of T))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Data.ConditionalValue(Of T))
  name.vb: Task(Of ConditionalValue(Of T))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Data.ConditionalValue`1
    name: ConditionalValue
    nameWithType: ConditionalValue
    fullName: Microsoft.ServiceFabric.Data.ConditionalValue
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
