### YamlMime:ManagedReference
items:
- uid: Microsoft.ServiceFabric.Actors.IActorService
  commentId: T:Microsoft.ServiceFabric.Actors.IActorService
  id: IActorService
  parent: Microsoft.ServiceFabric.Actors
  children:
  - Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  - Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: IActorService
  nameWithType: IActorService
  fullName: Microsoft.ServiceFabric.Actors.IActorService
  type: Interface
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: IActorService
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
    startLine: 15
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDefines the interface containing methods which can be called at Actor Service level.\n"
  example: []
  syntax:
    content: 'public interface IActorService : IService'
    content.vb: >-
      Public Interface IActorService
          Inherits IService
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  id: GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.IActorService
  langs:
  - csharp
  - vb
  name: GetActorsAsync(ContinuationToken, CancellationToken)
  nameWithType: IActorService.GetActorsAsync(ContinuationToken, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync(Microsoft.ServiceFabric.Actors.Query.ContinuationToken, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: GetActorsAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
    startLine: 24
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nGets the list of Actors by querying the actor service.\n"
  example: []
  syntax:
    content: Task<PagedResult<ActorInformation>> GetActorsAsync(ContinuationToken continuationToken, CancellationToken cancellationToken)
    content.vb: Function GetActorsAsync(continuationToken As ContinuationToken, cancellationToken As CancellationToken) As Task(Of PagedResult(Of ActorInformation))
    parameters:
    - id: continuationToken
      type: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
      description: >-
        A continuation token to start querying the results from.

        A null value of continuation token means start returning values form the beginning.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Propagates notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.Query.ActorInformation}}
      description: A task that represents the asynchronous operation of call to server.
  overload: Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync*
- uid: Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  commentId: M:Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  id: DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId,System.Threading.CancellationToken)
  parent: Microsoft.ServiceFabric.Actors.IActorService
  langs:
  - csharp
  - vb
  name: DeleteActorAsync(ActorId, CancellationToken)
  nameWithType: IActorService.DeleteActorAsync(ActorId, CancellationToken)
  fullName: Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync(Microsoft.ServiceFabric.Actors.ActorId, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
      branch: release_5.3
      repo: https://msazure.visualstudio.com/One/_git/WindowsFabric
    id: DeleteActorAsync
    path: src/prod/src/managed/Microsoft.ServiceFabric.Actors/IActorService.cs
    startLine: 38
  assemblies:
  - Microsoft.ServiceFabric.Actors
  namespace: Microsoft.ServiceFabric.Actors
  summary: "\nDeletes an Actor from the Actor service.\n"
  remarks: "\n<p>An active actor, will be deactivated and its state will also be deleted from state provider.</p>\n<p>An in-active actor's state will be deleted from state provider.</p>\n<p>If this method is called for a non-existent actor id in the system, it will be a no-op.</p>\n"
  example: []
  syntax:
    content: Task DeleteActorAsync(ActorId actorId, CancellationToken cancellationToken)
    content.vb: Function DeleteActorAsync(actorId As ActorId, cancellationToken As CancellationToken) As Task
    parameters:
    - id: actorId
      type: Microsoft.ServiceFabric.Actors.ActorId
      description: <xref href="Microsoft.ServiceFabric.Actors.ActorId" data-throw-if-not-resolved="false"></xref> of the actor to be deleted.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: Propagates notification that operations should be canceled.
    return:
      type: System.Threading.Tasks.Task
      description: A task that represents the asynchronous operation of call to server.
  overload: Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync*
references:
- uid: Microsoft.ServiceFabric.Actors
  commentId: N:Microsoft.ServiceFabric.Actors
  isExternal: false
  name: Microsoft.ServiceFabric.Actors
  nameWithType: Microsoft.ServiceFabric.Actors
  fullName: Microsoft.ServiceFabric.Actors
- uid: Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync
  isExternal: false
  name: GetActorsAsync
  nameWithType: IActorService.GetActorsAsync
  fullName: Microsoft.ServiceFabric.Actors.IActorService.GetActorsAsync
- uid: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
  commentId: T:Microsoft.ServiceFabric.Actors.Query.ContinuationToken
  parent: Microsoft.ServiceFabric.Actors.Query
  isExternal: false
  name: ContinuationToken
  nameWithType: ContinuationToken
  fullName: Microsoft.ServiceFabric.Actors.Query.ContinuationToken
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.Query.ActorInformation}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.ServiceFabric.Actors.Query.PagedResult{Microsoft.ServiceFabric.Actors.Query.ActorInformation}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<PagedResult<ActorInformation>>
  nameWithType: Task<PagedResult<ActorInformation>>
  fullName: System.Threading.Tasks.Task<Microsoft.ServiceFabric.Actors.Query.PagedResult<Microsoft.ServiceFabric.Actors.Query.ActorInformation>>
  nameWithType.vb: Task(Of PagedResult(Of ActorInformation))
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.ServiceFabric.Actors.Query.PagedResult(Of Microsoft.ServiceFabric.Actors.Query.ActorInformation))
  name.vb: Task(Of PagedResult(Of ActorInformation))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Query.PagedResult`1
    name: PagedResult
    nameWithType: PagedResult
    fullName: Microsoft.ServiceFabric.Actors.Query.PagedResult
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.ServiceFabric.Actors.Query.ActorInformation
    name: ActorInformation
    nameWithType: ActorInformation
    fullName: Microsoft.ServiceFabric.Actors.Query.ActorInformation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Query.PagedResult`1
    name: PagedResult
    nameWithType: PagedResult
    fullName: Microsoft.ServiceFabric.Actors.Query.PagedResult
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.ServiceFabric.Actors.Query.ActorInformation
    name: ActorInformation
    nameWithType: ActorInformation
    fullName: Microsoft.ServiceFabric.Actors.Query.ActorInformation
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.ServiceFabric.Actors.Query
  commentId: N:Microsoft.ServiceFabric.Actors.Query
  isExternal: false
  name: Microsoft.ServiceFabric.Actors.Query
  nameWithType: Microsoft.ServiceFabric.Actors.Query
  fullName: Microsoft.ServiceFabric.Actors.Query
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.ServiceFabric.Actors.ActorId
  commentId: T:Microsoft.ServiceFabric.Actors.ActorId
  parent: Microsoft.ServiceFabric.Actors
  isExternal: false
  name: ActorId
  nameWithType: ActorId
  fullName: Microsoft.ServiceFabric.Actors.ActorId
- uid: Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync*
  commentId: Overload:Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync
  isExternal: false
  name: DeleteActorAsync
  nameWithType: IActorService.DeleteActorAsync
  fullName: Microsoft.ServiceFabric.Actors.IActorService.DeleteActorAsync
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
