### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  id: TransferContext
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  children:
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint)
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(System.IO.Stream)
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileFailed
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileSkipped
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileTransferred
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite(System.Object,System.Object)
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
  langs:
  - csharp
  - vb
  name: TransferContext
  nameWithType: TransferContext
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  type: Class
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: TransferContext
    path: lib/TransferContext.cs
    startLine: 12
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nRepresents the context for a transfer, and provides additional runtime information about its execution.\n"
  example: []
  syntax:
    content: public abstract class TransferContext
    content.vb: Public MustInherit Class TransferContext
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite(System.Object,System.Object)
  commentId: M:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite(System.Object,System.Object)
  id: ForceOverwrite(System.Object,System.Object)
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: ForceOverwrite(Object, Object)
  nameWithType: TransferContext.ForceOverwrite(Object, Object)
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ForceOverwrite
    path: lib/TransferContext.cs
    startLine: 24
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nCallback used to force overwrite the destination without existence check. \nIt can be used when destination credentials only contains write permission.\n"
  remarks: "\nRead permission is still required in destination credentials in serivce side copy for copy status monitoring.\n"
  example: []
  syntax:
    content: public static bool ForceOverwrite(object source, object destination)
    content.vb: Public Shared Function ForceOverwrite(source As Object, destination As Object) As Boolean
    parameters:
    - id: source
      type: System.Object
      description: Instance of source used to overwrite the destination.
    - id: destination
      type: System.Object
      description: Instance of destination to be overwritten.
    return:
      type: System.Boolean
      description: True if the file should be overwritten; otherwise false.
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor
  commentId: M:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: TransferContext()
  nameWithType: TransferContext.TransferContext()
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.TransferContext()
  type: Constructor
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: .ctor
    path: lib/TransferContext.cs
    startLine: 32
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.DataMovement.TransferContext\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected TransferContext()
    content.vb: Protected Sub New
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint)
  commentId: M:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint)
  id: '#ctor(Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint)'
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: TransferContext(TransferCheckpoint)
  nameWithType: TransferContext.TransferContext(TransferCheckpoint)
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.TransferContext(Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint)
  type: Constructor
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: .ctor
    path: lib/TransferContext.cs
    startLine: 41
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.DataMovement.TransferContext\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected TransferContext(TransferCheckpoint checkpoint)
    content.vb: Protected Sub New(checkpoint As TransferCheckpoint)
    parameters:
    - id: checkpoint
      type: Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint
      description: An <xref href="Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint" data-throw-if-not-resolved="false"></xref> object representing the last checkpoint from which the transfer continues on.
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(System.IO.Stream)
  commentId: M:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor(System.IO.Stream)
  id: '#ctor(System.IO.Stream)'
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: TransferContext(Stream)
  nameWithType: TransferContext.TransferContext(Stream)
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.TransferContext(System.IO.Stream)
  type: Constructor
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: .ctor
    path: lib/TransferContext.cs
    startLine: 64
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.DataMovement.TransferContext\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: protected TransferContext(Stream journalStream)
    content.vb: Protected Sub New(journalStream As Stream)
    parameters:
    - id: journalStream
      type: System.IO.Stream
      description: "The stream into which the transfer journal info will be written into. \nIt can resume the previours paused transfer from its journal stream."
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
  id: ClientRequestId
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: ClientRequestId
  nameWithType: TransferContext.ClientRequestId
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ClientRequestId
    path: lib/TransferContext.cs
    startLine: 76
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the client request id.\n"
  remarks: "\nSetting this property modifies all the requests involved in the related transfer operation to include the the HTTP <em>x-ms-client-request-id</em> header.\n"
  example: []
  syntax:
    content: public string ClientRequestId { get; set; }
    content.vb: Public Property ClientRequestId As String
    parameters: []
    return:
      type: System.String
      description: A string containing the client request id.
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
  id: LogLevel
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: LogLevel
  nameWithType: TransferContext.LogLevel
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: LogLevel
    path: lib/TransferContext.cs
    startLine: 86
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the logging level to be used for the related transfer operation.\n"
  example: []
  syntax:
    content: public LogLevel LogLevel { get; set; }
    content.vb: Public Property LogLevel As LogLevel
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.LogLevel
      description: A value of type <xref href="Microsoft.WindowsAzure.Storage.LogLevel" data-throw-if-not-resolved="false"></xref> that specifies which events are logged for the related transfer operation.
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
  id: LastCheckpoint
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: LastCheckpoint
  nameWithType: TransferContext.LastCheckpoint
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: LastCheckpoint
    path: lib/TransferContext.cs
    startLine: 95
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets the last checkpoint of the transfer.\n"
  example: []
  syntax:
    content: public TransferCheckpoint LastCheckpoint { get; }
    content.vb: Public ReadOnly Property LastCheckpoint As TransferCheckpoint
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
  id: ShouldOverwriteCallback
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: ShouldOverwriteCallback
  nameWithType: TransferContext.ShouldOverwriteCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ShouldOverwriteCallback
    path: lib/TransferContext.cs
    startLine: 106
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the callback invoked to tell whether to overwrite an existing destination.\n"
  example: []
  syntax:
    content: public ShouldOverwriteCallback ShouldOverwriteCallback { get; set; }
    content.vb: Public Property ShouldOverwriteCallback As ShouldOverwriteCallback
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.DataMovement.ShouldOverwriteCallback
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
  id: SetAttributesCallback
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: SetAttributesCallback
  nameWithType: TransferContext.SetAttributesCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetAttributesCallback
    path: lib/TransferContext.cs
    startLine: 116
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the callback invoked to set destination's attributes in memory. \nThe attributes set in this callback will be sent to azure storage service. \n"
  example: []
  syntax:
    content: public SetAttributesCallback SetAttributesCallback { get; set; }
    content.vb: Public Property SetAttributesCallback As SetAttributesCallback
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.DataMovement.SetAttributesCallback
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
  id: ProgressHandler
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: ProgressHandler
  nameWithType: TransferContext.ProgressHandler
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
  type: Property
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ProgressHandler
    path: lib/TransferContext.cs
    startLine: 125
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the progress update handler.\n"
  example: []
  syntax:
    content: public IProgress<TransferStatus> ProgressHandler { get; set; }
    content.vb: Public Property ProgressHandler As IProgress(Of TransferStatus)
    parameters: []
    return:
      type: System.IProgress{Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus}
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileTransferred
  commentId: E:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileTransferred
  id: FileTransferred
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: FileTransferred
  nameWithType: TransferContext.FileTransferred
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileTransferred
  type: Event
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileTransferred
    path: lib/TransferContext.cs
    startLine: 141
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nThe event triggered when a file transfer is completed successfully.\n"
  example: []
  syntax:
    content: public event EventHandler<TransferEventArgs> FileTransferred
    content.vb: Public Event FileTransferred As EventHandler(Of TransferEventArgs)
    return:
      type: System.EventHandler{Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileSkipped
  commentId: E:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileSkipped
  id: FileSkipped
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: FileSkipped
  nameWithType: TransferContext.FileSkipped
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileSkipped
  type: Event
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileSkipped
    path: lib/TransferContext.cs
    startLine: 146
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nThe event triggered when a file transfer is skipped.\n"
  example: []
  syntax:
    content: public event EventHandler<TransferEventArgs> FileSkipped
    content.vb: Public Event FileSkipped As EventHandler(Of TransferEventArgs)
    return:
      type: System.EventHandler{Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileFailed
  commentId: E:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileFailed
  id: FileFailed
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  langs:
  - csharp
  - vb
  name: FileFailed
  nameWithType: TransferContext.FileFailed
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.FileFailed
  type: Event
  source:
    remote:
      path: lib/TransferContext.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileFailed
    path: lib/TransferContext.cs
    startLine: 151
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nThe event triggered when a file transfer is failed.\n"
  example: []
  syntax:
    content: public event EventHandler<TransferEventArgs> FileFailed
    content.vb: Public Event FileFailed As EventHandler(Of TransferEventArgs)
    return:
      type: System.EventHandler{Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.DataMovement
  commentId: N:Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.DataMovement
  nameWithType: Microsoft.WindowsAzure.Storage.DataMovement
  fullName: Microsoft.WindowsAzure.Storage.DataMovement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite
  isExternal: false
  name: ForceOverwrite
  nameWithType: TransferContext.ForceOverwrite
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ForceOverwrite
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: TransferContext
  nameWithType: TransferContext
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.#ctor
  isExternal: false
  name: TransferContext
  nameWithType: TransferContext.TransferContext
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.TransferContext
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: TransferCheckpoint
  nameWithType: TransferCheckpoint
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferCheckpoint
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
  isExternal: false
  name: ClientRequestId
  nameWithType: TransferContext.ClientRequestId
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ClientRequestId
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.LogLevel
  commentId: T:Microsoft.WindowsAzure.Storage.LogLevel
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: LogLevel
  nameWithType: LogLevel
  fullName: Microsoft.WindowsAzure.Storage.LogLevel
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
  isExternal: false
  name: LogLevel
  nameWithType: TransferContext.LogLevel
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LogLevel
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
  isExternal: false
  name: LastCheckpoint
  nameWithType: TransferContext.LastCheckpoint
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.LastCheckpoint
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
  isExternal: false
  name: ShouldOverwriteCallback
  nameWithType: TransferContext.ShouldOverwriteCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ShouldOverwriteCallback
- uid: Microsoft.WindowsAzure.Storage.DataMovement.ShouldOverwriteCallback
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.ShouldOverwriteCallback
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: ShouldOverwriteCallback
  nameWithType: ShouldOverwriteCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.ShouldOverwriteCallback
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
  isExternal: false
  name: SetAttributesCallback
  nameWithType: TransferContext.SetAttributesCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.SetAttributesCallback
- uid: Microsoft.WindowsAzure.Storage.DataMovement.SetAttributesCallback
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.SetAttributesCallback
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: SetAttributesCallback
  nameWithType: SetAttributesCallback
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.SetAttributesCallback
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
  isExternal: false
  name: ProgressHandler
  nameWithType: TransferContext.ProgressHandler
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferContext.ProgressHandler
- uid: System.IProgress{Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus}
  commentId: T:System.IProgress{Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus}
  parent: System
  definition: System.IProgress`1
  name: IProgress<TransferStatus>
  nameWithType: IProgress<TransferStatus>
  fullName: System.IProgress<Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus>
  nameWithType.vb: IProgress(Of TransferStatus)
  fullname.vb: System.IProgress(Of Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus)
  name.vb: IProgress(Of TransferStatus)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus
    name: TransferStatus
    nameWithType: TransferStatus
    fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus
    name: TransferStatus
    nameWithType: TransferStatus
    fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferStatus
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IProgress`1
  commentId: T:System.IProgress`1
  isExternal: true
  name: IProgress<T>
  nameWithType: IProgress<T>
  fullName: System.IProgress<T>
  nameWithType.vb: IProgress(Of T)
  fullname.vb: System.IProgress(Of T)
  name.vb: IProgress(Of T)
  spec.csharp:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IProgress`1
    name: IProgress
    nameWithType: IProgress
    fullName: System.IProgress
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler{Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs}
  commentId: T:System.EventHandler{Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<TransferEventArgs>
  nameWithType: EventHandler<TransferEventArgs>
  fullName: System.EventHandler<Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs>
  nameWithType.vb: EventHandler(Of TransferEventArgs)
  fullname.vb: System.EventHandler(Of Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs)
  name.vb: EventHandler(Of TransferEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs
    name: TransferEventArgs
    nameWithType: TransferEventArgs
    fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs
    name: TransferEventArgs
    nameWithType: TransferEventArgs
    fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
