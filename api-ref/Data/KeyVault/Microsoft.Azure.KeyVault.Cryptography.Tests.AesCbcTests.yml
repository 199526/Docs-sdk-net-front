### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  commentId: T:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  id: AesCbcTests
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests
  children:
  - Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock
  - Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  - Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock
  - Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  - Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture(Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  langs:
  - csharp
  - vb
  name: AesCbcTests
  nameWithType: AesCbcTests
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AesCbcTests
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  summary: "\nVerify AESCBC\n"
  example: []
  syntax:
    content: 'public class AesCbcTests : IClassFixture<TestFixture>'
    content.vb: >-
      Public Class AesCbcTests
          Implements IClassFixture(Of TestFixture)
  inheritance:
  - System.Object
  implements:
  - Xunit.IClassFixture{Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture}
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture(Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  commentId: M:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture(Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  id: SetFixture(Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  langs:
  - csharp
  - vb
  name: SetFixture(TestFixture)
  nameWithType: AesCbcTests.SetFixture(TestFixture)
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture(Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SetFixture
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  syntax:
    content: public void SetFixture(TestFixture data)
    content.vb: Public Sub SetFixture(data As TestFixture)
    parameters:
    - id: data
      type: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
  overload: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock
  commentId: M:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock
  id: KeyVault_Aes128CbcOneBlock
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  langs:
  - csharp
  - vb
  name: KeyVault_Aes128CbcOneBlock()
  nameWithType: AesCbcTests.KeyVault_Aes128CbcOneBlock()
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_Aes128CbcOneBlock
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  summary: "\nTesting AES128CBC, vectors from RFC 3602\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_Aes128CbcOneBlock()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_Aes128CbcOneBlock
  overload: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock
  commentId: M:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock
  id: KeyVault_Aes128CbcTwoBlock
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  langs:
  - csharp
  - vb
  name: KeyVault_Aes128CbcTwoBlock()
  nameWithType: AesCbcTests.KeyVault_Aes128CbcTwoBlock()
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_Aes128CbcTwoBlock
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  summary: "\nTesting AES128CBC, vectors from RFC 3602\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_Aes128CbcTwoBlock()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_Aes128CbcTwoBlock
  overload: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  commentId: M:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  id: KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  langs:
  - csharp
  - vb
  name: KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial()
  nameWithType: AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial()
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 95
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  summary: "\nTesting AES128CBC, vectors from RFC 3602\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  overload: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  commentId: M:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  id: KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests
  langs:
  - csharp
  - vb
  name: KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial()
  nameWithType: AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial()
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
    path: src/KeyVault/Microsoft.Azure.KeyVault.Cryptography.Tests/Tests/Cryptography/Algorithms/AesCbcTests.cs
    startLine: 130
  assemblies:
  - Microsoft.Azure.KeyVault.Cryptography.Tests
  namespace: Microsoft.Azure.KeyVault.Cryptography.Tests
  summary: "\nTesting AES128CBC, vectors from RFC 3602\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  overload: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests
  commentId: N:Microsoft.Azure.KeyVault.Cryptography.Tests
  isExternal: false
  name: Microsoft.Azure.KeyVault.Cryptography.Tests
  nameWithType: Microsoft.Azure.KeyVault.Cryptography.Tests
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Xunit.IClassFixture{Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture}
  commentId: T:Xunit.IClassFixture{Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture}
  parent: Xunit
  definition: Xunit.IClassFixture`1
  name: IClassFixture<TestFixture>
  nameWithType: IClassFixture<TestFixture>
  fullName: Xunit.IClassFixture<Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture>
  nameWithType.vb: IClassFixture(Of TestFixture)
  fullname.vb: Xunit.IClassFixture(Of Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture)
  name.vb: IClassFixture(Of TestFixture)
  spec.csharp:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
    name: TestFixture
    nameWithType: TestFixture
    fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
    name: TestFixture
    nameWithType: TestFixture
    fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Xunit.IClassFixture`1
  commentId: T:Xunit.IClassFixture`1
  isExternal: true
  name: IClassFixture<TFixture>
  nameWithType: IClassFixture<TFixture>
  fullName: Xunit.IClassFixture<TFixture>
  nameWithType.vb: IClassFixture(Of TFixture)
  fullname.vb: Xunit.IClassFixture(Of TFixture)
  name.vb: IClassFixture(Of TFixture)
  spec.csharp:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TFixture
    nameWithType: TFixture
    fullName: TFixture
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Xunit.IClassFixture`1
    name: IClassFixture
    nameWithType: IClassFixture
    fullName: Xunit.IClassFixture
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TFixture
    nameWithType: TFixture
    fullName: TFixture
  - name: )
    nameWithType: )
    fullName: )
- uid: Xunit
  commentId: N:Xunit
  isExternal: false
  name: Xunit
  nameWithType: Xunit
  fullName: Xunit
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture*
  commentId: Overload:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture
  isExternal: false
  name: SetFixture
  nameWithType: AesCbcTests.SetFixture
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.SetFixture
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
  commentId: T:Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
  parent: Microsoft.Azure.KeyVault.Cryptography.Tests
  isExternal: false
  name: TestFixture
  nameWithType: TestFixture
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.TestFixture
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock*
  commentId: Overload:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock
  isExternal: false
  name: KeyVault_Aes128CbcOneBlock
  nameWithType: AesCbcTests.KeyVault_Aes128CbcOneBlock
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock*
  commentId: Overload:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock
  isExternal: false
  name: KeyVault_Aes128CbcTwoBlock
  nameWithType: AesCbcTests.KeyVault_Aes128CbcTwoBlock
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial*
  commentId: Overload:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  isExternal: false
  name: KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  nameWithType: AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcOneBlock_ExcessKeyMaterial
- uid: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial*
  commentId: Overload:Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  isExternal: false
  name: KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  nameWithType: AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
  fullName: Microsoft.Azure.KeyVault.Cryptography.Tests.AesCbcTests.KeyVault_Aes128CbcTwoBlock_ExcessKeyMaterial
