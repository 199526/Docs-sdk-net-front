### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  commentId: T:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  id: CachingKeyResolverTests
  parent: Microsoft.Azure.KeyVault.Extensions.Tests
  children:
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
  - Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
  langs:
  - csharp
  - vb
  name: CachingKeyResolverTests
  nameWithType: CachingKeyResolverTests
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CachingKeyResolverTests
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  syntax:
    content: public class CachingKeyResolverTests
    content.vb: Public Class CachingKeyResolverTests
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
  id: KeyVault_CapacityLimitOfCachingKeyResolver
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CapacityLimitOfCachingKeyResolver()
  nameWithType: CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CapacityLimitOfCachingKeyResolver
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest capacity and trimming of <xref href=\"Microsoft.Azure.KeyVault.CachingKeyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public Task KeyVault_CapacityLimitOfCachingKeyResolver()
    content.vb: >-
      <Fact>

      Public Function KeyVault_CapacityLimitOfCachingKeyResolver As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
  id: KeyVault_CachingKeyResolverThrows
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CachingKeyResolverThrows()
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CachingKeyResolverThrows
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest resolving a key that throws and gets removed from cache\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public Task KeyVault_CachingKeyResolverThrows()
    content.vb: >-
      <Fact>

      Public Function KeyVault_CachingKeyResolverThrows As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
  id: KeyVault_CachingKeyResolverGetAndAddThreadSafety
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CachingKeyResolverGetAndAddThreadSafety()
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CachingKeyResolverGetAndAddThreadSafety
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 103
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest multi-thread safty of <xref href=\"Microsoft.Azure.KeyVault.CachingKeyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_CachingKeyResolverGetAndAddThreadSafety()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_CachingKeyResolverGetAndAddThreadSafety
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
  id: KeyVault_CachingKeyResolverCapacityThreadSafety
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CachingKeyResolverCapacityThreadSafety()
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CachingKeyResolverCapacityThreadSafety
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 127
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest multi-thread safty of size limit <xref href=\"Microsoft.Azure.KeyVault.CachingKeyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public void KeyVault_CachingKeyResolverCapacityThreadSafety()
    content.vb: >-
      <Fact>

      Public Sub KeyVault_CachingKeyResolverCapacityThreadSafety
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
  id: KeyVault_CachingKeyResolverKeyIsDisposed
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CachingKeyResolverKeyIsDisposed()
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CachingKeyResolverKeyIsDisposed
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 159
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest disposing key after cache is disposed in <xref href=\"Microsoft.Azure.KeyVault.CachingKeyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public Task KeyVault_CachingKeyResolverKeyIsDisposed()
    content.vb: >-
      <Fact>

      Public Function KeyVault_CachingKeyResolverKeyIsDisposed As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
  commentId: M:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
  id: KeyVault_CachingKeyResolverDisposeCachedKey
  parent: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests
  langs:
  - csharp
  - vb
  name: KeyVault_CachingKeyResolverDisposeCachedKey()
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey()
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey()
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVault_CachingKeyResolverDisposeCachedKey
    path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions.Tests/Tests/CachingKeyResolverTests.cs
    startLine: 180
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions.Tests
  namespace: Microsoft.Azure.KeyVault.Extensions.Tests
  summary: "\nTest disposing a key while it is cached in <xref href=\"Microsoft.Azure.KeyVault.CachingKeyResolver\" data-throw-if-not-resolved=\"false\"></xref>\n"
  example: []
  syntax:
    content: >-
      [Fact]

      public Task KeyVault_CachingKeyResolverDisposeCachedKey()
    content.vb: >-
      <Fact>

      Public Function KeyVault_CachingKeyResolverDisposeCachedKey As Task
    return:
      type: System.Threading.Tasks.Task
  overload: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey*
  attributes:
  - type: Xunit.FactAttribute
    ctor: Xunit.FactAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.KeyVault.Extensions.Tests
  commentId: N:Microsoft.Azure.KeyVault.Extensions.Tests
  isExternal: false
  name: Microsoft.Azure.KeyVault.Extensions.Tests
  nameWithType: Microsoft.Azure.KeyVault.Extensions.Tests
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.CachingKeyResolver
  commentId: T:Microsoft.Azure.KeyVault.CachingKeyResolver
  isExternal: false
  name: CachingKeyResolver
  nameWithType: CachingKeyResolver
  fullName: Microsoft.Azure.KeyVault.CachingKeyResolver
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
  isExternal: false
  name: KeyVault_CapacityLimitOfCachingKeyResolver
  nameWithType: CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CapacityLimitOfCachingKeyResolver
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
  isExternal: false
  name: KeyVault_CachingKeyResolverThrows
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverThrows
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
  isExternal: false
  name: KeyVault_CachingKeyResolverGetAndAddThreadSafety
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverGetAndAddThreadSafety
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
  isExternal: false
  name: KeyVault_CachingKeyResolverCapacityThreadSafety
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverCapacityThreadSafety
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
  isExternal: false
  name: KeyVault_CachingKeyResolverKeyIsDisposed
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverKeyIsDisposed
- uid: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey*
  commentId: Overload:Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
  isExternal: false
  name: KeyVault_CachingKeyResolverDisposeCachedKey
  nameWithType: CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
  fullName: Microsoft.Azure.KeyVault.Extensions.Tests.CachingKeyResolverTests.KeyVault_CachingKeyResolverDisposeCachedKey
