### YamlMime:ManagedReference
items:
- uid: DMLibTest.CloudBlobExtensions
  commentId: T:DMLibTest.CloudBlobExtensions
  id: CloudBlobExtensions
  parent: DMLibTest
  children:
  - DMLibTest.CloudBlobExtensions.AcquireLease(CloudBlob,System.Nullable{TimeSpan},System.String,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.Delete(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.DeleteIfExists(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.DownloadToFile(CloudBlob,System.String,FileMode,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.DownloadToStream(CloudBlob,Stream,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.Exists(CloudBlob,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.FetchAttributes(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.ReleaseLease(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.SetMetadata(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.SetProperties(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobExtensions.Snapshot(CloudBlob,IDictionary{System.String,System.String},AccessCondition,BlobRequestOptions,OperationContext)
  langs:
  - csharp
  - vb
  name: CloudBlobExtensions
  nameWithType: CloudBlobExtensions
  fullName: DMLibTest.CloudBlobExtensions
  type: Class
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CloudBlobExtensions
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 8
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: 'public static class CloudBlobExtensions : object'
    content.vb: >-
      Public Module CloudBlobExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DMLibTest.CloudBlobExtensions.AcquireLease(CloudBlob,System.Nullable{TimeSpan},System.String,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.AcquireLease(CloudBlob,System.Nullable{TimeSpan},System.String,AccessCondition,BlobRequestOptions,OperationContext)
  id: AcquireLease(CloudBlob,System.Nullable{TimeSpan},System.String,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: AcquireLease(CloudBlob, Nullable<TimeSpan>, String, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.AcquireLease(CloudBlob, Nullable<TimeSpan>, String, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.AcquireLease(CloudBlob, System.Nullable<TimeSpan>, System.String, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: AcquireLease
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 10
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static string AcquireLease(this CloudBlob blob, TimeSpan? leaseTime, string proposedLeaseId, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function AcquireLease(blob As CloudBlob, leaseTime As TimeSpan?, proposedLeaseId As String, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As String
    parameters:
    - id: blob
      type: CloudBlob
    - id: leaseTime
      type: System.Nullable{TimeSpan}
    - id: proposedLeaseId
      type: System.String
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.String
  overload: DMLibTest.CloudBlobExtensions.AcquireLease*
  nameWithType.vb: CloudBlobExtensions.AcquireLease(CloudBlob, Nullable(Of TimeSpan), String, AccessCondition, BlobRequestOptions, OperationContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DMLibTest.CloudBlobExtensions.AcquireLease(CloudBlob, System.Nullable(Of TimeSpan), System.String, AccessCondition, BlobRequestOptions, OperationContext)
  name.vb: AcquireLease(CloudBlob, Nullable(Of TimeSpan), String, AccessCondition, BlobRequestOptions, OperationContext)
- uid: DMLibTest.CloudBlobExtensions.Delete(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.Delete(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  id: Delete(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: Delete(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.Delete(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.Delete(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Delete
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 15
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Delete(this CloudBlob blob, DeleteSnapshotsOption deleteSnapshotsOption = null, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Delete(blob As CloudBlob, deleteSnapshotsOption As DeleteSnapshotsOption = Nothing, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: deleteSnapshotsOption
      type: DeleteSnapshotsOption
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.DeleteIfExists(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.DeleteIfExists(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  id: DeleteIfExists(CloudBlob,DeleteSnapshotsOption,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: DeleteIfExists(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.DeleteIfExists(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.DeleteIfExists(CloudBlob, DeleteSnapshotsOption, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteIfExists
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 20
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool DeleteIfExists(this CloudBlob blob, DeleteSnapshotsOption deleteSnapshotsOption = null, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteIfExists(blob As CloudBlob, deleteSnapshotsOption As DeleteSnapshotsOption = Nothing, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: blob
      type: CloudBlob
    - id: deleteSnapshotsOption
      type: DeleteSnapshotsOption
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudBlobExtensions.DeleteIfExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.DownloadToFile(CloudBlob,System.String,FileMode,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.DownloadToFile(CloudBlob,System.String,FileMode,AccessCondition,BlobRequestOptions,OperationContext)
  id: DownloadToFile(CloudBlob,System.String,FileMode,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFile(CloudBlob, String, FileMode, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.DownloadToFile(CloudBlob, String, FileMode, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.DownloadToFile(CloudBlob, System.String, FileMode, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DownloadToFile
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 25
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void DownloadToFile(this CloudBlob blob, string path, FileMode mode, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToFile(blob As CloudBlob, path As String, mode As FileMode, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: path
      type: System.String
    - id: mode
      type: FileMode
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.DownloadToFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.DownloadToStream(CloudBlob,Stream,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.DownloadToStream(CloudBlob,Stream,AccessCondition,BlobRequestOptions,OperationContext)
  id: DownloadToStream(CloudBlob,Stream,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: DownloadToStream(CloudBlob, Stream, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.DownloadToStream(CloudBlob, Stream, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.DownloadToStream(CloudBlob, Stream, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DownloadToStream
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 30
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void DownloadToStream(this CloudBlob blob, Stream target, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToStream(blob As CloudBlob, target As Stream, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: target
      type: Stream
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.DownloadToStream*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.Exists(CloudBlob,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.Exists(CloudBlob,BlobRequestOptions,OperationContext)
  id: Exists(CloudBlob,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: Exists(CloudBlob, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.Exists(CloudBlob, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.Exists(CloudBlob, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Exists
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 35
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool Exists(this CloudBlob blob, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(blob As CloudBlob, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: blob
      type: CloudBlob
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudBlobExtensions.Exists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.FetchAttributes(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.FetchAttributes(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  id: FetchAttributes(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: FetchAttributes(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.FetchAttributes(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.FetchAttributes(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FetchAttributes
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 40
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void FetchAttributes(this CloudBlob blob, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub FetchAttributes(blob As CloudBlob, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.FetchAttributes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.ReleaseLease(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.ReleaseLease(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  id: ReleaseLease(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: ReleaseLease(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.ReleaseLease(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.ReleaseLease(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ReleaseLease
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 45
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void ReleaseLease(this CloudBlob blob, AccessCondition accessCondition, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub ReleaseLease(blob As CloudBlob, accessCondition As AccessCondition, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.ReleaseLease*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.SetMetadata(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.SetMetadata(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  id: SetMetadata(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: SetMetadata(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.SetMetadata(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.SetMetadata(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetMetadata
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 50
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void SetMetadata(this CloudBlob blob, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetMetadata(blob As CloudBlob, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.SetMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.SetProperties(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.SetProperties(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  id: SetProperties(CloudBlob,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: SetProperties(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.SetProperties(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.SetProperties(CloudBlob, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetProperties
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 55
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void SetProperties(this CloudBlob blob, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetProperties(blob As CloudBlob, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: blob
      type: CloudBlob
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobExtensions.SetProperties*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobExtensions.Snapshot(CloudBlob,IDictionary{System.String,System.String},AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobExtensions.Snapshot(CloudBlob,IDictionary{System.String,System.String},AccessCondition,BlobRequestOptions,OperationContext)
  id: Snapshot(CloudBlob,IDictionary{System.String,System.String},AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobExtensions
  langs:
  - csharp
  - vb
  name: Snapshot(CloudBlob, IDictionary<String, String>, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobExtensions.Snapshot(CloudBlob, IDictionary<String, String>, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobExtensions.Snapshot(CloudBlob, IDictionary<System.String, System.String>, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Snapshot
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobExtensions.cs
    startLine: 60
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static CloudBlob Snapshot(this CloudBlob blob, IDictionary<string, string> metadata = null, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Snapshot(blob As CloudBlob, metadata As IDictionary(Of String, String) = Nothing, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As CloudBlob
    parameters:
    - id: blob
      type: CloudBlob
    - id: metadata
      type: IDictionary{System.String,System.String}
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: CloudBlob
  overload: DMLibTest.CloudBlobExtensions.Snapshot*
  nameWithType.vb: CloudBlobExtensions.Snapshot(CloudBlob, IDictionary(Of String, String), AccessCondition, BlobRequestOptions, OperationContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DMLibTest.CloudBlobExtensions.Snapshot(CloudBlob, IDictionary(Of System.String, System.String), AccessCondition, BlobRequestOptions, OperationContext)
  name.vb: Snapshot(CloudBlob, IDictionary(Of String, String), AccessCondition, BlobRequestOptions, OperationContext)
references:
- uid: DMLibTest
  commentId: N:DMLibTest
  isExternal: false
  name: DMLibTest
  nameWithType: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DMLibTest.CloudBlobExtensions.AcquireLease*
  commentId: Overload:DMLibTest.CloudBlobExtensions.AcquireLease
  isExternal: false
  name: AcquireLease
  nameWithType: CloudBlobExtensions.AcquireLease
  fullName: DMLibTest.CloudBlobExtensions.AcquireLease
- uid: CloudBlob
  isExternal: true
  name: CloudBlob
  nameWithType: CloudBlob
  fullName: CloudBlob
- uid: System.Nullable{TimeSpan}
  commentId: '!:System.Nullable{TimeSpan}'
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: AccessCondition
  isExternal: true
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: AccessCondition
- uid: BlobRequestOptions
  isExternal: true
  name: BlobRequestOptions
  nameWithType: BlobRequestOptions
  fullName: BlobRequestOptions
- uid: OperationContext
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: OperationContext
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DMLibTest.CloudBlobExtensions.Delete*
  commentId: Overload:DMLibTest.CloudBlobExtensions.Delete
  isExternal: false
  name: Delete
  nameWithType: CloudBlobExtensions.Delete
  fullName: DMLibTest.CloudBlobExtensions.Delete
- uid: DeleteSnapshotsOption
  isExternal: true
  name: DeleteSnapshotsOption
  nameWithType: DeleteSnapshotsOption
  fullName: DeleteSnapshotsOption
- uid: DMLibTest.CloudBlobExtensions.DeleteIfExists*
  commentId: Overload:DMLibTest.CloudBlobExtensions.DeleteIfExists
  isExternal: false
  name: DeleteIfExists
  nameWithType: CloudBlobExtensions.DeleteIfExists
  fullName: DMLibTest.CloudBlobExtensions.DeleteIfExists
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DMLibTest.CloudBlobExtensions.DownloadToFile*
  commentId: Overload:DMLibTest.CloudBlobExtensions.DownloadToFile
  isExternal: false
  name: DownloadToFile
  nameWithType: CloudBlobExtensions.DownloadToFile
  fullName: DMLibTest.CloudBlobExtensions.DownloadToFile
- uid: FileMode
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: FileMode
- uid: DMLibTest.CloudBlobExtensions.DownloadToStream*
  commentId: Overload:DMLibTest.CloudBlobExtensions.DownloadToStream
  isExternal: false
  name: DownloadToStream
  nameWithType: CloudBlobExtensions.DownloadToStream
  fullName: DMLibTest.CloudBlobExtensions.DownloadToStream
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: DMLibTest.CloudBlobExtensions.Exists*
  commentId: Overload:DMLibTest.CloudBlobExtensions.Exists
  isExternal: false
  name: Exists
  nameWithType: CloudBlobExtensions.Exists
  fullName: DMLibTest.CloudBlobExtensions.Exists
- uid: DMLibTest.CloudBlobExtensions.FetchAttributes*
  commentId: Overload:DMLibTest.CloudBlobExtensions.FetchAttributes
  isExternal: false
  name: FetchAttributes
  nameWithType: CloudBlobExtensions.FetchAttributes
  fullName: DMLibTest.CloudBlobExtensions.FetchAttributes
- uid: DMLibTest.CloudBlobExtensions.ReleaseLease*
  commentId: Overload:DMLibTest.CloudBlobExtensions.ReleaseLease
  isExternal: false
  name: ReleaseLease
  nameWithType: CloudBlobExtensions.ReleaseLease
  fullName: DMLibTest.CloudBlobExtensions.ReleaseLease
- uid: DMLibTest.CloudBlobExtensions.SetMetadata*
  commentId: Overload:DMLibTest.CloudBlobExtensions.SetMetadata
  isExternal: false
  name: SetMetadata
  nameWithType: CloudBlobExtensions.SetMetadata
  fullName: DMLibTest.CloudBlobExtensions.SetMetadata
- uid: DMLibTest.CloudBlobExtensions.SetProperties*
  commentId: Overload:DMLibTest.CloudBlobExtensions.SetProperties
  isExternal: false
  name: SetProperties
  nameWithType: CloudBlobExtensions.SetProperties
  fullName: DMLibTest.CloudBlobExtensions.SetProperties
- uid: DMLibTest.CloudBlobExtensions.Snapshot*
  commentId: Overload:DMLibTest.CloudBlobExtensions.Snapshot
  isExternal: false
  name: Snapshot
  nameWithType: CloudBlobExtensions.Snapshot
  fullName: DMLibTest.CloudBlobExtensions.Snapshot
- uid: IDictionary{System.String,System.String}
  commentId: '!:IDictionary{System.String,System.String}'
  definition: IDictionary`2
  name: IDictionary<String, String>
  nameWithType: IDictionary<String, String>
  fullName: IDictionary<System.String, System.String>
  nameWithType.vb: IDictionary(Of String, String)
  fullname.vb: IDictionary(Of System.String, System.String)
  name.vb: IDictionary(Of String, String)
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IDictionary`2
  isExternal: true
  name: IDictionary<, >
  nameWithType: IDictionary<, >
  fullName: IDictionary<, >
  nameWithType.vb: IDictionary(Of , )
  fullname.vb: IDictionary(Of , )
  name.vb: IDictionary(Of , )
  spec.csharp:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IDictionary`2
    name: IDictionary
    nameWithType: IDictionary
    fullName: IDictionary
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
