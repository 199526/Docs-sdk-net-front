### YamlMime:ManagedReference
items:
- uid: DMLibTest.CloudFileDirectoryExtensions
  commentId: T:DMLibTest.CloudFileDirectoryExtensions
  id: CloudFileDirectoryExtensions
  parent: DMLibTest
  children:
  - DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists(CloudFileDirectory,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileDirectoryExtensions.Delete(CloudFileDirectory,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileDirectoryExtensions.Exists(CloudFileDirectory,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories(CloudFileDirectory,FileRequestOptions,OperationContext)
  langs:
  - csharp
  - vb
  name: CloudFileDirectoryExtensions
  nameWithType: CloudFileDirectoryExtensions
  fullName: DMLibTest.CloudFileDirectoryExtensions
  type: Class
  source:
    remote:
      path: netcore/DMLibTest/CloudFileDirectoryExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CloudFileDirectoryExtensions
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileDirectoryExtensions.cs
    startLine: 8
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: 'public static class CloudFileDirectoryExtensions : object'
    content.vb: >-
      Public Module CloudFileDirectoryExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists(CloudFileDirectory,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists(CloudFileDirectory,FileRequestOptions,OperationContext)
  id: CreateIfNotExists(CloudFileDirectory,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileDirectoryExtensions
  langs:
  - csharp
  - vb
  name: CreateIfNotExists(CloudFileDirectory, FileRequestOptions, OperationContext)
  nameWithType: CloudFileDirectoryExtensions.CreateIfNotExists(CloudFileDirectory, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists(CloudFileDirectory, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileDirectoryExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CreateIfNotExists
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileDirectoryExtensions.cs
    startLine: 10
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool CreateIfNotExists(this CloudFileDirectory dir, FileRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateIfNotExists(dir As CloudFileDirectory, requestOptions As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: dir
      type: CloudFileDirectory
    - id: requestOptions
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileDirectoryExtensions.Delete(CloudFileDirectory,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileDirectoryExtensions.Delete(CloudFileDirectory,AccessCondition,FileRequestOptions,OperationContext)
  id: Delete(CloudFileDirectory,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileDirectoryExtensions
  langs:
  - csharp
  - vb
  name: Delete(CloudFileDirectory, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileDirectoryExtensions.Delete(CloudFileDirectory, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileDirectoryExtensions.Delete(CloudFileDirectory, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileDirectoryExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Delete
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileDirectoryExtensions.cs
    startLine: 33
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Delete(this CloudFileDirectory dir, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Delete(dir As CloudFileDirectory, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: dir
      type: CloudFileDirectory
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileDirectoryExtensions.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileDirectoryExtensions.Exists(CloudFileDirectory,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileDirectoryExtensions.Exists(CloudFileDirectory,FileRequestOptions,OperationContext)
  id: Exists(CloudFileDirectory,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileDirectoryExtensions
  langs:
  - csharp
  - vb
  name: Exists(CloudFileDirectory, FileRequestOptions, OperationContext)
  nameWithType: CloudFileDirectoryExtensions.Exists(CloudFileDirectory, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileDirectoryExtensions.Exists(CloudFileDirectory, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileDirectoryExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Exists
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileDirectoryExtensions.cs
    startLine: 38
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool Exists(this CloudFileDirectory dir, FileRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(dir As CloudFileDirectory, requestOptions As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: dir
      type: CloudFileDirectory
    - id: requestOptions
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudFileDirectoryExtensions.Exists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories(CloudFileDirectory,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories(CloudFileDirectory,FileRequestOptions,OperationContext)
  id: ListFilesAndDirectories(CloudFileDirectory,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileDirectoryExtensions
  langs:
  - csharp
  - vb
  name: ListFilesAndDirectories(CloudFileDirectory, FileRequestOptions, OperationContext)
  nameWithType: CloudFileDirectoryExtensions.ListFilesAndDirectories(CloudFileDirectory, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories(CloudFileDirectory, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileDirectoryExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ListFilesAndDirectories
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileDirectoryExtensions.cs
    startLine: 43
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static IEnumerable<IListFileItem> ListFilesAndDirectories(this CloudFileDirectory dir, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListFilesAndDirectories(dir As CloudFileDirectory, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of IListFileItem)
    parameters:
    - id: dir
      type: CloudFileDirectory
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: IEnumerable{IListFileItem}
  overload: DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DMLibTest
  commentId: N:DMLibTest
  isExternal: false
  name: DMLibTest
  nameWithType: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists*
  commentId: Overload:DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists
  isExternal: false
  name: CreateIfNotExists
  nameWithType: CloudFileDirectoryExtensions.CreateIfNotExists
  fullName: DMLibTest.CloudFileDirectoryExtensions.CreateIfNotExists
- uid: CloudFileDirectory
  isExternal: true
  name: CloudFileDirectory
  nameWithType: CloudFileDirectory
  fullName: CloudFileDirectory
- uid: FileRequestOptions
  isExternal: true
  name: FileRequestOptions
  nameWithType: FileRequestOptions
  fullName: FileRequestOptions
- uid: OperationContext
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: OperationContext
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DMLibTest.CloudFileDirectoryExtensions.Delete*
  commentId: Overload:DMLibTest.CloudFileDirectoryExtensions.Delete
  isExternal: false
  name: Delete
  nameWithType: CloudFileDirectoryExtensions.Delete
  fullName: DMLibTest.CloudFileDirectoryExtensions.Delete
- uid: AccessCondition
  isExternal: true
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: AccessCondition
- uid: DMLibTest.CloudFileDirectoryExtensions.Exists*
  commentId: Overload:DMLibTest.CloudFileDirectoryExtensions.Exists
  isExternal: false
  name: Exists
  nameWithType: CloudFileDirectoryExtensions.Exists
  fullName: DMLibTest.CloudFileDirectoryExtensions.Exists
- uid: DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories*
  commentId: Overload:DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories
  isExternal: false
  name: ListFilesAndDirectories
  nameWithType: CloudFileDirectoryExtensions.ListFilesAndDirectories
  fullName: DMLibTest.CloudFileDirectoryExtensions.ListFilesAndDirectories
- uid: IEnumerable{IListFileItem}
  commentId: '!:IEnumerable{IListFileItem}'
  definition: IEnumerable`1
  name: IEnumerable<IListFileItem>
  nameWithType: IEnumerable<IListFileItem>
  fullName: IEnumerable<IListFileItem>
  nameWithType.vb: IEnumerable(Of IListFileItem)
  fullname.vb: IEnumerable(Of IListFileItem)
  name.vb: IEnumerable(Of IListFileItem)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IListFileItem
    name: IListFileItem
    nameWithType: IListFileItem
    fullName: IListFileItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IListFileItem
    name: IListFileItem
    nameWithType: IListFileItem
    fullName: IListFileItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
