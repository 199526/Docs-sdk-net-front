### YamlMime:ManagedReference
items:
- uid: DMLibTest.CloudFileExtensions
  commentId: T:DMLibTest.CloudFileExtensions
  id: CloudFileExtensions
  parent: DMLibTest
  children:
  - DMLibTest.CloudFileExtensions.Create(CloudFile,System.Int64,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.Delete(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.DeleteIfExists(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.DownloadToFile(CloudFile,System.String,FileMode,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.DownloadToStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.Exists(CloudFile,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.FetchAttributes(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.ListRanges(CloudFile,System.Nullable{System.Int64},System.Nullable{System.Int64},AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.SetMetadata(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.SetProperties(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.UploadFromFile(CloudFile,System.String,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.UploadFromStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileExtensions.WriteRange(CloudFile,Stream,System.Int64,System.String,AccessCondition,FileRequestOptions,OperationContext)
  langs:
  - csharp
  - vb
  name: CloudFileExtensions
  nameWithType: CloudFileExtensions
  fullName: DMLibTest.CloudFileExtensions
  type: Class
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CloudFileExtensions
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 7
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: 'public static class CloudFileExtensions : object'
    content.vb: >-
      Public Module CloudFileExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DMLibTest.CloudFileExtensions.Create(CloudFile,System.Int64,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.Create(CloudFile,System.Int64,AccessCondition,FileRequestOptions,OperationContext)
  id: Create(CloudFile,System.Int64,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: Create(CloudFile, Int64, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.Create(CloudFile, Int64, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.Create(CloudFile, System.Int64, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Create
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 9
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Create(this CloudFile file, long size, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Create(file As CloudFile, size As Long, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: size
      type: System.Int64
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.Delete(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.Delete(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  id: Delete(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: Delete(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.Delete(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.Delete(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Delete
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 14
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Delete(this CloudFile file, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Delete(file As CloudFile, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.DeleteIfExists(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.DeleteIfExists(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  id: DeleteIfExists(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: DeleteIfExists(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.DeleteIfExists(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.DeleteIfExists(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteIfExists
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 19
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool DeleteIfExists(this CloudFile file, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteIfExists(file As CloudFile, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: file
      type: CloudFile
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudFileExtensions.DeleteIfExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.DownloadToFile(CloudFile,System.String,FileMode,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.DownloadToFile(CloudFile,System.String,FileMode,AccessCondition,FileRequestOptions,OperationContext)
  id: DownloadToFile(CloudFile,System.String,FileMode,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: DownloadToFile(CloudFile, String, FileMode, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.DownloadToFile(CloudFile, String, FileMode, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.DownloadToFile(CloudFile, System.String, FileMode, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DownloadToFile
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 24
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void DownloadToFile(this CloudFile file, string path, FileMode mode, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToFile(file As CloudFile, path As String, mode As FileMode, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: path
      type: System.String
    - id: mode
      type: FileMode
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.DownloadToFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.DownloadToStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.DownloadToStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  id: DownloadToStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: DownloadToStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.DownloadToStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.DownloadToStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DownloadToStream
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 29
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void DownloadToStream(this CloudFile file, Stream target, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub DownloadToStream(file As CloudFile, target As Stream, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: target
      type: Stream
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.DownloadToStream*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.Exists(CloudFile,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.Exists(CloudFile,FileRequestOptions,OperationContext)
  id: Exists(CloudFile,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: Exists(CloudFile, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.Exists(CloudFile, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.Exists(CloudFile, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Exists
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 34
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool Exists(this CloudFile file, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(file As CloudFile, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: file
      type: CloudFile
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudFileExtensions.Exists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.FetchAttributes(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.FetchAttributes(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  id: FetchAttributes(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: FetchAttributes(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.FetchAttributes(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.FetchAttributes(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FetchAttributes
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 39
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void FetchAttributes(this CloudFile file, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub FetchAttributes(file As CloudFile, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.FetchAttributes*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.ListRanges(CloudFile,System.Nullable{System.Int64},System.Nullable{System.Int64},AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.ListRanges(CloudFile,System.Nullable{System.Int64},System.Nullable{System.Int64},AccessCondition,FileRequestOptions,OperationContext)
  id: ListRanges(CloudFile,System.Nullable{System.Int64},System.Nullable{System.Int64},AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: ListRanges(CloudFile, Nullable<Int64>, Nullable<Int64>, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.ListRanges(CloudFile, Nullable<Int64>, Nullable<Int64>, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.ListRanges(CloudFile, System.Nullable<System.Int64>, System.Nullable<System.Int64>, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ListRanges
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 44
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static IEnumerable<FileRange> ListRanges(this CloudFile file, long ? offset = null, long ? length = null, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListRanges(file As CloudFile, offset As Long? = Nothing, length As Long? = Nothing, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of FileRange)
    parameters:
    - id: file
      type: CloudFile
    - id: offset
      type: System.Nullable{System.Int64}
    - id: length
      type: System.Nullable{System.Int64}
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: IEnumerable{FileRange}
  overload: DMLibTest.CloudFileExtensions.ListRanges*
  nameWithType.vb: CloudFileExtensions.ListRanges(CloudFile, Nullable(Of Int64), Nullable(Of Int64), AccessCondition, FileRequestOptions, OperationContext)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DMLibTest.CloudFileExtensions.ListRanges(CloudFile, System.Nullable(Of System.Int64), System.Nullable(Of System.Int64), AccessCondition, FileRequestOptions, OperationContext)
  name.vb: ListRanges(CloudFile, Nullable(Of Int64), Nullable(Of Int64), AccessCondition, FileRequestOptions, OperationContext)
- uid: DMLibTest.CloudFileExtensions.SetMetadata(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.SetMetadata(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  id: SetMetadata(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: SetMetadata(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.SetMetadata(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.SetMetadata(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetMetadata
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 49
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void SetMetadata(this CloudFile file, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetMetadata(file As CloudFile, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.SetMetadata*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.SetProperties(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.SetProperties(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  id: SetProperties(CloudFile,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: SetProperties(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.SetProperties(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.SetProperties(CloudFile, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetProperties
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 54
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void SetProperties(this CloudFile file, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetProperties(file As CloudFile, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.SetProperties*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.UploadFromFile(CloudFile,System.String,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.UploadFromFile(CloudFile,System.String,AccessCondition,FileRequestOptions,OperationContext)
  id: UploadFromFile(CloudFile,System.String,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: UploadFromFile(CloudFile, String, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.UploadFromFile(CloudFile, String, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.UploadFromFile(CloudFile, System.String, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: UploadFromFile
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 59
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void UploadFromFile(this CloudFile file, string path, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UploadFromFile(file As CloudFile, path As String, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: path
      type: System.String
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.UploadFromFile*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.UploadFromStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.UploadFromStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  id: UploadFromStream(CloudFile,Stream,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: UploadFromStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.UploadFromStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.UploadFromStream(CloudFile, Stream, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: UploadFromStream
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 64
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void UploadFromStream(this CloudFile file, Stream source, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub UploadFromStream(file As CloudFile, source As Stream, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: source
      type: Stream
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.UploadFromStream*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileExtensions.WriteRange(CloudFile,Stream,System.Int64,System.String,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileExtensions.WriteRange(CloudFile,Stream,System.Int64,System.String,AccessCondition,FileRequestOptions,OperationContext)
  id: WriteRange(CloudFile,Stream,System.Int64,System.String,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileExtensions
  langs:
  - csharp
  - vb
  name: WriteRange(CloudFile, Stream, Int64, String, AccessCondition, FileRequestOptions, OperationContext)
  nameWithType: CloudFileExtensions.WriteRange(CloudFile, Stream, Int64, String, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileExtensions.WriteRange(CloudFile, Stream, System.Int64, System.String, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: WriteRange
    path: src/storage-data-movement/netcore/DMLibTest/CloudFileExtensions.cs
    startLine: 69
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void WriteRange(this CloudFile file, Stream rangeData, long startOffset, string contentMD5 = null, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub WriteRange(file As CloudFile, rangeData As Stream, startOffset As Long, contentMD5 As String = Nothing, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: file
      type: CloudFile
    - id: rangeData
      type: Stream
    - id: startOffset
      type: System.Int64
    - id: contentMD5
      type: System.String
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudFileExtensions.WriteRange*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DMLibTest
  commentId: N:DMLibTest
  isExternal: false
  name: DMLibTest
  nameWithType: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DMLibTest.CloudFileExtensions.Create*
  commentId: Overload:DMLibTest.CloudFileExtensions.Create
  isExternal: false
  name: Create
  nameWithType: CloudFileExtensions.Create
  fullName: DMLibTest.CloudFileExtensions.Create
- uid: CloudFile
  isExternal: true
  name: CloudFile
  nameWithType: CloudFile
  fullName: CloudFile
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: AccessCondition
  isExternal: true
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: AccessCondition
- uid: FileRequestOptions
  isExternal: true
  name: FileRequestOptions
  nameWithType: FileRequestOptions
  fullName: FileRequestOptions
- uid: OperationContext
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: OperationContext
- uid: DMLibTest.CloudFileExtensions.Delete*
  commentId: Overload:DMLibTest.CloudFileExtensions.Delete
  isExternal: false
  name: Delete
  nameWithType: CloudFileExtensions.Delete
  fullName: DMLibTest.CloudFileExtensions.Delete
- uid: DMLibTest.CloudFileExtensions.DeleteIfExists*
  commentId: Overload:DMLibTest.CloudFileExtensions.DeleteIfExists
  isExternal: false
  name: DeleteIfExists
  nameWithType: CloudFileExtensions.DeleteIfExists
  fullName: DMLibTest.CloudFileExtensions.DeleteIfExists
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DMLibTest.CloudFileExtensions.DownloadToFile*
  commentId: Overload:DMLibTest.CloudFileExtensions.DownloadToFile
  isExternal: false
  name: DownloadToFile
  nameWithType: CloudFileExtensions.DownloadToFile
  fullName: DMLibTest.CloudFileExtensions.DownloadToFile
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: FileMode
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: FileMode
- uid: DMLibTest.CloudFileExtensions.DownloadToStream*
  commentId: Overload:DMLibTest.CloudFileExtensions.DownloadToStream
  isExternal: false
  name: DownloadToStream
  nameWithType: CloudFileExtensions.DownloadToStream
  fullName: DMLibTest.CloudFileExtensions.DownloadToStream
- uid: Stream
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: Stream
- uid: DMLibTest.CloudFileExtensions.Exists*
  commentId: Overload:DMLibTest.CloudFileExtensions.Exists
  isExternal: false
  name: Exists
  nameWithType: CloudFileExtensions.Exists
  fullName: DMLibTest.CloudFileExtensions.Exists
- uid: DMLibTest.CloudFileExtensions.FetchAttributes*
  commentId: Overload:DMLibTest.CloudFileExtensions.FetchAttributes
  isExternal: false
  name: FetchAttributes
  nameWithType: CloudFileExtensions.FetchAttributes
  fullName: DMLibTest.CloudFileExtensions.FetchAttributes
- uid: DMLibTest.CloudFileExtensions.ListRanges*
  commentId: Overload:DMLibTest.CloudFileExtensions.ListRanges
  isExternal: false
  name: ListRanges
  nameWithType: CloudFileExtensions.ListRanges
  fullName: DMLibTest.CloudFileExtensions.ListRanges
- uid: System.Nullable{System.Int64}
  commentId: '!:System.Nullable{System.Int64}'
  definition: System.Nullable`1
  name: Nullable<Int64>
  nameWithType: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  nameWithType.vb: Nullable(Of Int64)
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    nameWithType: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable{FileRange}
  commentId: '!:IEnumerable{FileRange}'
  definition: IEnumerable`1
  name: IEnumerable<FileRange>
  nameWithType: IEnumerable<FileRange>
  fullName: IEnumerable<FileRange>
  nameWithType.vb: IEnumerable(Of FileRange)
  fullname.vb: IEnumerable(Of FileRange)
  name.vb: IEnumerable(Of FileRange)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: FileRange
    name: FileRange
    nameWithType: FileRange
    fullName: FileRange
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: FileRange
    name: FileRange
    nameWithType: FileRange
    fullName: FileRange
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  isExternal: true
  name: Nullable<>
  nameWithType: Nullable<>
  fullName: System.Nullable<>
  nameWithType.vb: Nullable(Of )
  fullname.vb: System.Nullable(Of )
  name.vb: Nullable(Of )
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DMLibTest.CloudFileExtensions.SetMetadata*
  commentId: Overload:DMLibTest.CloudFileExtensions.SetMetadata
  isExternal: false
  name: SetMetadata
  nameWithType: CloudFileExtensions.SetMetadata
  fullName: DMLibTest.CloudFileExtensions.SetMetadata
- uid: DMLibTest.CloudFileExtensions.SetProperties*
  commentId: Overload:DMLibTest.CloudFileExtensions.SetProperties
  isExternal: false
  name: SetProperties
  nameWithType: CloudFileExtensions.SetProperties
  fullName: DMLibTest.CloudFileExtensions.SetProperties
- uid: DMLibTest.CloudFileExtensions.UploadFromFile*
  commentId: Overload:DMLibTest.CloudFileExtensions.UploadFromFile
  isExternal: false
  name: UploadFromFile
  nameWithType: CloudFileExtensions.UploadFromFile
  fullName: DMLibTest.CloudFileExtensions.UploadFromFile
- uid: DMLibTest.CloudFileExtensions.UploadFromStream*
  commentId: Overload:DMLibTest.CloudFileExtensions.UploadFromStream
  isExternal: false
  name: UploadFromStream
  nameWithType: CloudFileExtensions.UploadFromStream
  fullName: DMLibTest.CloudFileExtensions.UploadFromStream
- uid: DMLibTest.CloudFileExtensions.WriteRange*
  commentId: Overload:DMLibTest.CloudFileExtensions.WriteRange
  isExternal: false
  name: WriteRange
  nameWithType: CloudFileExtensions.WriteRange
  fullName: DMLibTest.CloudFileExtensions.WriteRange
