### YamlMime:ManagedReference
items:
- uid: DMLibTest.CloudBlobContainerExtensions
  commentId: T:DMLibTest.CloudBlobContainerExtensions
  id: CloudBlobContainerExtensions
  parent: DMLibTest
  children:
  - DMLibTest.CloudBlobContainerExtensions.Create(CloudBlobContainer,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.Delete(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.DeleteIfExists(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.Exists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.GetPermissions(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.ListBlobs(CloudBlobContainer,System.String,System.Boolean,BlobListingDetails,BlobRequestOptions,OperationContext)
  - DMLibTest.CloudBlobContainerExtensions.SetPermissions(CloudBlobContainer,BlobContainerPermissions,AccessCondition,BlobRequestOptions,OperationContext)
  langs:
  - csharp
  - vb
  name: CloudBlobContainerExtensions
  nameWithType: CloudBlobContainerExtensions
  fullName: DMLibTest.CloudBlobContainerExtensions
  type: Class
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CloudBlobContainerExtensions
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 6
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: 'public static class CloudBlobContainerExtensions : object'
    content.vb: >-
      Public Module CloudBlobContainerExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: DMLibTest.CloudBlobContainerExtensions.Create(CloudBlobContainer,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.Create(CloudBlobContainer,BlobRequestOptions,OperationContext)
  id: Create(CloudBlobContainer,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: Create(CloudBlobContainer, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.Create(CloudBlobContainer, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.Create(CloudBlobContainer, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Create
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 8
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Create(this CloudBlobContainer container, BlobRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Create(container As CloudBlobContainer, requestOptions As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: requestOptions
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobContainerExtensions.Create*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  id: CreateIfNotExists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: CreateIfNotExists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.CreateIfNotExists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CreateIfNotExists
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 13
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool CreateIfNotExists(this CloudBlobContainer container, BlobRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateIfNotExists(container As CloudBlobContainer, requestOptions As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: requestOptions
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.Delete(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.Delete(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  id: Delete(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: Delete(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.Delete(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.Delete(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Delete
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 18
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void Delete(this CloudBlobContainer container, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Delete(container As CloudBlobContainer, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobContainerExtensions.Delete*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.DeleteIfExists(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.DeleteIfExists(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  id: DeleteIfExists(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: DeleteIfExists(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.DeleteIfExists(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.DeleteIfExists(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteIfExists
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 23
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool DeleteIfExists(this CloudBlobContainer container, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteIfExists(container As CloudBlobContainer, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudBlobContainerExtensions.DeleteIfExists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.Exists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.Exists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  id: Exists(CloudBlobContainer,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: Exists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.Exists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.Exists(CloudBlobContainer, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Exists
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 28
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static bool Exists(this CloudBlobContainer container, BlobRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(container As CloudBlobContainer, requestOptions As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: requestOptions
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  overload: DMLibTest.CloudBlobContainerExtensions.Exists*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.GetPermissions(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.GetPermissions(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  id: GetPermissions(CloudBlobContainer,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: GetPermissions(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.GetPermissions(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.GetPermissions(CloudBlobContainer, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: GetPermissions
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 33
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static BlobContainerPermissions GetPermissions(this CloudBlobContainer container, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPermissions(container As CloudBlobContainer, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As BlobContainerPermissions
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: BlobContainerPermissions
  overload: DMLibTest.CloudBlobContainerExtensions.GetPermissions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.ListBlobs(CloudBlobContainer,System.String,System.Boolean,BlobListingDetails,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.ListBlobs(CloudBlobContainer,System.String,System.Boolean,BlobListingDetails,BlobRequestOptions,OperationContext)
  id: ListBlobs(CloudBlobContainer,System.String,System.Boolean,BlobListingDetails,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: ListBlobs(CloudBlobContainer, String, Boolean, BlobListingDetails, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.ListBlobs(CloudBlobContainer, String, Boolean, BlobListingDetails, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.ListBlobs(CloudBlobContainer, System.String, System.Boolean, BlobListingDetails, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ListBlobs
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 38
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static IEnumerable<IListBlobItem> ListBlobs(this CloudBlobContainer container, string prefix = null, bool useFlatBlobListing = false, BlobListingDetails blobListingDetails = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function ListBlobs(container As CloudBlobContainer, prefix As String = Nothing, useFlatBlobListing As Boolean = False, blobListingDetails As BlobListingDetails = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing) As IEnumerable(Of IListBlobItem)
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: prefix
      type: System.String
    - id: useFlatBlobListing
      type: System.Boolean
    - id: blobListingDetails
      type: BlobListingDetails
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: IEnumerable{IListBlobItem}
  overload: DMLibTest.CloudBlobContainerExtensions.ListBlobs*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudBlobContainerExtensions.SetPermissions(CloudBlobContainer,BlobContainerPermissions,AccessCondition,BlobRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudBlobContainerExtensions.SetPermissions(CloudBlobContainer,BlobContainerPermissions,AccessCondition,BlobRequestOptions,OperationContext)
  id: SetPermissions(CloudBlobContainer,BlobContainerPermissions,AccessCondition,BlobRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudBlobContainerExtensions
  langs:
  - csharp
  - vb
  name: SetPermissions(CloudBlobContainer, BlobContainerPermissions, AccessCondition, BlobRequestOptions, OperationContext)
  nameWithType: CloudBlobContainerExtensions.SetPermissions(CloudBlobContainer, BlobContainerPermissions, AccessCondition, BlobRequestOptions, OperationContext)
  fullName: DMLibTest.CloudBlobContainerExtensions.SetPermissions(CloudBlobContainer, BlobContainerPermissions, AccessCondition, BlobRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudBlobContainerExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetPermissions
    path: src/storage-data-movement/netcore/DMLibTest/CloudBlobContainerExtensions.cs
    startLine: 44
  assemblies:
  - DMLibTest
  namespace: DMLibTest
  syntax:
    content: public static void SetPermissions(this CloudBlobContainer container, BlobContainerPermissions permissions, AccessCondition accessCondition = null, BlobRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPermissions(container As CloudBlobContainer, permissions As BlobContainerPermissions, accessCondition As AccessCondition = Nothing, options As BlobRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: container
      type: CloudBlobContainer
    - id: permissions
      type: BlobContainerPermissions
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: BlobRequestOptions
    - id: operationContext
      type: OperationContext
  overload: DMLibTest.CloudBlobContainerExtensions.SetPermissions*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DMLibTest
  commentId: N:DMLibTest
  isExternal: false
  name: DMLibTest
  nameWithType: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  commentId: T:System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: DMLibTest.CloudBlobContainerExtensions.Create*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.Create
  isExternal: false
  name: Create
  nameWithType: CloudBlobContainerExtensions.Create
  fullName: DMLibTest.CloudBlobContainerExtensions.Create
- uid: CloudBlobContainer
  isExternal: true
  name: CloudBlobContainer
  nameWithType: CloudBlobContainer
  fullName: CloudBlobContainer
- uid: BlobRequestOptions
  isExternal: true
  name: BlobRequestOptions
  nameWithType: BlobRequestOptions
  fullName: BlobRequestOptions
- uid: OperationContext
  isExternal: true
  name: OperationContext
  nameWithType: OperationContext
  fullName: OperationContext
- uid: DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists
  isExternal: false
  name: CreateIfNotExists
  nameWithType: CloudBlobContainerExtensions.CreateIfNotExists
  fullName: DMLibTest.CloudBlobContainerExtensions.CreateIfNotExists
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: DMLibTest.CloudBlobContainerExtensions.Delete*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.Delete
  isExternal: false
  name: Delete
  nameWithType: CloudBlobContainerExtensions.Delete
  fullName: DMLibTest.CloudBlobContainerExtensions.Delete
- uid: AccessCondition
  isExternal: true
  name: AccessCondition
  nameWithType: AccessCondition
  fullName: AccessCondition
- uid: DMLibTest.CloudBlobContainerExtensions.DeleteIfExists*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.DeleteIfExists
  isExternal: false
  name: DeleteIfExists
  nameWithType: CloudBlobContainerExtensions.DeleteIfExists
  fullName: DMLibTest.CloudBlobContainerExtensions.DeleteIfExists
- uid: DMLibTest.CloudBlobContainerExtensions.Exists*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.Exists
  isExternal: false
  name: Exists
  nameWithType: CloudBlobContainerExtensions.Exists
  fullName: DMLibTest.CloudBlobContainerExtensions.Exists
- uid: DMLibTest.CloudBlobContainerExtensions.GetPermissions*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.GetPermissions
  isExternal: false
  name: GetPermissions
  nameWithType: CloudBlobContainerExtensions.GetPermissions
  fullName: DMLibTest.CloudBlobContainerExtensions.GetPermissions
- uid: BlobContainerPermissions
  isExternal: true
  name: BlobContainerPermissions
  nameWithType: BlobContainerPermissions
  fullName: BlobContainerPermissions
- uid: DMLibTest.CloudBlobContainerExtensions.ListBlobs*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.ListBlobs
  isExternal: false
  name: ListBlobs
  nameWithType: CloudBlobContainerExtensions.ListBlobs
  fullName: DMLibTest.CloudBlobContainerExtensions.ListBlobs
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: BlobListingDetails
  isExternal: true
  name: BlobListingDetails
  nameWithType: BlobListingDetails
  fullName: BlobListingDetails
- uid: IEnumerable{IListBlobItem}
  commentId: '!:IEnumerable{IListBlobItem}'
  definition: IEnumerable`1
  name: IEnumerable<IListBlobItem>
  nameWithType: IEnumerable<IListBlobItem>
  fullName: IEnumerable<IListBlobItem>
  nameWithType.vb: IEnumerable(Of IListBlobItem)
  fullname.vb: IEnumerable(Of IListBlobItem)
  name.vb: IEnumerable(Of IListBlobItem)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IListBlobItem
    name: IListBlobItem
    nameWithType: IListBlobItem
    fullName: IListBlobItem
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IListBlobItem
    name: IListBlobItem
    nameWithType: IListBlobItem
    fullName: IListBlobItem
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: DMLibTest.CloudBlobContainerExtensions.SetPermissions*
  commentId: Overload:DMLibTest.CloudBlobContainerExtensions.SetPermissions
  isExternal: false
  name: SetPermissions
  nameWithType: CloudBlobContainerExtensions.SetPermissions
  fullName: DMLibTest.CloudBlobContainerExtensions.SetPermissions
