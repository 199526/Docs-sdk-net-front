### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  id: TransferConfigurations
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  children:
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
  - Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
  langs:
  - csharp
  - vb
  name: TransferConfigurations
  nameWithType: TransferConfigurations
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  type: Class
  source:
    remote:
      path: lib/TransferConfigurations.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: TransferConfigurations
    path: src/storage-data-movement/lib/TransferConfigurations.cs
    startLine: 16
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nTransferConfigurations class.\n"
  example: []
  syntax:
    content: public class TransferConfigurations
    content.vb: Public Class TransferConfigurations
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor
  commentId: M:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  langs:
  - csharp
  - vb
  name: TransferConfigurations()
  nameWithType: TransferConfigurations.TransferConfigurations()
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.TransferConfigurations()
  type: Constructor
  source:
    remote:
      path: lib/TransferConfigurations.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: .ctor
    path: src/storage-data-movement/lib/TransferConfigurations.cs
    startLine: 43
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nInitializes a new instance of the \n<xref href=\"Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TransferConfigurations()
    content.vb: Public Sub New
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
  id: ParallelOperations
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  langs:
  - csharp
  - vb
  name: ParallelOperations
  nameWithType: TransferConfigurations.ParallelOperations
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
  type: Property
  source:
    remote:
      path: lib/TransferConfigurations.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: ParallelOperations
    path: src/storage-data-movement/lib/TransferConfigurations.cs
    startLine: 59
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets a value indicating how many work items to process \nconcurrently. Downloading or uploading a single blob can consist \nof a large number of work items.\n"
  example: []
  syntax:
    content: public int ParallelOperations { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: How many work items to process concurrently.
    content.vb: Public Property ParallelOperations As Integer
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
  id: BlockSize
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  langs:
  - csharp
  - vb
  name: BlockSize
  nameWithType: TransferConfigurations.BlockSize
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
  type: Property
  source:
    remote:
      path: lib/TransferConfigurations.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: BlockSize
    path: src/storage-data-movement/lib/TransferConfigurations.cs
    startLine: 89
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the BlockSize to use for Windows Azure Storage transfers to block blob(s). \nIt must be between 4MB and 100MB and be multiple of 4MB.\n\nCurrently, the max block count of a block blob is limited to 50000.\nWhen transfering a big file and the BlockSize provided is smaller than the minimum value - (size/50000),\nit'll be reset to a value which is greater than the minimum value and multiple of 4MB for this file.\n"
  example: []
  syntax:
    content: public int BlockSize { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: BlockSize to use for Windows Azure Storage transfers.
    content.vb: Public Property BlockSize As Integer
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
  commentId: P:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
  id: UserAgentPrefix
  parent: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  langs:
  - csharp
  - vb
  name: UserAgentPrefix
  nameWithType: TransferConfigurations.UserAgentPrefix
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
  type: Property
  source:
    remote:
      path: lib/TransferConfigurations.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: UserAgentPrefix
    path: src/storage-data-movement/lib/TransferConfigurations.cs
    startLine: 122
  assemblies:
  - Microsoft.WindowsAzure.Storage.DataMovement
  namespace: Microsoft.WindowsAzure.Storage.DataMovement
  summary: "\nGets or sets the user agent prefix\n"
  example: []
  syntax:
    content: public string UserAgentPrefix { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property UserAgentPrefix As String
  overload: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.DataMovement
  commentId: N:Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.DataMovement
  nameWithType: Microsoft.WindowsAzure.Storage.DataMovement
  fullName: Microsoft.WindowsAzure.Storage.DataMovement
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  commentId: T:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
  parent: Microsoft.WindowsAzure.Storage.DataMovement
  isExternal: false
  name: TransferConfigurations
  nameWithType: TransferConfigurations
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.#ctor
  isExternal: false
  name: TransferConfigurations
  nameWithType: TransferConfigurations.TransferConfigurations
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.TransferConfigurations
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
  isExternal: false
  name: ParallelOperations
  nameWithType: TransferConfigurations.ParallelOperations
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.ParallelOperations
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
  isExternal: false
  name: BlockSize
  nameWithType: TransferConfigurations.BlockSize
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.BlockSize
- uid: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix*
  commentId: Overload:Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
  isExternal: false
  name: UserAgentPrefix
  nameWithType: TransferConfigurations.UserAgentPrefix
  fullName: Microsoft.WindowsAzure.Storage.DataMovement.TransferConfigurations.UserAgentPrefix
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
