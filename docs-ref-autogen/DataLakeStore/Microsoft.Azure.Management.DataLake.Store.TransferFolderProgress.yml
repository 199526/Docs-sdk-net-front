### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  commentId: T:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  id: TransferFolderProgress
  parent: Microsoft.Azure.Management.DataLake.Store
  children:
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress(System.Int32)
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
  langs:
  - csharp
  - vb
  name: TransferFolderProgress
  nameWithType: TransferFolderProgress
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferFolderProgress
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nReports progress on an transfer for a folder.\n"
  example: []
  syntax:
    content: public class TransferFolderProgress
    content.vb: Public Class TransferFolderProgress
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
  id: TotalFileLength
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: TotalFileLength
  nameWithType: TransferFolderProgress.TotalFileLength
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TotalFileLength
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the total length of the file to transfer.\n"
  example: []
  syntax:
    content: public long TotalFileLength { get; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe total length of the file.\n"
    content.vb: Public ReadOnly Property TotalFileLength As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
  id: TotalFileCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: TotalFileCount
  nameWithType: TransferFolderProgress.TotalFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TotalFileCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 98
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the total file count.\n"
  example: []
  syntax:
    content: public int TotalFileCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe total file count.\n"
    content.vb: Public ReadOnly Property TotalFileCount As Integer
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
  id: TransferredByteCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: TransferredByteCount
  nameWithType: TransferFolderProgress.TransferredByteCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferredByteCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 106
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the number of bytes that have been transferred so far.\n"
  example: []
  syntax:
    content: public long TransferredByteCount { get; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe transferred byte count.\n"
    content.vb: Public ReadOnly Property TransferredByteCount As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
  id: TransferredFileCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: TransferredFileCount
  nameWithType: TransferFolderProgress.TransferredFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferredFileCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 114
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the transferred file count.\n"
  example: []
  syntax:
    content: public long TransferredFileCount { get; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe transferred file count.\n"
    content.vb: Public ReadOnly Property TransferredFileCount As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
  id: FailedFileCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: FailedFileCount
  nameWithType: TransferFolderProgress.FailedFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FailedFileCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the count of files that failed.\n"
  example: []
  syntax:
    content: public long FailedFileCount { get; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe failed file count.\n"
    content.vb: Public ReadOnly Property FailedFileCount As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress(System.Int32)
  commentId: M:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress(System.Int32)
  id: GetSegmentProgress(System.Int32)
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress
  langs:
  - csharp
  - vb
  name: GetSegmentProgress(Int32)
  nameWithType: TransferFolderProgress.GetSegmentProgress(Int32)
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress(System.Int32)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetSegmentProgress
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderProgress.cs
    startLine: 129
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the transfer progress for a particular file.\n"
  example: []
  syntax:
    content: public TransferProgress GetSegmentProgress(int segmentNumber)
    parameters:
    - id: segmentNumber
      type: System.Int32
      description: The sequence number of the file to retrieve information for
    return:
      type: Microsoft.Azure.Management.DataLake.Store.TransferProgress
      description: ''
    content.vb: Public Function GetSegmentProgress(segmentNumber As Integer) As TransferProgress
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.DataLake.Store
  commentId: N:Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.Store
  nameWithType: Microsoft.Azure.Management.DataLake.Store
  fullName: Microsoft.Azure.Management.DataLake.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
  isExternal: false
  name: TotalFileLength
  nameWithType: TransferFolderProgress.TotalFileLength
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileLength
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
  isExternal: false
  name: TotalFileCount
  nameWithType: TransferFolderProgress.TotalFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TotalFileCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
  isExternal: false
  name: TransferredByteCount
  nameWithType: TransferFolderProgress.TransferredByteCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredByteCount
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
  isExternal: false
  name: TransferredFileCount
  nameWithType: TransferFolderProgress.TransferredFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.TransferredFileCount
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
  isExternal: false
  name: FailedFileCount
  nameWithType: TransferFolderProgress.FailedFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.FailedFileCount
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress
  isExternal: false
  name: GetSegmentProgress
  nameWithType: TransferFolderProgress.GetSegmentProgress
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderProgress.GetSegmentProgress
- uid: Microsoft.Azure.Management.DataLake.Store.TransferProgress
  commentId: T:Microsoft.Azure.Management.DataLake.Store.TransferProgress
  parent: Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: TransferProgress
  nameWithType: TransferProgress
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferProgress
