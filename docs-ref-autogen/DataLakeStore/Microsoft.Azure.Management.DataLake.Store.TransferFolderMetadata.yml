### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  commentId: T:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  id: TransferFolderMetadata
  parent: Microsoft.Azure.Management.DataLake.Store
  children:
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.TransferParameters,Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter)
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
  - Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
  langs:
  - csharp
  - vb
  name: TransferFolderMetadata
  nameWithType: TransferFolderMetadata
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferFolderMetadata
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nRepresents general metadata pertaining to a transfer.\n"
  example: []
  syntax:
    content: public class TransferFolderMetadata
    content.vb: Public Class TransferFolderMetadata
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.TransferParameters,Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter)
  commentId: M:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.TransferParameters,Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter)
  id: '#ctor(System.String,Microsoft.Azure.Management.DataLake.Store.TransferParameters,Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter)'
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: TransferFolderMetadata(String, TransferParameters, IFrontEndAdapter)
  nameWithType: TransferFolderMetadata.TransferFolderMetadata(String, TransferParameters, IFrontEndAdapter)
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferFolderMetadata(System.String, Microsoft.Azure.Management.DataLake.Store.TransferParameters, Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nConstructs a new TransferFolderMetadata object from the given parameters.\n"
  example: []
  syntax:
    content: public TransferFolderMetadata(string metadataFilePath, TransferParameters transferParameters, IFrontEndAdapter frontend)
    parameters:
    - id: metadataFilePath
      type: System.String
      description: The file path to assign to this metadata file (for saving purposes).
    - id: transferParameters
      type: Microsoft.Azure.Management.DataLake.Store.TransferParameters
      description: The parameters to use for constructing this metadata.
    - id: frontend
      type: Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter
      description: The frontend to use when generating per file metadata.
    content.vb: Public Sub New(metadataFilePath As String, transferParameters As TransferParameters, frontend As IFrontEndAdapter)
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
  id: TransferId
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: TransferId
  nameWithType: TransferFolderMetadata.TransferId
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferId
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 155
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets or sets a value indicating the unique identifier associated with this transfer.\n"
  example: []
  syntax:
    content: public string TransferId { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nThe transfer identifier.\n"
    content.vb: Public Property TransferId As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
  id: InputFolderPath
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: InputFolderPath
  nameWithType: TransferFolderMetadata.InputFolderPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: InputFolderPath
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 164
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets or sets a value indicating the full path to the file to be transferred.\n"
  example: []
  syntax:
    content: public string InputFolderPath { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nThe input file path.\n"
    content.vb: Public Property InputFolderPath As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
  id: TargetStreamFolderPath
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: TargetStreamFolderPath
  nameWithType: TransferFolderMetadata.TargetStreamFolderPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TargetStreamFolderPath
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 173
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets or sets a value indicating the full stream folder path that will be used as the root folder for all files and folders being transferred.\n"
  example: []
  syntax:
    content: public string TargetStreamFolderPath { get; set; }
    parameters: []
    return:
      type: System.String
      description: "\nThe target stream path.\n"
    content.vb: Public Property TargetStreamFolderPath As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
  id: FileCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: FileCount
  nameWithType: TransferFolderMetadata.FileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FileCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets or sets a value indicating the number of files in this transfer.\n"
  example: []
  syntax:
    content: public int FileCount { get; set; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe segment count.\n"
    content.vb: Public Property FileCount As Integer
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
  id: TotalFileBytes
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: TotalFileBytes
  nameWithType: TransferFolderMetadata.TotalFileBytes
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TotalFileBytes
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 191
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets or sets the total bytes for all the files.\n"
  example: []
  syntax:
    content: public long TotalFileBytes { get; set; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe total bytes for all the files.\n"
    content.vb: Public Property TotalFileBytes As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
  id: IsRecursive
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: IsRecursive
  nameWithType: TransferFolderMetadata.IsRecursive
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsRecursive
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 200
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether this is recurisve directory transfer or a flat directory transfer\n"
  example: []
  syntax:
    content: public bool IsRecursive { get; set; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is recursive; otherwise, <code>false</code>.\n"
    content.vb: Public Property IsRecursive As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
  id: Files
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: Files
  nameWithType: TransferFolderMetadata.Files
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Files
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 209
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a pointer to an array of file transfer metadata. This is used for each file that is being transferred.\n"
  example: []
  syntax:
    content: public TransferMetadata[] Files { get; set; }
    parameters: []
    return:
      type: Microsoft.Azure.Management.DataLake.Store.TransferMetadata[]
      description: "\nThe segments.\n"
    content.vb: Public Property Files As TransferMetadata()
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save
  commentId: M:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save
  id: Save
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: Save()
  nameWithType: TransferFolderMetadata.Save()
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Save
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 300
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nSaves the given metadata to its canonical location. This method is thread-safe.\n"
  example: []
  syntax:
    content: public void Save()
    content.vb: Public Sub Save
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile
  commentId: M:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile
  id: DeleteFile
  parent: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata
  langs:
  - csharp
  - vb
  name: DeleteFile()
  nameWithType: TransferFolderMetadata.DeleteFile()
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: DeleteFile
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferFolderMetadata.cs
    startLine: 328
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nDeletes the metadata file from disk.\n"
  example: []
  syntax:
    content: public void DeleteFile()
    content.vb: Public Sub DeleteFile
  overload: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile*
  exceptions:
  - type: System.InvalidOperationException
    commentId: T:System.InvalidOperationException
    description: Null or empty MetadataFilePath. Cannot delete metadata until this property is set.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Management.DataLake.Store
  commentId: N:Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.Store
  nameWithType: Microsoft.Azure.Management.DataLake.Store
  fullName: Microsoft.Azure.Management.DataLake.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.#ctor
  isExternal: false
  name: TransferFolderMetadata
  nameWithType: TransferFolderMetadata.TransferFolderMetadata
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferFolderMetadata
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  commentId: T:Microsoft.Azure.Management.DataLake.Store.TransferParameters
  parent: Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: TransferParameters
  nameWithType: TransferParameters
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters
- uid: Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter
  commentId: T:Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter
  parent: Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: IFrontEndAdapter
  nameWithType: IFrontEndAdapter
  fullName: Microsoft.Azure.Management.DataLake.Store.IFrontEndAdapter
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
  isExternal: false
  name: TransferId
  nameWithType: TransferFolderMetadata.TransferId
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TransferId
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
  isExternal: false
  name: InputFolderPath
  nameWithType: TransferFolderMetadata.InputFolderPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.InputFolderPath
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
  isExternal: false
  name: TargetStreamFolderPath
  nameWithType: TransferFolderMetadata.TargetStreamFolderPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TargetStreamFolderPath
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
  isExternal: false
  name: FileCount
  nameWithType: TransferFolderMetadata.FileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.FileCount
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
  isExternal: false
  name: TotalFileBytes
  nameWithType: TransferFolderMetadata.TotalFileBytes
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.TotalFileBytes
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
  isExternal: false
  name: IsRecursive
  nameWithType: TransferFolderMetadata.IsRecursive
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.IsRecursive
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
  isExternal: false
  name: Files
  nameWithType: TransferFolderMetadata.Files
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Files
- uid: Microsoft.Azure.Management.DataLake.Store.TransferMetadata[]
  name: TransferMetadata[]
  nameWithType: TransferMetadata[]
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferMetadata[]
  nameWithType.vb: TransferMetadata()
  fullName.vb: Microsoft.Azure.Management.DataLake.Store.TransferMetadata()
  name.vb: TransferMetadata()
  spec.csharp:
  - uid: Microsoft.Azure.Management.DataLake.Store.TransferMetadata
    name: TransferMetadata
    nameWithType: TransferMetadata
    fullName: Microsoft.Azure.Management.DataLake.Store.TransferMetadata
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.Azure.Management.DataLake.Store.TransferMetadata
    name: TransferMetadata
    nameWithType: TransferMetadata
    fullName: Microsoft.Azure.Management.DataLake.Store.TransferMetadata
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save
  isExternal: false
  name: Save
  nameWithType: TransferFolderMetadata.Save
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.Save
- uid: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile
  isExternal: false
  name: DeleteFile
  nameWithType: TransferFolderMetadata.DeleteFile
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferFolderMetadata.DeleteFile
- uid: System.InvalidOperationException
  commentId: T:System.InvalidOperationException
