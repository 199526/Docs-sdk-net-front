### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  commentId: T:Microsoft.Azure.Management.DataLake.Store.TransferParameters
  id: TransferParameters
  parent: Microsoft.Azure.Management.DataLake.Store
  children:
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int64,System.String)
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
  - Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
  langs:
  - csharp
  - vb
  name: TransferParameters
  nameWithType: TransferParameters
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TransferParameters
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 11
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nRepresents parameters for the DataLakeStoreTransferClient.\n"
  example: []
  syntax:
    content: public class TransferParameters
    content.vb: Public Class TransferParameters
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int64,System.String)
  commentId: M:Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int64,System.String)
  id: '#ctor(System.String,System.String,System.String,System.Int32,System.Int32,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Boolean,System.Int64,System.String)'
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: TransferParameters(String, String, String, Int32, Int32, Boolean, Boolean, Boolean, Boolean, Boolean, Int64, String)
  nameWithType: TransferParameters.TransferParameters(String, String, String, Int32, Int32, Boolean, Boolean, Boolean, Boolean, Boolean, Int64, String)
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TransferParameters(System.String, System.String, System.String, System.Int32, System.Int32, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Boolean, System.Int64, System.String)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nCreates a new set of parameters for the DataLakeStoreTransferClient.\n"
  example: []
  syntax:
    content: public TransferParameters(string inputFilePath, string targetStreamPath, string accountName, int perFileThreadCount = -1, int concurrentFileCount = -1, bool isOverwrite = false, bool isResume = false, bool isBinary = true, bool isRecursive = false, bool isDownload = false, long maxSegmentLength = 268435456L, string localMetadataLocation = null)
    parameters:
    - id: inputFilePath
      type: System.String
      description: The full path to the file or folder to be transferred.
    - id: targetStreamPath
      type: System.String
      description: The full stream path where the file or folder will be transferred to.
    - id: accountName
      type: System.String
      description: Name of the account to transfer to.
    - id: perFileThreadCount
      type: System.Int32
      description: The per file thread count, indicating the number of file segments to transfer in parallel. This number is capped at FILE_SIZE/maxSegmentLength for optimal performance.
    - id: concurrentFileCount
      type: System.Int32
      description: The parallel file count, indicating the number of files to transfer in parallel during a folder transfer. This parameter is ignored for single file transfers. Default is 5 for folder transfers
    - id: isOverwrite
      type: System.Boolean
      description: (Optional) Whether to overwrite the target stream or not.
    - id: isResume
      type: System.Boolean
      description: (Optional) Indicates whether to resume a previously interrupted transfer.
    - id: isBinary
      type: System.Boolean
      description: (Optional) Indicates whether to treat the input file as a binary file (true), or whether to align transfer blocks to record boundaries (false).
    - id: isRecursive
      type: System.Boolean
      description: (Optional) Indicates whether to transfer the source folder recursively or not. If true, will transfer the source directory and all sub directories, preserving directory structure.
    - id: isDownload
      type: System.Boolean
      description: (Optional) if set to <code>true</code> [is download] instead of an transfer scenario. Default is false.
    - id: maxSegmentLength
      type: System.Int64
      description: Maximum length of each segment. The default is 256mb, which gives optimal performance. Modify at your own risk.
    - id: localMetadataLocation
      type: System.String
      description: '(Optional) Indicates the directory path where to store the local transfer metadata file while the transfer is in progress. This location must be writeable from this application. Default location: SpecialFolder.LocalApplicationData.'
    content.vb: Public Sub New(inputFilePath As String, targetStreamPath As String, accountName As String, perFileThreadCount As Integer = -1, concurrentFileCount As Integer = -1, isOverwrite As Boolean = False, isResume As Boolean = False, isBinary As Boolean = True, isRecursive As Boolean = False, isDownload As Boolean = False, maxSegmentLength As Long = 268435456L, localMetadataLocation As String = Nothing)
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
  id: InputFilePath
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: InputFilePath
  nameWithType: TransferParameters.InputFilePath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: InputFilePath
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the full path to the file or folder to be transferred.\n"
  example: []
  syntax:
    content: public string InputFilePath { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe input file path.\n"
    content.vb: Public ReadOnly Property InputFilePath As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
  id: TargetStreamPath
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: TargetStreamPath
  nameWithType: TransferParameters.TargetStreamPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TargetStreamPath
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 100
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the full stream path where the file will be transferred to.\n"
  example: []
  syntax:
    content: public string TargetStreamPath { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe target stream path.\n"
    content.vb: Public ReadOnly Property TargetStreamPath As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
  id: AccountName
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: AccountName
  nameWithType: TransferParameters.AccountName
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: AccountName
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 108
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the name of the account to transfer to or download from.\n"
  example: []
  syntax:
    content: public string AccountName { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe name of the account.\n"
    content.vb: Public ReadOnly Property AccountName As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
  id: PerFileThreadCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: PerFileThreadCount
  nameWithType: TransferParameters.PerFileThreadCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PerFileThreadCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 116
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the maximum number of parallel threads to use for a single file transfer or download.\n"
  example: []
  syntax:
    content: public int PerFileThreadCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe file thread count.\n"
    content.vb: Public ReadOnly Property PerFileThreadCount As Integer
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
  id: ConcurrentFileCount
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: ConcurrentFileCount
  nameWithType: TransferParameters.ConcurrentFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ConcurrentFileCount
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 125
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the parallel file count, which indicates how many files in a folder will be transferred or downloaded in parallel\n"
  example: []
  syntax:
    content: public int ConcurrentFileCount { get; }
    parameters: []
    return:
      type: System.Int32
      description: "\nThe number of files to transfer or download at once.\n"
    content.vb: Public ReadOnly Property ConcurrentFileCount As Integer
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
  id: IsOverwrite
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: IsOverwrite
  nameWithType: TransferParameters.IsOverwrite
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsOverwrite
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 133
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether to overwrite the target stream if it already exists.\n"
  example: []
  syntax:
    content: public bool IsOverwrite { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is overwrite; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsOverwrite As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
  id: IsResume
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: IsResume
  nameWithType: TransferParameters.IsResume
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsResume
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 141
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether to resume a previously interrupted transfer.\n"
  example: []
  syntax:
    content: public bool IsResume { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is resume; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsResume As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
  id: IsBinary
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: IsBinary
  nameWithType: TransferParameters.IsBinary
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsBinary
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 149
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether the input file should be treated as a binary (true) or a delimited input (false).\n"
  example: []
  syntax:
    content: public bool IsBinary { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is binary; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsBinary As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
  id: IsRecursive
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: IsRecursive
  nameWithType: TransferParameters.IsRecursive
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsRecursive
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether the folder transfer should recursively transfer the source folder. This is only valid for folder transfers and will be ignored for file transfers.\n"
  example: []
  syntax:
    content: public bool IsRecursive { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is recursive; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsRecursive As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
  id: IsDownload
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: IsDownload
  nameWithType: TransferParameters.IsDownload
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IsDownload
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 166
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating whether this instance is downloading to the local machine instead of transfering.\n"
  example: []
  syntax:
    content: public bool IsDownload { get; }
    parameters: []
    return:
      type: System.Boolean
      description: "\n<code>true</code> if this instance is download; otherwise, <code>false</code>.\n"
    content.vb: Public ReadOnly Property IsDownload As Boolean
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
  id: MaxSegementLength
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: MaxSegementLength
  nameWithType: TransferParameters.MaxSegementLength
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: MaxSegementLength
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 174
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets the maximum length of each segement.\n"
  example: []
  syntax:
    content: public long MaxSegementLength { get; }
    parameters: []
    return:
      type: System.Int64
      description: "\nThe maximum length of each segement.\n"
    content.vb: Public ReadOnly Property MaxSegementLength As Long
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
  id: LocalMetadataLocation
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: LocalMetadataLocation
  nameWithType: TransferParameters.LocalMetadataLocation
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LocalMetadataLocation
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the directory path where to store the metadata for the transfer.\n"
  example: []
  syntax:
    content: public string LocalMetadataLocation { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe local metadata location.\n"
    content.vb: Public ReadOnly Property LocalMetadataLocation As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
  id: FileEncoding
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: FileEncoding
  nameWithType: TransferParameters.FileEncoding
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FileEncoding
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 190
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the encoding of the file being transferred.\n"
  example: []
  syntax:
    content: public Encoding FileEncoding { get; }
    parameters: []
    return:
      type: System.Text.Encoding
      description: "\nThe file encoding.\n"
    content.vb: Public ReadOnly Property FileEncoding As Encoding
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
  commentId: P:Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
  id: Delimiter
  parent: Microsoft.Azure.Management.DataLake.Store.TransferParameters
  langs:
  - csharp
  - vb
  name: Delimiter
  nameWithType: TransferParameters.Delimiter
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Delimiter
    path: src/azure-sdk-for-net/src/ResourceManagement/DataLake.Store/Microsoft.Azure.Management.DataLake.Store/Customizations/DataTransfer/Common/TransferParameters.cs
    startLine: 198
  assemblies:
  - Microsoft.Azure.Management.DataLake.Store
  namespace: Microsoft.Azure.Management.DataLake.Store
  summary: "\nGets a value indicating the record boundary delimiter for the file, if any.\n"
  example: []
  syntax:
    content: public string Delimiter { get; }
    parameters: []
    return:
      type: System.String
      description: "\nThe record boundary delimiter\n"
    content.vb: Public ReadOnly Property Delimiter As String
  overload: Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
references:
- uid: Microsoft.Azure.Management.DataLake.Store
  commentId: N:Microsoft.Azure.Management.DataLake.Store
  isExternal: false
  name: Microsoft.Azure.Management.DataLake.Store
  nameWithType: Microsoft.Azure.Management.DataLake.Store
  fullName: Microsoft.Azure.Management.DataLake.Store
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.#ctor
  isExternal: false
  name: TransferParameters
  nameWithType: TransferParameters.TransferParameters
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TransferParameters
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.Int64
  commentId: T:System.Int64
  parent: System
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
  isExternal: false
  name: InputFilePath
  nameWithType: TransferParameters.InputFilePath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.InputFilePath
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
  isExternal: false
  name: TargetStreamPath
  nameWithType: TransferParameters.TargetStreamPath
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.TargetStreamPath
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
  isExternal: false
  name: AccountName
  nameWithType: TransferParameters.AccountName
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.AccountName
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
  isExternal: false
  name: PerFileThreadCount
  nameWithType: TransferParameters.PerFileThreadCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.PerFileThreadCount
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
  isExternal: false
  name: ConcurrentFileCount
  nameWithType: TransferParameters.ConcurrentFileCount
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.ConcurrentFileCount
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
  isExternal: false
  name: IsOverwrite
  nameWithType: TransferParameters.IsOverwrite
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsOverwrite
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
  isExternal: false
  name: IsResume
  nameWithType: TransferParameters.IsResume
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsResume
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
  isExternal: false
  name: IsBinary
  nameWithType: TransferParameters.IsBinary
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsBinary
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
  isExternal: false
  name: IsRecursive
  nameWithType: TransferParameters.IsRecursive
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsRecursive
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
  isExternal: false
  name: IsDownload
  nameWithType: TransferParameters.IsDownload
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.IsDownload
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
  isExternal: false
  name: MaxSegementLength
  nameWithType: TransferParameters.MaxSegementLength
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.MaxSegementLength
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
  isExternal: false
  name: LocalMetadataLocation
  nameWithType: TransferParameters.LocalMetadataLocation
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.LocalMetadataLocation
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
  isExternal: false
  name: FileEncoding
  nameWithType: TransferParameters.FileEncoding
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.FileEncoding
- uid: System.Text.Encoding
  commentId: T:System.Text.Encoding
  parent: System.Text
  isExternal: true
  name: Encoding
  nameWithType: Encoding
  fullName: System.Text.Encoding
- uid: System.Text
  commentId: N:System.Text
  isExternal: false
  name: System.Text
  nameWithType: System.Text
  fullName: System.Text
- uid: Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter*
  commentId: Overload:Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
  isExternal: false
  name: Delimiter
  nameWithType: TransferParameters.Delimiter
  fullName: Microsoft.Azure.Management.DataLake.Store.TransferParameters.Delimiter
