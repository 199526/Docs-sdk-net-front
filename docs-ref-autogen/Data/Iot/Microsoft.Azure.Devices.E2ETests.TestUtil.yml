### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil
  commentId: T:Microsoft.Azure.Devices.E2ETests.TestUtil
  id: TestUtil
  parent: Microsoft.Azure.Devices.E2ETests
  children:
  - Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice(System.String,System.String,Microsoft.Azure.Devices.RegistryManager)
  - Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString(Microsoft.Azure.Devices.Device,System.String)
  - Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName(System.String)
  - Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment(System.String)
  - Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice(System.String,Microsoft.Azure.Devices.RegistryManager)
  - Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment(Microsoft.Azure.Devices.RegistryManager)
  langs:
  - csharp
  - vb
  name: TestUtil
  nameWithType: TestUtil
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil
  type: Class
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: TestUtil
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public class TestUtil
    content.vb: Public Class TestUtil
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName(System.String)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName(System.String)
  id: GetHostName(System.String)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: GetHostName(String)
  nameWithType: TestUtil.GetHostName(String)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName(System.String)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetHostName
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static string GetHostName(string connectionString)
    parameters:
    - id: connectionString
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetHostName(connectionString As String) As String
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString(Microsoft.Azure.Devices.Device,System.String)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString(Microsoft.Azure.Devices.Device,System.String)
  id: GetDeviceConnectionString(Microsoft.Azure.Devices.Device,System.String)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: GetDeviceConnectionString(Device, String)
  nameWithType: TestUtil.GetDeviceConnectionString(Device, String)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString(Microsoft.Azure.Devices.Device, System.String)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetDeviceConnectionString
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static string GetDeviceConnectionString(Device device, string hostName)
    parameters:
    - id: device
      type: Microsoft.Azure.Devices.Device
    - id: hostName
      type: System.String
    return:
      type: System.String
    content.vb: Public Shared Function GetDeviceConnectionString(device As Device, hostName As String) As String
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment(System.String)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment(System.String)
  id: InitializeEnvironment(System.String)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: InitializeEnvironment(String)
  nameWithType: TestUtil.InitializeEnvironment(String)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment(System.String)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: InitializeEnvironment
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 29
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static Tuple<string, RegistryManager> InitializeEnvironment(string devicePrefix)
    parameters:
    - id: devicePrefix
      type: System.String
    return:
      type: System.Tuple{System.String,Microsoft.Azure.Devices.RegistryManager}
    content.vb: Public Shared Function InitializeEnvironment(devicePrefix As String) As Tuple(Of String, RegistryManager)
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment(Microsoft.Azure.Devices.RegistryManager)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment(Microsoft.Azure.Devices.RegistryManager)
  id: UnInitializeEnvironment(Microsoft.Azure.Devices.RegistryManager)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: UnInitializeEnvironment(RegistryManager)
  nameWithType: TestUtil.UnInitializeEnvironment(RegistryManager)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment(Microsoft.Azure.Devices.RegistryManager)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: UnInitializeEnvironment
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static void UnInitializeEnvironment(RegistryManager rm)
    parameters:
    - id: rm
      type: Microsoft.Azure.Devices.RegistryManager
    content.vb: Public Shared Sub UnInitializeEnvironment(rm As RegistryManager)
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice(System.String,System.String,Microsoft.Azure.Devices.RegistryManager)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice(System.String,System.String,Microsoft.Azure.Devices.RegistryManager)
  id: CreateDevice(System.String,System.String,Microsoft.Azure.Devices.RegistryManager)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: CreateDevice(String, String, RegistryManager)
  nameWithType: TestUtil.CreateDevice(String, String, RegistryManager)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice(System.String, System.String, Microsoft.Azure.Devices.RegistryManager)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: CreateDevice
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 54
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static Tuple<string, string> CreateDevice(string devicePrefix, string hostName, RegistryManager registryManager)
    parameters:
    - id: devicePrefix
      type: System.String
    - id: hostName
      type: System.String
    - id: registryManager
      type: Microsoft.Azure.Devices.RegistryManager
    return:
      type: System.Tuple{System.String,System.String}
    content.vb: Public Shared Function CreateDevice(devicePrefix As String, hostName As String, registryManager As RegistryManager) As Tuple(Of String, String)
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice(System.String,Microsoft.Azure.Devices.RegistryManager)
  commentId: M:Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice(System.String,Microsoft.Azure.Devices.RegistryManager)
  id: RemoveDevice(System.String,Microsoft.Azure.Devices.RegistryManager)
  parent: Microsoft.Azure.Devices.E2ETests.TestUtil
  langs:
  - csharp
  - vb
  name: RemoveDevice(String, RegistryManager)
  nameWithType: TestUtil.RemoveDevice(String, RegistryManager)
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice(System.String, Microsoft.Azure.Devices.RegistryManager)
  type: Method
  source:
    remote:
      path: e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: RemoveDevice
    path: src/azure-iot-sdks/e2e/Microsoft.Azure.Devices.E2ETests/TestUtil.cs
    startLine: 72
  assemblies:
  - Microsoft.Azure.Devices.E2ETests
  namespace: Microsoft.Azure.Devices.E2ETests
  syntax:
    content: public static void RemoveDevice(string deviceName, RegistryManager registryManager)
    parameters:
    - id: deviceName
      type: System.String
    - id: registryManager
      type: Microsoft.Azure.Devices.RegistryManager
    content.vb: Public Shared Sub RemoveDevice(deviceName As String, registryManager As RegistryManager)
  overload: Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Azure.Devices.E2ETests
  commentId: N:Microsoft.Azure.Devices.E2ETests
  isExternal: false
  name: Microsoft.Azure.Devices.E2ETests
  nameWithType: Microsoft.Azure.Devices.E2ETests
  fullName: Microsoft.Azure.Devices.E2ETests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName
  isExternal: false
  name: GetHostName
  nameWithType: TestUtil.GetHostName
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.GetHostName
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString
  isExternal: false
  name: GetDeviceConnectionString
  nameWithType: TestUtil.GetDeviceConnectionString
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.GetDeviceConnectionString
- uid: Microsoft.Azure.Devices.Device
  commentId: T:Microsoft.Azure.Devices.Device
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: Device
  nameWithType: Device
  fullName: Microsoft.Azure.Devices.Device
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment
  isExternal: false
  name: InitializeEnvironment
  nameWithType: TestUtil.InitializeEnvironment
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.InitializeEnvironment
- uid: System.Tuple{System.String,Microsoft.Azure.Devices.RegistryManager}
  commentId: T:System.Tuple{System.String,Microsoft.Azure.Devices.RegistryManager}
  parent: System
  definition: System.Tuple`2
  name: Tuple<String, RegistryManager>
  nameWithType: Tuple<String, RegistryManager>
  fullName: System.Tuple<System.String, Microsoft.Azure.Devices.RegistryManager>
  nameWithType.vb: Tuple(Of String, RegistryManager)
  fullName.vb: System.Tuple(Of System.String, Microsoft.Azure.Devices.RegistryManager)
  name.vb: Tuple(Of String, RegistryManager)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Devices.RegistryManager
    name: RegistryManager
    nameWithType: RegistryManager
    fullName: Microsoft.Azure.Devices.RegistryManager
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Devices.RegistryManager
    name: RegistryManager
    nameWithType: RegistryManager
    fullName: Microsoft.Azure.Devices.RegistryManager
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Tuple`2
  commentId: T:System.Tuple`2
  isExternal: true
  name: Tuple<T1, T2>
  nameWithType: Tuple<T1, T2>
  fullName: System.Tuple<T1, T2>
  nameWithType.vb: Tuple(Of T1, T2)
  fullName.vb: System.Tuple(Of T1, T2)
  name.vb: Tuple(Of T1, T2)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T1
    nameWithType: T1
    fullName: T1
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - name: T2
    nameWithType: T2
    fullName: T2
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment
  isExternal: false
  name: UnInitializeEnvironment
  nameWithType: TestUtil.UnInitializeEnvironment
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.UnInitializeEnvironment
- uid: Microsoft.Azure.Devices.RegistryManager
  commentId: T:Microsoft.Azure.Devices.RegistryManager
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: RegistryManager
  nameWithType: RegistryManager
  fullName: Microsoft.Azure.Devices.RegistryManager
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice
  isExternal: false
  name: CreateDevice
  nameWithType: TestUtil.CreateDevice
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.CreateDevice
- uid: System.Tuple{System.String,System.String}
  commentId: T:System.Tuple{System.String,System.String}
  parent: System
  definition: System.Tuple`2
  name: Tuple<String, String>
  nameWithType: Tuple<String, String>
  fullName: System.Tuple<System.String, System.String>
  nameWithType.vb: Tuple(Of String, String)
  fullName.vb: System.Tuple(Of System.String, System.String)
  name.vb: Tuple(Of String, String)
  spec.csharp:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Tuple`2
    name: Tuple
    nameWithType: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice*
  commentId: Overload:Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice
  isExternal: false
  name: RemoveDevice
  nameWithType: TestUtil.RemoveDevice
  fullName: Microsoft.Azure.Devices.E2ETests.TestUtil.RemoveDevice
