### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Devices.IQuery
  commentId: T:Microsoft.Azure.Devices.IQuery
  id: IQuery
  parent: Microsoft.Azure.Devices
  children:
  - Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync(Microsoft.Azure.Devices.QueryOptions)
  - Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync(Microsoft.Azure.Devices.QueryOptions)
  - Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync(Microsoft.Azure.Devices.QueryOptions)
  - Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  - Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync(Microsoft.Azure.Devices.QueryOptions)
  - Microsoft.Azure.Devices.IQuery.HasMoreResults
  langs:
  - csharp
  - vb
  name: IQuery
  nameWithType: IQuery
  fullName: Microsoft.Azure.Devices.IQuery
  type: Interface
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: IQuery
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  syntax:
    content: public interface IQuery
    content.vb: Public Interface IQuery
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.Devices.IQuery.HasMoreResults
  commentId: P:Microsoft.Azure.Devices.IQuery.HasMoreResults
  id: HasMoreResults
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: HasMoreResults
  nameWithType: IQuery.HasMoreResults
  fullName: Microsoft.Azure.Devices.IQuery.HasMoreResults
  type: Property
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: HasMoreResults
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nIndicate if more results can be fetched\n"
  example: []
  syntax:
    content: bool HasMoreResults { get; }
    parameters: []
    return:
      type: System.Boolean
    content.vb: ReadOnly Property HasMoreResults As Boolean
  overload: Microsoft.Azure.Devices.IQuery.HasMoreResults*
  modifiers.csharp:
  - get
  modifiers.vb:
  - ReadOnly
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  id: GetNextAsTwinAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsTwinAsync()
  nameWithType: IQuery.GetNextAsTwinAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsTwinAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.Shared.Twin\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<IEnumerable<Twin>> GetNextAsTwinAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}
      description: List of <xref href="Microsoft.Azure.Devices.Shared.Twin" data-throw-if-not-resolved="false"></xref> objects
    content.vb: Function GetNextAsTwinAsync As Task(Of IEnumerable(Of Twin))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync(Microsoft.Azure.Devices.QueryOptions)
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync(Microsoft.Azure.Devices.QueryOptions)
  id: GetNextAsTwinAsync(Microsoft.Azure.Devices.QueryOptions)
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsTwinAsync(QueryOptions)
  nameWithType: IQuery.GetNextAsTwinAsync(QueryOptions)
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync(Microsoft.Azure.Devices.QueryOptions)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsTwinAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.Shared.Twin\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<QueryResponse<Twin>> GetNextAsTwinAsync(QueryOptions options)
    parameters:
    - id: options
      type: Microsoft.Azure.Devices.QueryOptions
      description: Query options
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.Shared.Twin}}
      description: An enumerable <xref href="Microsoft.Azure.Devices.QueryResponse%601" data-throw-if-not-resolved="false"></xref> object
    content.vb: Function GetNextAsTwinAsync(options As QueryOptions) As Task(Of QueryResponse(Of Twin))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  id: GetNextAsDeviceJobAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsDeviceJobAsync()
  nameWithType: IQuery.GetNextAsDeviceJobAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsDeviceJobAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.DeviceJob\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<IEnumerable<DeviceJob>> GetNextAsDeviceJobAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.DeviceJob}}
      description: List of <xref href="Microsoft.Azure.Devices.DeviceJob" data-throw-if-not-resolved="false"></xref> objects
    content.vb: Function GetNextAsDeviceJobAsync As Task(Of IEnumerable(Of DeviceJob))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync(Microsoft.Azure.Devices.QueryOptions)
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync(Microsoft.Azure.Devices.QueryOptions)
  id: GetNextAsDeviceJobAsync(Microsoft.Azure.Devices.QueryOptions)
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsDeviceJobAsync(QueryOptions)
  nameWithType: IQuery.GetNextAsDeviceJobAsync(QueryOptions)
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync(Microsoft.Azure.Devices.QueryOptions)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsDeviceJobAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.DeviceJob\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<QueryResponse<DeviceJob>> GetNextAsDeviceJobAsync(QueryOptions options)
    parameters:
    - id: options
      type: Microsoft.Azure.Devices.QueryOptions
      description: Query options
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.DeviceJob}}
      description: An enumerable <xref href="Microsoft.Azure.Devices.QueryResponse%601" data-throw-if-not-resolved="false"></xref> object
    content.vb: Function GetNextAsDeviceJobAsync(options As QueryOptions) As Task(Of QueryResponse(Of DeviceJob))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  id: GetNextAsJobResponseAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJobResponseAsync()
  nameWithType: IQuery.GetNextAsJobResponseAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJobResponseAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 56
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.JobResponse\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<IEnumerable<JobResponse>> GetNextAsJobResponseAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.JobResponse}}
      description: List of <xref href="Microsoft.Azure.Devices.JobResponse" data-throw-if-not-resolved="false"></xref> objects
    content.vb: Function GetNextAsJobResponseAsync As Task(Of IEnumerable(Of JobResponse))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync(Microsoft.Azure.Devices.QueryOptions)
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync(Microsoft.Azure.Devices.QueryOptions)
  id: GetNextAsJobResponseAsync(Microsoft.Azure.Devices.QueryOptions)
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJobResponseAsync(QueryOptions)
  nameWithType: IQuery.GetNextAsJobResponseAsync(QueryOptions)
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync(Microsoft.Azure.Devices.QueryOptions)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJobResponseAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as <xref href=\"Microsoft.Azure.Devices.JobResponse\" data-throw-if-not-resolved=\"false\"></xref> objects\n"
  example: []
  syntax:
    content: Task<QueryResponse<JobResponse>> GetNextAsJobResponseAsync(QueryOptions options)
    parameters:
    - id: options
      type: Microsoft.Azure.Devices.QueryOptions
      description: Query options
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.JobResponse}}
      description: An enumerable <xref href="Microsoft.Azure.Devices.QueryResponse%601" data-throw-if-not-resolved="false"></xref> object
    content.vb: Function GetNextAsJobResponseAsync(options As QueryOptions) As Task(Of QueryResponse(Of JobResponse))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  id: GetNextAsJsonAsync
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJsonAsync()
  nameWithType: IQuery.GetNextAsJsonAsync()
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync()
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJsonAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as JSON strings\n"
  example: []
  syntax:
    content: Task<IEnumerable<string>> GetNextAsJsonAsync()
    return:
      type: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
      description: List of JSON strings
    content.vb: Function GetNextAsJsonAsync As Task(Of IEnumerable(Of String))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync*
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync(Microsoft.Azure.Devices.QueryOptions)
  commentId: M:Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync(Microsoft.Azure.Devices.QueryOptions)
  id: GetNextAsJsonAsync(Microsoft.Azure.Devices.QueryOptions)
  parent: Microsoft.Azure.Devices.IQuery
  langs:
  - csharp
  - vb
  name: GetNextAsJsonAsync(QueryOptions)
  nameWithType: IQuery.GetNextAsJsonAsync(QueryOptions)
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync(Microsoft.Azure.Devices.QueryOptions)
  type: Method
  source:
    remote:
      path: service/Microsoft.Azure.Devices/IQuery.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: GetNextAsJsonAsync
    path: src/azure-iot-sdks/service/Microsoft.Azure.Devices/IQuery.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.Devices.Uwp
  namespace: Microsoft.Azure.Devices
  summary: "\nRetrieves the next paged result as JSON strings\n"
  example: []
  syntax:
    content: Task<QueryResponse<string>> GetNextAsJsonAsync(QueryOptions options)
    parameters:
    - id: options
      type: Microsoft.Azure.Devices.QueryOptions
      description: Query options
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{System.String}}
      description: An enumerable <xref href="Microsoft.Azure.Devices.QueryResponse%601" data-throw-if-not-resolved="false"></xref> object
    content.vb: Function GetNextAsJsonAsync(options As QueryOptions) As Task(Of QueryResponse(Of String))
  overload: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync*
references:
- uid: Microsoft.Azure.Devices
  commentId: N:Microsoft.Azure.Devices
  isExternal: false
  name: Microsoft.Azure.Devices
  nameWithType: Microsoft.Azure.Devices
  fullName: Microsoft.Azure.Devices
- uid: Microsoft.Azure.Devices.IQuery.HasMoreResults*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.HasMoreResults
  isExternal: false
  name: HasMoreResults
  nameWithType: IQuery.HasMoreResults
  fullName: Microsoft.Azure.Devices.IQuery.HasMoreResults
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Devices.Shared.Twin
  commentId: T:Microsoft.Azure.Devices.Shared.Twin
  parent: Microsoft.Azure.Devices.Shared
  isExternal: false
  name: Twin
  nameWithType: Twin
  fullName: Microsoft.Azure.Devices.Shared.Twin
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
  isExternal: false
  name: GetNextAsTwinAsync
  nameWithType: IQuery.GetNextAsTwinAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsTwinAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.Shared.Twin}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<Twin>>
  nameWithType: Task<IEnumerable<Twin>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Devices.Shared.Twin>>
  nameWithType.vb: Task(Of IEnumerable(Of Twin))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Devices.Shared.Twin))
  name.vb: Task(Of IEnumerable(Of Twin))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.Shared
  commentId: N:Microsoft.Azure.Devices.Shared
  isExternal: false
  name: Microsoft.Azure.Devices.Shared
  nameWithType: Microsoft.Azure.Devices.Shared
  fullName: Microsoft.Azure.Devices.Shared
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Devices.QueryResponse`1
  commentId: T:Microsoft.Azure.Devices.QueryResponse`1
  isExternal: false
  name: QueryResponse<T>
  nameWithType: QueryResponse<T>
  fullName: Microsoft.Azure.Devices.QueryResponse<T>
  nameWithType.vb: QueryResponse(Of T)
  fullName.vb: Microsoft.Azure.Devices.QueryResponse(Of T)
  name.vb: QueryResponse(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.QueryOptions
  commentId: T:Microsoft.Azure.Devices.QueryOptions
  parent: Microsoft.Azure.Devices
  isExternal: false
  name: QueryOptions
  nameWithType: QueryOptions
  fullName: Microsoft.Azure.Devices.QueryOptions
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.Shared.Twin}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.Shared.Twin}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResponse<Twin>>
  nameWithType: Task<QueryResponse<Twin>>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Devices.QueryResponse<Microsoft.Azure.Devices.Shared.Twin>>
  nameWithType.vb: Task(Of QueryResponse(Of Twin))
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Devices.QueryResponse(Of Microsoft.Azure.Devices.Shared.Twin))
  name.vb: Task(Of QueryResponse(Of Twin))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.Shared.Twin
    name: Twin
    nameWithType: Twin
    fullName: Microsoft.Azure.Devices.Shared.Twin
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.DeviceJob
  commentId: T:Microsoft.Azure.Devices.DeviceJob
  isExternal: false
  name: DeviceJob
  nameWithType: DeviceJob
  fullName: Microsoft.Azure.Devices.DeviceJob
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
  isExternal: false
  name: GetNextAsDeviceJobAsync
  nameWithType: IQuery.GetNextAsDeviceJobAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsDeviceJobAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.DeviceJob}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.DeviceJob}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<DeviceJob>>
  nameWithType: Task<IEnumerable<DeviceJob>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Devices.DeviceJob>>
  nameWithType.vb: Task(Of IEnumerable(Of DeviceJob))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Devices.DeviceJob))
  name.vb: Task(Of IEnumerable(Of DeviceJob))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.DeviceJob}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.DeviceJob}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResponse<DeviceJob>>
  nameWithType: Task<QueryResponse<DeviceJob>>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Devices.QueryResponse<Microsoft.Azure.Devices.DeviceJob>>
  nameWithType.vb: Task(Of QueryResponse(Of DeviceJob))
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Devices.QueryResponse(Of Microsoft.Azure.Devices.DeviceJob))
  name.vb: Task(Of QueryResponse(Of DeviceJob))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.DeviceJob
    name: DeviceJob
    nameWithType: DeviceJob
    fullName: Microsoft.Azure.Devices.DeviceJob
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.JobResponse
  commentId: T:Microsoft.Azure.Devices.JobResponse
  isExternal: false
  name: JobResponse
  nameWithType: JobResponse
  fullName: Microsoft.Azure.Devices.JobResponse
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
  isExternal: false
  name: GetNextAsJobResponseAsync
  nameWithType: IQuery.GetNextAsJobResponseAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJobResponseAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.JobResponse}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{Microsoft.Azure.Devices.JobResponse}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<JobResponse>>
  nameWithType: Task<IEnumerable<JobResponse>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<Microsoft.Azure.Devices.JobResponse>>
  nameWithType.vb: Task(Of IEnumerable(Of JobResponse))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Devices.JobResponse))
  name.vb: Task(Of IEnumerable(Of JobResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.JobResponse}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{Microsoft.Azure.Devices.JobResponse}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResponse<JobResponse>>
  nameWithType: Task<QueryResponse<JobResponse>>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Devices.QueryResponse<Microsoft.Azure.Devices.JobResponse>>
  nameWithType.vb: Task(Of QueryResponse(Of JobResponse))
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Devices.QueryResponse(Of Microsoft.Azure.Devices.JobResponse))
  name.vb: Task(Of QueryResponse(Of JobResponse))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.JobResponse
    name: JobResponse
    nameWithType: JobResponse
    fullName: Microsoft.Azure.Devices.JobResponse
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync*
  commentId: Overload:Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
  isExternal: false
  name: GetNextAsJsonAsync
  nameWithType: IQuery.GetNextAsJsonAsync
  fullName: Microsoft.Azure.Devices.IQuery.GetNextAsJsonAsync
- uid: System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  commentId: T:System.Threading.Tasks.Task{System.Collections.Generic.IEnumerable{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<IEnumerable<String>>
  nameWithType: Task<IEnumerable<String>>
  fullName: System.Threading.Tasks.Task<System.Collections.Generic.IEnumerable<System.String>>
  nameWithType.vb: Task(Of IEnumerable(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of System.Collections.Generic.IEnumerable(Of System.String))
  name.vb: Task(Of IEnumerable(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{System.String}}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Devices.QueryResponse{System.String}}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<QueryResponse<String>>
  nameWithType: Task<QueryResponse<String>>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Devices.QueryResponse<System.String>>
  nameWithType.vb: Task(Of QueryResponse(Of String))
  fullName.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Devices.QueryResponse(Of System.String))
  name.vb: Task(Of QueryResponse(Of String))
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Devices.QueryResponse`1
    name: QueryResponse
    nameWithType: QueryResponse
    fullName: Microsoft.Azure.Devices.QueryResponse
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
