### YamlMime:ManagedReference
items:
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  id: RetryPolicy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  children:
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.Retrying
  - Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
  langs:
  - csharp
  - vb
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  type: Class
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: RetryPolicy
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nProvides the base implementation of the retry mechanism for unreliable actions and transient conditions.\n"
  example: []
  syntax:
    content: public class RetryPolicy
    content.vb: Public Class RetryPolicy
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.Retrying
  commentId: E:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.Retrying
  id: Retrying
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: Retrying
  nameWithType: RetryPolicy.Retrying
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.Retrying
  type: Event
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: Retrying
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nAn instance of a callback delegate that will be invoked whenever a retry condition is encountered.\n"
  example: []
  syntax:
    content: public event EventHandler<RetryingEventArgs> Retrying
    return:
      type: System.EventHandler{Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs}
    content.vb: Public Event Retrying As EventHandler(Of RetryingEventArgs)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
  id: NoRetry
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: NoRetry
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 75
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nReturns a default policy that performs no retries, but invokes the action only once.\n"
  example: []
  syntax:
    content: public static RetryPolicy NoRetry { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
    content.vb: Public Shared ReadOnly Property NoRetry As RetryPolicy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
  id: DefaultFixed
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: DefaultFixed
  nameWithType: RetryPolicy.DefaultFixed
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DefaultFixed
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 87
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nReturns a default policy that implements a fixed retry interval configured with the default <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.FixedInterval\" data-throw-if-not-resolved=\"false\"></xref> retry strategy.\nThe default retry policy treats all caught exceptions as transient errors.\n"
  example: []
  syntax:
    content: public static RetryPolicy DefaultFixed { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
    content.vb: Public Shared ReadOnly Property DefaultFixed As RetryPolicy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
  id: DefaultProgressive
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: DefaultProgressive
  nameWithType: RetryPolicy.DefaultProgressive
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DefaultProgressive
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 99
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nReturns a default policy that implements a progressive retry interval configured with the default <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Incremental\" data-throw-if-not-resolved=\"false\"></xref> retry strategy.\nThe default retry policy treats all caught exceptions as transient errors.\n"
  example: []
  syntax:
    content: public static RetryPolicy DefaultProgressive { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
    content.vb: Public Shared ReadOnly Property DefaultProgressive As RetryPolicy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
  id: DefaultExponential
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: DefaultExponential
  nameWithType: RetryPolicy.DefaultExponential
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: DefaultExponential
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 111
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nReturns a default policy that implements a random exponential retry interval configured with the default <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.FixedInterval\" data-throw-if-not-resolved=\"false\"></xref> retry strategy.\nThe default retry policy treats all caught exceptions as transient errors.\n"
  example: []
  syntax:
    content: public static RetryPolicy DefaultExponential { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
    content.vb: Public Shared ReadOnly Property DefaultExponential As RetryPolicy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential*
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
  id: RetryStrategy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryStrategy
  nameWithType: RetryPolicy.RetryStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: RetryStrategy
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 122
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nGets the retry strategy.\n"
  example: []
  syntax:
    content: public RetryStrategy RetryStrategy { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy
    content.vb: Public ReadOnly Property RetryStrategy As RetryStrategy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  commentId: P:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  id: ErrorDetectionStrategy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ErrorDetectionStrategy
  nameWithType: RetryPolicy.ErrorDetectionStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  type: Property
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ErrorDetectionStrategy
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 131
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nGets the instance of the error detection strategy.\n"
  example: []
  syntax:
    content: public ITransientErrorDetectionStrategy ErrorDetectionStrategy { get; }
    parameters: []
    return:
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
    content.vb: Public ReadOnly Property ErrorDetectionStrategy As ITransientErrorDetectionStrategy
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy)
  id: '#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy)'
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
  nameWithType: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, RetryStrategy)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy, Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy)
  type: Constructor
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 142
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of retry attempts and parameters defining the progressive delay between retries.\n"
  example: []
  syntax:
    content: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, RetryStrategy retryStrategy)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
      description: The <xref href="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy" data-throw-if-not-resolved="false"></xref> that is responsible for detecting transient conditions.
    - id: retryStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy
      description: The strategy to use for this retry policy.
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryStrategy As RetryStrategy)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)
  id: '#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32)'
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicy(ITransientErrorDetectionStrategy, Int32)
  nameWithType: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, Int32)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32)
  type: Constructor
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 159
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of retry attempts and default fixed time interval between retries.\n"
  example: []
  syntax:
    content: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
      description: The <xref href="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy" data-throw-if-not-resolved="false"></xref> that is responsible for detecting transient conditions.
    - id: retryCount
      type: System.Int32
      description: The number of retry attempts.
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)
  id: '#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan)'
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan)
  nameWithType: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of retry attempts and fixed time interval between retries.\n"
  example: []
  syntax:
    content: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan retryInterval)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
      description: The <xref href="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy" data-throw-if-not-resolved="false"></xref> that is responsible for detecting transient conditions.
    - id: retryCount
      type: System.Int32
      description: The number of retry attempts.
    - id: retryInterval
      type: System.TimeSpan
      description: The interval between retries.
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, retryInterval As TimeSpan)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)
  id: '#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan,System.TimeSpan)'
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan, TimeSpan)
  nameWithType: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan, TimeSpan)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 181
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of retry attempts and backoff parameters for calculating the exponential delay between retries.\n"
  example: []
  syntax:
    content: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan minBackoff, TimeSpan maxBackoff, TimeSpan deltaBackoff)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
      description: The <xref href="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy" data-throw-if-not-resolved="false"></xref> that is responsible for detecting transient conditions.
    - id: retryCount
      type: System.Int32
      description: The number of retry attempts.
    - id: minBackoff
      type: System.TimeSpan
      description: The minimum backoff time.
    - id: maxBackoff
      type: System.TimeSpan
      description: The maximum backoff time.
    - id: deltaBackoff
      type: System.TimeSpan
      description: The time value that will be used to calculate a random delta in the exponential delay between retries.
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, minBackoff As TimeSpan, maxBackoff As TimeSpan, deltaBackoff As TimeSpan)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)
  id: '#ctor(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy,System.Int32,System.TimeSpan,System.TimeSpan)'
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan)
  nameWithType: RetryPolicy.RetryPolicy(ITransientErrorDetectionStrategy, Int32, TimeSpan, TimeSpan)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy(Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy, System.Int32, System.TimeSpan, System.TimeSpan)
  type: Constructor
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: .ctor
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 192
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy\" data-throw-if-not-resolved=\"false\"></xref> class with the specified number of retry attempts and parameters defining the progressive delay between retries.\n"
  example: []
  syntax:
    content: public RetryPolicy(ITransientErrorDetectionStrategy errorDetectionStrategy, int retryCount, TimeSpan initialInterval, TimeSpan increment)
    parameters:
    - id: errorDetectionStrategy
      type: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
      description: The <xref href="Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy" data-throw-if-not-resolved="false"></xref> that is responsible for detecting transient conditions.
    - id: retryCount
      type: System.Int32
      description: The number of retry attempts.
    - id: initialInterval
      type: System.TimeSpan
      description: The initial interval that will apply for the first retry.
    - id: increment
      type: System.TimeSpan
      description: The incremental time value that will be used to calculate the progressive delay between retries.
    content.vb: Public Sub New(errorDetectionStrategy As ITransientErrorDetectionStrategy, retryCount As Integer, initialInterval As TimeSpan, increment As TimeSpan)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  id: ExecuteAction(System.Action)
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAction(Action)
  nameWithType: RetryPolicy.ExecuteAction(Action)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction(System.Action)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAction
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 200
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepetitively executes the specified action while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public virtual void ExecuteAction(Action action)
    parameters:
    - id: action
      type: System.Action
      description: A delegate that represents the executable action that doesn't return any results.
    content.vb: Public Overridable Sub ExecuteAction(action As Action)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction``1(System.Func{``0})
  id: ExecuteAction``1(System.Func{``0})
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAction<TResult>(Func<TResult>)
  nameWithType: RetryPolicy.ExecuteAction<TResult>(Func<TResult>)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction<TResult>(System.Func<TResult>)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAction
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 216
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepetitively executes the specified action while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public virtual TResult ExecuteAction<TResult>(Func<TResult> func)
    parameters:
    - id: func
      type: System.Func{{TResult}}
      description: A delegate that represents the executable action that returns the result of type <span class="typeparamref">TResult</span>.
    typeParameters:
    - id: TResult
      description: The type of result expected from the executable action.
    return:
      type: '{TResult}'
      description: The result from the action.
    content.vb: Public Overridable Function ExecuteAction(Of TResult)(func As Func(Of TResult)) As TResult
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction*
  nameWithType.vb: RetryPolicy.ExecuteAction(Of TResult)(Func(Of TResult))
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
  fullName.vb: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction(Of TResult)(System.Func(Of TResult))
  name.vb: ExecuteAction(Of TResult)(Func(Of TResult))
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  id: ExecuteAsync(System.Func{System.Threading.Tasks.Task})
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync(Func<Task>)
  nameWithType: RetryPolicy.ExecuteAsync(Func<Task>)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func<System.Threading.Tasks.Task>)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAsync
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 270
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepetitively executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task ExecuteAsync(Func<Task> taskAction)
    parameters:
    - id: taskAction
      type: System.Func{System.Threading.Tasks.Task}
      description: A function that returns a started task (also known as "hot" task).
    return:
      type: System.Threading.Tasks.Task
      description: "\nA task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
    content.vb: Public Function ExecuteAsync(taskAction As Func(Of Task)) As Task
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync*
  nameWithType.vb: RetryPolicy.ExecuteAsync(Func(Of Task))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task))
  name.vb: ExecuteAsync(Func(Of Task))
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  id: ExecuteAsync(System.Func{System.Threading.Tasks.Task},System.Threading.CancellationToken)
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync(Func<Task>, CancellationToken)
  nameWithType: RetryPolicy.ExecuteAsync(Func<Task>, CancellationToken)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func<System.Threading.Tasks.Task>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAsync
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 285
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepetitively executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task ExecuteAsync(Func<Task> taskAction, CancellationToken cancellationToken)
    parameters:
    - id: taskAction
      type: System.Func{System.Threading.Tasks.Task}
      description: A function that returns a started task (also known as "hot" task).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token used to cancel the retry operation. This token does not cancel the execution of the asynchronous task.
    return:
      type: System.Threading.Tasks.Task
      description: "\nReturns a task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
    content.vb: Public Function ExecuteAsync(taskAction As Func(Of Task), cancellationToken As CancellationToken) As Task
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync*
  nameWithType.vb: RetryPolicy.ExecuteAsync(Func(Of Task), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(System.Func(Of System.Threading.Tasks.Task), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Func(Of Task), CancellationToken)
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  id: ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}})
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Func<Task<TResult>>)
  nameWithType: RetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAsync
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 303
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepeatedly executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc)
    parameters:
    - id: taskFunc
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: A function that returns a started task (also known as "hot" task).
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\nReturns a task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
    content.vb: Public Function ExecuteAsync(Of TResult)(taskFunc As Func(Of Task(Of TResult))) As Task(Of TResult)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync*
  nameWithType.vb: RetryPolicy.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)))
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)))
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  id: ExecuteAsync``1(System.Func{System.Threading.Tasks.Task{``0}},System.Threading.CancellationToken)
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
  nameWithType: RetryPolicy.ExecuteAsync<TResult>(Func<Task<TResult>>, CancellationToken)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync<TResult>(System.Func<System.Threading.Tasks.Task<TResult>>, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: ExecuteAsync
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 318
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nRepeatedly executes the specified asynchronous task while it satisfies the current retry policy.\n"
  example: []
  syntax:
    content: public Task<TResult> ExecuteAsync<TResult>(Func<Task<TResult>> taskFunc, CancellationToken cancellationToken)
    parameters:
    - id: taskFunc
      type: System.Func{System.Threading.Tasks.Task{{TResult}}}
      description: A function that returns a started task (also known as "hot" task).
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: The token used to cancel the retry operation. This token does not cancel the execution of the asynchronous task.
    typeParameters:
    - id: TResult
    return:
      type: System.Threading.Tasks.Task{{TResult}}
      description: "\nReturns a task that will run to completion if the original task completes successfully (either the\nfirst time or after retrying transient failures). If the task fails with a non-transient error or\nthe retry limit is reached, the returned task will transition to a faulted state and the exception must be observed.\n"
    content.vb: Public Function ExecuteAsync(Of TResult)(taskFunc As Func(Of Task(Of TResult)), cancellationToken As CancellationToken) As Task(Of TResult)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync*
  nameWithType.vb: RetryPolicy.ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync(Of TResult)(System.Func(Of System.Threading.Tasks.Task(Of TResult)), System.Threading.CancellationToken)
  name.vb: ExecuteAsync(Of TResult)(Func(Of Task(Of TResult)), CancellationToken)
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  commentId: M:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  id: OnRetrying(System.Int32,System.Exception,System.TimeSpan)
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  langs:
  - csharp
  - vb
  name: OnRetrying(Int32, Exception, TimeSpan)
  nameWithType: RetryPolicy.OnRetrying(Int32, Exception, TimeSpan)
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying(System.Int32, System.Exception, System.TimeSpan)
  type: Method
  source:
    remote:
      path: device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
      branch: master
      repo: https://github.com/Azure/azure-iot-sdk-csharp.git
    id: OnRetrying
    path: src/azure-iot-sdks/device/Microsoft.Azure.Devices.Client/TransientFaultHandling/RetryPolicy.cs
    startLine: 333
  assemblies:
  - Microsoft.Azure.Devices.Client.NetStandard
  namespace: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  summary: "\nNotifies the subscribers whenever a retry condition is encountered.\n"
  example: []
  syntax:
    content: protected virtual void OnRetrying(int retryCount, Exception lastError, TimeSpan delay)
    parameters:
    - id: retryCount
      type: System.Int32
      description: The current retry attempt count.
    - id: lastError
      type: System.Exception
      description: The exception that caused the retry conditions to occur.
    - id: delay
      type: System.TimeSpan
      description: The delay that indicates how long the current thread will be suspended before the next iteration is invoked.
    content.vb: Protected Overridable Sub OnRetrying(retryCount As Integer, lastError As Exception, delay As TimeSpan)
  overload: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying*
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
references:
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  commentId: N:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  isExternal: false
  name: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  nameWithType: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs}
  commentId: T:System.EventHandler{Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<RetryingEventArgs>
  nameWithType: EventHandler<RetryingEventArgs>
  fullName: System.EventHandler<Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs>
  nameWithType.vb: EventHandler(Of RetryingEventArgs)
  fullName.vb: System.EventHandler(Of Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs)
  name.vb: EventHandler(Of RetryingEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs
    name: RetryingEventArgs
    nameWithType: RetryingEventArgs
    fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs
    name: RetryingEventArgs
    nameWithType: RetryingEventArgs
    fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryingEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullName.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
  isExternal: false
  name: NoRetry
  nameWithType: RetryPolicy.NoRetry
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.NoRetry
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  isExternal: false
  name: RetryPolicy
  nameWithType: RetryPolicy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.FixedInterval
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.FixedInterval
  isExternal: false
  name: FixedInterval
  nameWithType: FixedInterval
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.FixedInterval
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
  isExternal: false
  name: DefaultFixed
  nameWithType: RetryPolicy.DefaultFixed
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultFixed
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Incremental
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Incremental
  isExternal: false
  name: Incremental
  nameWithType: Incremental
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.Incremental
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
  isExternal: false
  name: DefaultProgressive
  nameWithType: RetryPolicy.DefaultProgressive
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultProgressive
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
  isExternal: false
  name: DefaultExponential
  nameWithType: RetryPolicy.DefaultExponential
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.DefaultExponential
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
  isExternal: false
  name: RetryStrategy
  nameWithType: RetryPolicy.RetryStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryStrategy
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  isExternal: false
  name: RetryStrategy
  nameWithType: RetryStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryStrategy
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
  isExternal: false
  name: ErrorDetectionStrategy
  nameWithType: RetryPolicy.ErrorDetectionStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ErrorDetectionStrategy
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
  commentId: T:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
  parent: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling
  isExternal: false
  name: ITransientErrorDetectionStrategy
  nameWithType: ITransientErrorDetectionStrategy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.ITransientErrorDetectionStrategy
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.#ctor
  isExternal: false
  name: RetryPolicy
  nameWithType: RetryPolicy.RetryPolicy
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.RetryPolicy
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction
  isExternal: false
  name: ExecuteAction
  nameWithType: RetryPolicy.ExecuteAction
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAction
- uid: System.Action
  commentId: T:System.Action
  parent: System
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: System.Action
- uid: System.Func{{TResult}}
  commentId: T:System.Func{``0}
  parent: System
  definition: System.Func`1
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: '{TResult}'
  commentId: '!:TResult'
  definition: TResult
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullName.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: TResult
  commentId: '!:TResult'
  isExternal: false
  name: TResult
  nameWithType: TResult
  fullName: TResult
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync
  isExternal: false
  name: ExecuteAsync
  nameWithType: RetryPolicy.ExecuteAsync
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.ExecuteAsync
- uid: System.Func{System.Threading.Tasks.Task}
  commentId: T:System.Func{System.Threading.Tasks.Task}
  parent: System
  definition: System.Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: System.Func<System.Threading.Tasks.Task>
  nameWithType.vb: Func(Of Task)
  fullName.vb: System.Func(Of System.Threading.Tasks.Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Func{System.Threading.Tasks.Task{{TResult}}}
  commentId: T:System.Func{System.Threading.Tasks.Task{``0}}
  parent: System
  definition: System.Func`1
  name: Func<Task<TResult>>
  nameWithType: Func<Task<TResult>>
  fullName: System.Func<System.Threading.Tasks.Task<TResult>>
  nameWithType.vb: Func(Of Task(Of TResult))
  fullName.vb: System.Func(Of System.Threading.Tasks.Task(Of TResult))
  name.vb: Func(Of Task(Of TResult))
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task{{TResult}}
  commentId: T:System.Threading.Tasks.Task{``0}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullName.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying*
  commentId: Overload:Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying
  isExternal: false
  name: OnRetrying
  nameWithType: RetryPolicy.OnRetrying
  fullName: Microsoft.Practices.EnterpriseLibrary.TransientFaultHandling.RetryPolicy.OnRetrying
- uid: System.Exception
  commentId: T:System.Exception
  parent: System
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: System.Exception
