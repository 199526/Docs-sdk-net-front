### YamlMime:ManagedReference
items:
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  commentId: T:Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  id: SourceParser
  parent: Azure.Batch.Unit.Tests.TestUtilities
  children:
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.String)
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.String,System.String,System.String,System.String)
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
  - Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
  langs:
  - csharp
  - vb
  name: SourceParser
  nameWithType: SourceParser
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  type: Class
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SourceParser
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 25
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  summary: "\nUses regular expressions to parse source code\n"
  example: []
  syntax:
    content: public class SourceParser
    content.vb: Public Class SourceParser
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.ToString
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
  commentId: P:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
  id: SourceFolders
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: SourceFolders
  nameWithType: SourceParser.SourceFolders
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
  type: Property
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SourceFolders
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 27
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public IReadOnlyList<string> SourceFolders { get; }
    content.vb: Public ReadOnly Property SourceFolders As IReadOnlyList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IReadOnlyList{System.String}
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
  commentId: P:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
  id: FileNamePattern
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: FileNamePattern
  nameWithType: SourceParser.FileNamePattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
  type: Property
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FileNamePattern
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 29
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public string FileNamePattern { get; }
    content.vb: Public ReadOnly Property FileNamePattern As String
    parameters: []
    return:
      type: System.String
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
  commentId: P:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
  id: FileNameExcludePattern
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: FileNameExcludePattern
  nameWithType: SourceParser.FileNameExcludePattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
  type: Property
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: FileNameExcludePattern
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 31
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public string FileNameExcludePattern { get; }
    content.vb: Public ReadOnly Property FileNameExcludePattern As String
    parameters: []
    return:
      type: System.String
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
  commentId: P:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
  id: SearchPattern
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: SearchPattern
  nameWithType: SourceParser.SearchPattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
  type: Property
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SearchPattern
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 33
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public string SearchPattern { get; }
    content.vb: Public ReadOnly Property SearchPattern As String
    parameters: []
    return:
      type: System.String
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.String,System.String,System.String,System.String)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.String,System.String,System.String,System.String)
  id: '#ctor(System.String,System.String,System.String,System.String)'
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: SourceParser(String, String, String, String)
  nameWithType: SourceParser.SourceParser(String, String, String, String)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceParser(System.String, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 35
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public SourceParser(string sourceRoot, string fileNamePattern, string fileNameExcludePattern, string searchPattern)
    content.vb: Public Sub New(sourceRoot As String, fileNamePattern As String, fileNameExcludePattern As String, searchPattern As String)
    parameters:
    - id: sourceRoot
      type: System.String
    - id: fileNamePattern
      type: System.String
    - id: fileNameExcludePattern
      type: System.String
    - id: searchPattern
      type: System.String
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.String)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.String)
  id: '#ctor(System.Collections.Generic.IReadOnlyList{System.String},System.String,System.String,System.String)'
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: SourceParser(IReadOnlyList<String>, String, String, String)
  nameWithType: SourceParser.SourceParser(IReadOnlyList<String>, String, String, String)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceParser(System.Collections.Generic.IReadOnlyList<System.String>, System.String, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 40
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public SourceParser(IReadOnlyList<string> sourceFolders, string fileNamePattern, string fileNameExcludePattern, string searchPattern)
    content.vb: Public Sub New(sourceFolders As IReadOnlyList(Of String), fileNamePattern As String, fileNameExcludePattern As String, searchPattern As String)
    parameters:
    - id: sourceFolders
      type: System.Collections.Generic.IReadOnlyList{System.String}
    - id: fileNamePattern
      type: System.String
    - id: fileNameExcludePattern
      type: System.String
    - id: searchPattern
      type: System.String
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor*
  nameWithType.vb: SourceParser.SourceParser(IReadOnlyList(Of String), String, String, String)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceParser(System.Collections.Generic.IReadOnlyList(Of System.String), System.String, System.String, System.String)
  name.vb: SourceParser(IReadOnlyList(Of String), String, String, String)
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse
  id: Parse
  parent: Azure.Batch.Unit.Tests.TestUtilities.SourceParser
  langs:
  - csharp
  - vb
  name: Parse()
  nameWithType: SourceParser.Parse()
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Parse
    path: src/azure-sdk-for-net/src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/SourceParser.cs
    startLine: 56
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public IEnumerable<SourceParserResult> Parse()
    content.vb: Public Function Parse As IEnumerable(Of SourceParserResult)
    return:
      type: System.Collections.Generic.IEnumerable{Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult}
  overload: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Azure.Batch.Unit.Tests.TestUtilities
  commentId: N:Azure.Batch.Unit.Tests.TestUtilities
  isExternal: false
  name: Azure.Batch.Unit.Tests.TestUtilities
  nameWithType: Azure.Batch.Unit.Tests.TestUtilities
  fullName: Azure.Batch.Unit.Tests.TestUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
  isExternal: false
  name: SourceFolders
  nameWithType: SourceParser.SourceFolders
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceFolders
- uid: System.Collections.Generic.IReadOnlyList{System.String}
  commentId: T:System.Collections.Generic.IReadOnlyList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<String>
  nameWithType: IReadOnlyList<String>
  fullName: System.Collections.Generic.IReadOnlyList<System.String>
  nameWithType.vb: IReadOnlyList(Of String)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of System.String)
  name.vb: IReadOnlyList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyList`1
  commentId: T:System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: IReadOnlyList<T>
  nameWithType: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  nameWithType.vb: IReadOnlyList(Of T)
  fullName.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    nameWithType: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
  isExternal: false
  name: FileNamePattern
  nameWithType: SourceParser.FileNamePattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNamePattern
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
  isExternal: false
  name: FileNameExcludePattern
  nameWithType: SourceParser.FileNameExcludePattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.FileNameExcludePattern
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
  isExternal: false
  name: SearchPattern
  nameWithType: SourceParser.SearchPattern
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SearchPattern
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.#ctor
  isExternal: false
  name: SourceParser
  nameWithType: SourceParser.SourceParser
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.SourceParser
- uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse
  isExternal: false
  name: Parse
  nameWithType: SourceParser.Parse
  fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParser.Parse
- uid: System.Collections.Generic.IEnumerable{Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult}
  commentId: T:System.Collections.Generic.IEnumerable{Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<SourceParserResult>
  nameWithType: IEnumerable<SourceParserResult>
  fullName: System.Collections.Generic.IEnumerable<Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult>
  nameWithType.vb: IEnumerable(Of SourceParserResult)
  fullName.vb: System.Collections.Generic.IEnumerable(Of Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult)
  name.vb: IEnumerable(Of SourceParserResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult
    name: SourceParserResult
    nameWithType: SourceParserResult
    fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult
    name: SourceParserResult
    nameWithType: SourceParserResult
    fullName: Azure.Batch.Unit.Tests.TestUtilities.SourceParserResult
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullName.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
