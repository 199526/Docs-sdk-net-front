### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.EventHubs.Processor.Lease
  commentId: T:Microsoft.Azure.EventHubs.Processor.Lease
  id: Lease
  parent: Microsoft.Azure.EventHubs.Processor
  children:
  - Microsoft.Azure.EventHubs.Processor.Lease.#ctor
  - Microsoft.Azure.EventHubs.Processor.Lease.#ctor(Microsoft.Azure.EventHubs.Processor.Lease)
  - Microsoft.Azure.EventHubs.Processor.Lease.#ctor(System.String)
  - Microsoft.Azure.EventHubs.Processor.Lease.Epoch
  - Microsoft.Azure.EventHubs.Processor.Lease.IsExpired
  - Microsoft.Azure.EventHubs.Processor.Lease.Offset
  - Microsoft.Azure.EventHubs.Processor.Lease.Owner
  - Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
  - Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
  - Microsoft.Azure.EventHubs.Processor.Lease.Token
  langs:
  - csharp
  - vb
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.Azure.EventHubs.Processor.Lease
  type: Class
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Lease
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 7
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: 'public class Lease : object'
    content.vb: >-
      Public Class Lease
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.EventHubs.Processor.Lease.#ctor
  commentId: M:Microsoft.Azure.EventHubs.Processor.Lease.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Lease()
  nameWithType: Lease.Lease()
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Lease()
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 9
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: protected Lease()
    content.vb: Protected Sub New
  overload: Microsoft.Azure.EventHubs.Processor.Lease.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Azure.EventHubs.Processor.Lease.#ctor(System.String)
  commentId: M:Microsoft.Azure.EventHubs.Processor.Lease.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Lease(String)
  nameWithType: Lease.Lease(String)
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Lease(System.String)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: protected Lease(string partitionId)
    parameters:
    - id: partitionId
      type: System.String
    content.vb: Protected Sub New(partitionId As String)
  overload: Microsoft.Azure.EventHubs.Processor.Lease.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Azure.EventHubs.Processor.Lease.#ctor(Microsoft.Azure.EventHubs.Processor.Lease)
  commentId: M:Microsoft.Azure.EventHubs.Processor.Lease.#ctor(Microsoft.Azure.EventHubs.Processor.Lease)
  id: '#ctor(Microsoft.Azure.EventHubs.Processor.Lease)'
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Lease(Lease)
  nameWithType: Lease.Lease(Lease)
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Lease(Microsoft.Azure.EventHubs.Processor.Lease)
  type: Constructor
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: .ctor
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 20
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: protected Lease(Lease source)
    parameters:
    - id: source
      type: Microsoft.Azure.EventHubs.Processor.Lease
    content.vb: Protected Sub New(source As Lease)
  overload: Microsoft.Azure.EventHubs.Processor.Lease.#ctor*
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Offset
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.Offset
  id: Offset
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Offset
  nameWithType: Lease.Offset
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Offset
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Offset
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public string Offset { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Offset As String
  overload: Microsoft.Azure.EventHubs.Processor.Lease.Offset*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
  id: SequenceNumber
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: SequenceNumber
  nameWithType: Lease.SequenceNumber
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: SequenceNumber
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public long SequenceNumber { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property SequenceNumber As Long
  overload: Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
  id: PartitionId
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: PartitionId
  nameWithType: Lease.PartitionId
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: PartitionId
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public string PartitionId { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property PartitionId As String
  overload: Microsoft.Azure.EventHubs.Processor.Lease.PartitionId*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Owner
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.Owner
  id: Owner
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Owner
  nameWithType: Lease.Owner
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Owner
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Owner
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public string Owner { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Owner As String
  overload: Microsoft.Azure.EventHubs.Processor.Lease.Owner*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Token
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.Token
  id: Token
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Token
  nameWithType: Lease.Token
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Token
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Token
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public string Token { get; set; }
    parameters: []
    return:
      type: System.String
    content.vb: Public Property Token As String
  overload: Microsoft.Azure.EventHubs.Processor.Lease.Token*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Epoch
  commentId: P:Microsoft.Azure.EventHubs.Processor.Lease.Epoch
  id: Epoch
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: Epoch
  nameWithType: Lease.Epoch
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Epoch
  type: Property
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: Epoch
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public long Epoch { get; set; }
    parameters: []
    return:
      type: System.Int64
    content.vb: Public Property Epoch As Long
  overload: Microsoft.Azure.EventHubs.Processor.Lease.Epoch*
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.EventHubs.Processor.Lease.IsExpired
  commentId: M:Microsoft.Azure.EventHubs.Processor.Lease.IsExpired
  id: IsExpired
  parent: Microsoft.Azure.EventHubs.Processor.Lease
  langs:
  - csharp
  - vb
  name: IsExpired()
  nameWithType: Lease.IsExpired()
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.IsExpired()
  type: Method
  source:
    remote:
      path: src/Microsoft.Azure.EventHubs.Processor/Lease.cs
      branch: master
      repo: https://github.com/Azure/azure-event-hubs-dotnet
    id: IsExpired
    path: src/azure-eventhub/src/Microsoft.Azure.EventHubs.Processor/Lease.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.EventHubs.Processor
  namespace: Microsoft.Azure.EventHubs.Processor
  syntax:
    content: public virtual Task<bool> IsExpired()
    return:
      type: Task{System.Boolean}
    content.vb: Public Overridable Function IsExpired As Task(Of Boolean)
  overload: Microsoft.Azure.EventHubs.Processor.Lease.IsExpired*
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Azure.EventHubs.Processor
  commentId: N:Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Microsoft.Azure.EventHubs.Processor
  nameWithType: Microsoft.Azure.EventHubs.Processor
  fullName: Microsoft.Azure.EventHubs.Processor
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.Azure.EventHubs.Processor.Lease.#ctor*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.#ctor
  isExternal: false
  name: Lease
  nameWithType: Lease.Lease
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Lease
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.EventHubs.Processor.Lease
  commentId: T:Microsoft.Azure.EventHubs.Processor.Lease
  parent: Microsoft.Azure.EventHubs.Processor
  isExternal: false
  name: Lease
  nameWithType: Lease
  fullName: Microsoft.Azure.EventHubs.Processor.Lease
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Offset*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.Offset
  isExternal: false
  name: Offset
  nameWithType: Lease.Offset
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Offset
- uid: Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
  isExternal: false
  name: SequenceNumber
  nameWithType: Lease.SequenceNumber
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.SequenceNumber
- uid: System.Int64
  isExternal: true
  name: Int64
  nameWithType: Int64
  fullName: System.Int64
- uid: Microsoft.Azure.EventHubs.Processor.Lease.PartitionId*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
  isExternal: false
  name: PartitionId
  nameWithType: Lease.PartitionId
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.PartitionId
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Owner*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.Owner
  isExternal: false
  name: Owner
  nameWithType: Lease.Owner
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Owner
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Token*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.Token
  isExternal: false
  name: Token
  nameWithType: Lease.Token
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Token
- uid: Microsoft.Azure.EventHubs.Processor.Lease.Epoch*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.Epoch
  isExternal: false
  name: Epoch
  nameWithType: Lease.Epoch
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.Epoch
- uid: Microsoft.Azure.EventHubs.Processor.Lease.IsExpired*
  commentId: Overload:Microsoft.Azure.EventHubs.Processor.Lease.IsExpired
  isExternal: false
  name: IsExpired
  nameWithType: Lease.IsExpired
  fullName: Microsoft.Azure.EventHubs.Processor.Lease.IsExpired
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullName.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
