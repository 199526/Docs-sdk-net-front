### YamlMime:ManagedReference
items:
- uid: KeyVault.TestFramework.TestHttpMessageHandler
  commentId: T:KeyVault.TestFramework.TestHttpMessageHandler
  id: TestHttpMessageHandler
  parent: KeyVault.TestFramework
  children:
  - KeyVault.TestFramework.TestHttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  langs:
  - csharp
  - vb
  name: TestHttpMessageHandler
  nameWithType: TestHttpMessageHandler
  fullName: KeyVault.TestFramework.TestHttpMessageHandler
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.TestFramework/TestHttpMessageHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TestHttpMessageHandler
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.TestFramework/TestHttpMessageHandler.cs
    startLine: 10
  assemblies:
  - Microsoft.Azure.KeyVault.TestFramework
  namespace: KeyVault.TestFramework
  syntax:
    content: 'public class TestHttpMessageHandler : DelegatingHandler'
    content.vb: >-
      Public Class TestHttpMessageHandler
          Inherits DelegatingHandler
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: KeyVault.TestFramework.TestHttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  commentId: M:KeyVault.TestFramework.TestHttpMessageHandler.SendAsync(HttpRequestMessage,CancellationToken)
  id: SendAsync(HttpRequestMessage,CancellationToken)
  parent: KeyVault.TestFramework.TestHttpMessageHandler
  langs:
  - csharp
  - vb
  name: SendAsync(HttpRequestMessage, CancellationToken)
  nameWithType: TestHttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)
  fullName: KeyVault.TestFramework.TestHttpMessageHandler.SendAsync(HttpRequestMessage, CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.TestFramework/TestHttpMessageHandler.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: SendAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.TestFramework/TestHttpMessageHandler.cs
    startLine: 12
  assemblies:
  - Microsoft.Azure.KeyVault.TestFramework
  namespace: KeyVault.TestFramework
  syntax:
    content: protected override Task<HttpResponseMessage> SendAsync(HttpRequestMessage request, CancellationToken cancellationToken)
    parameters:
    - id: request
      type: HttpRequestMessage
    - id: cancellationToken
      type: CancellationToken
    return:
      type: Task{HttpResponseMessage}
    content.vb: Protected Overrides Function SendAsync(request As HttpRequestMessage, cancellationToken As CancellationToken) As Task(Of HttpResponseMessage)
  overload: KeyVault.TestFramework.TestHttpMessageHandler.SendAsync*
  modifiers.csharp:
  - protected
  - override
  modifiers.vb:
  - Protected
  - Overrides
references:
- uid: KeyVault.TestFramework
  commentId: N:KeyVault.TestFramework
  isExternal: false
  name: KeyVault.TestFramework
  nameWithType: KeyVault.TestFramework
  fullName: KeyVault.TestFramework
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: KeyVault.TestFramework.TestHttpMessageHandler.SendAsync*
  commentId: Overload:KeyVault.TestFramework.TestHttpMessageHandler.SendAsync
  isExternal: false
  name: SendAsync
  nameWithType: TestHttpMessageHandler.SendAsync
  fullName: KeyVault.TestFramework.TestHttpMessageHandler.SendAsync
- uid: HttpRequestMessage
  isExternal: true
  name: HttpRequestMessage
  nameWithType: HttpRequestMessage
  fullName: HttpRequestMessage
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{HttpResponseMessage}
  commentId: '!:Task{HttpResponseMessage}'
  definition: Task`1
  name: Task<HttpResponseMessage>
  nameWithType: Task<HttpResponseMessage>
  fullName: Task<HttpResponseMessage>
  nameWithType.vb: Task(Of HttpResponseMessage)
  fullName.vb: Task(Of HttpResponseMessage)
  name.vb: Task(Of HttpResponseMessage)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: HttpResponseMessage
    name: HttpResponseMessage
    nameWithType: HttpResponseMessage
    fullName: HttpResponseMessage
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
