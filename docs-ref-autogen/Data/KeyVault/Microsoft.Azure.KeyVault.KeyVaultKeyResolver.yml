### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  commentId: T:Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  id: KeyVaultKeyResolver
  parent: Microsoft.Azure.KeyVault
  children:
  - Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient)
  - Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient.AuthenticationCallback)
  - Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient)
  - Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient.AuthenticationCallback)
  - Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync(System.String,CancellationToken)
  langs:
  - csharp
  - vb
  name: KeyVaultKeyResolver
  nameWithType: KeyVaultKeyResolver
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: KeyVaultKeyResolver
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nAzure Key Vault KeyResolver. This class resolves Key Vault Key Identifiers and\nSecret Identifiers to implementations of IKey. Secret Identifiers can only\nbe resolved if the Secret is a byte array with a length matching one of the AES\nkey lengths (128, 192, 256) and the content-type of the secret is application/octet-stream.\n"
  example: []
  syntax:
    content: 'public class KeyVaultKeyResolver : IKeyResolver'
    content.vb: >-
      Public Class KeyVaultKeyResolver
          Inherits IKeyResolver
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient.AuthenticationCallback)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient.AuthenticationCallback)
  id: '#ctor(KeyVaultClient.AuthenticationCallback)'
  parent: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  langs:
  - csharp
  - vb
  name: KeyVaultKeyResolver(KeyVaultClient.AuthenticationCallback)
  nameWithType: KeyVaultKeyResolver.KeyVaultKeyResolver(KeyVaultClient.AuthenticationCallback)
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.KeyVaultKeyResolver(KeyVaultClient.AuthenticationCallback)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreates a new Key Vault KeyResolver that uses a KeyVaultClient constructed\nwith the provided authentication callback.\n"
  example: []
  syntax:
    content: public KeyVaultKeyResolver(KeyVaultClient.AuthenticationCallback authenticationCallback)
    parameters:
    - id: authenticationCallback
      type: KeyVaultClient.AuthenticationCallback
      description: Key Vault authentication callback
    content.vb: Public Sub New(authenticationCallback As KeyVaultClient.AuthenticationCallback)
  overload: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(KeyVaultClient)
  id: '#ctor(KeyVaultClient)'
  parent: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  langs:
  - csharp
  - vb
  name: KeyVaultKeyResolver(KeyVaultClient)
  nameWithType: KeyVaultKeyResolver.KeyVaultKeyResolver(KeyVaultClient)
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.KeyVaultKeyResolver(KeyVaultClient)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreate a new Key Vault KeyResolver that uses the specified KeyVaultClient\n"
  example: []
  syntax:
    content: public KeyVaultKeyResolver(KeyVaultClient client)
    parameters:
    - id: client
      type: KeyVaultClient
      description: Key Vault client
    content.vb: Public Sub New(client As KeyVaultClient)
  overload: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient.AuthenticationCallback)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient.AuthenticationCallback)
  id: '#ctor(System.String,KeyVaultClient.AuthenticationCallback)'
  parent: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  langs:
  - csharp
  - vb
  name: KeyVaultKeyResolver(String, KeyVaultClient.AuthenticationCallback)
  nameWithType: KeyVaultKeyResolver.KeyVaultKeyResolver(String, KeyVaultClient.AuthenticationCallback)
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.KeyVaultKeyResolver(System.String, KeyVaultClient.AuthenticationCallback)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreates a new Key Vault KeyResolver that uses a KeyVaultClient constructed\nwith the provided authentication callback and only resolves keys for the \nspecified key vault\n"
  example: []
  syntax:
    content: public KeyVaultKeyResolver(string vaultName, KeyVaultClient.AuthenticationCallback authenticationCallback)
    parameters:
    - id: vaultName
      type: System.String
      description: 'The URL for the Key Vault, e.g. https://myvault.vault.azure.net/ '
    - id: authenticationCallback
      type: KeyVaultClient.AuthenticationCallback
      description: Key Vault authentication callback
    content.vb: Public Sub New(vaultName As String, authenticationCallback As KeyVaultClient.AuthenticationCallback)
  overload: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor(System.String,KeyVaultClient)
  id: '#ctor(System.String,KeyVaultClient)'
  parent: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  langs:
  - csharp
  - vb
  name: KeyVaultKeyResolver(String, KeyVaultClient)
  nameWithType: KeyVaultKeyResolver.KeyVaultKeyResolver(String, KeyVaultClient)
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.KeyVaultKeyResolver(System.String, KeyVaultClient)
  type: Constructor
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreates a new Key Vault KeyResolver that uses the specified KeyVaultClient\nand only resolves keys for the specified key vault\n"
  example: []
  syntax:
    content: public KeyVaultKeyResolver(string vaultName, KeyVaultClient client)
    parameters:
    - id: vaultName
      type: System.String
      description: 'The URL for the Key Vault, e.g. https://myvault.vault.azure.net/ '
    - id: client
      type: KeyVaultClient
      description: Key Vault client
    content.vb: Public Sub New(vaultName As String, client As KeyVaultClient)
  overload: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync(System.String,CancellationToken)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync(System.String,CancellationToken)
  id: ResolveKeyAsync(System.String,CancellationToken)
  parent: Microsoft.Azure.KeyVault.KeyVaultKeyResolver
  langs:
  - csharp
  - vb
  name: ResolveKeyAsync(String, CancellationToken)
  nameWithType: KeyVaultKeyResolver.ResolveKeyAsync(String, CancellationToken)
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync(System.String, CancellationToken)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: ResolveKeyAsync
    path: src/azure-sdk-for-net/src/KeyVault/Microsoft.Azure.KeyVault.Extensions/KeyVaultKeyResolver.cs
    startLine: 83
  assemblies:
  - Microsoft.Azure.KeyVault.Extensions
  namespace: Microsoft.Azure.KeyVault
  summary: "\nProvides an IKey implementation for the specified key or secret identifier.\n"
  example: []
  syntax:
    content: public Task<IKey> ResolveKeyAsync(string kid, CancellationToken token)
    parameters:
    - id: kid
      type: System.String
      description: The key or secret identifier to resolve
    - id: token
      type: CancellationToken
      description: Cancellation token
    return:
      type: Task{IKey}
      description: The resolved IKey implementation or null
    content.vb: Public Function ResolveKeyAsync(kid As String, token As CancellationToken) As Task(Of IKey)
  overload: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor*
  commentId: Overload:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.#ctor
  isExternal: false
  name: KeyVaultKeyResolver
  nameWithType: KeyVaultKeyResolver.KeyVaultKeyResolver
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.KeyVaultKeyResolver
- uid: KeyVaultClient.AuthenticationCallback
  isExternal: true
  name: KeyVaultClient.AuthenticationCallback
  nameWithType: KeyVaultClient.AuthenticationCallback
  fullName: KeyVaultClient.AuthenticationCallback
- uid: KeyVaultClient
  isExternal: true
  name: KeyVaultClient
  nameWithType: KeyVaultClient
  fullName: KeyVaultClient
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync*
  commentId: Overload:Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync
  isExternal: false
  name: ResolveKeyAsync
  nameWithType: KeyVaultKeyResolver.ResolveKeyAsync
  fullName: Microsoft.Azure.KeyVault.KeyVaultKeyResolver.ResolveKeyAsync
- uid: CancellationToken
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: CancellationToken
- uid: Task{IKey}
  commentId: '!:Task{IKey}'
  definition: Task`1
  name: Task<IKey>
  nameWithType: Task<IKey>
  fullName: Task<IKey>
  nameWithType.vb: Task(Of IKey)
  fullName.vb: Task(Of IKey)
  name.vb: Task(Of IKey)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: IKey
    name: IKey
    nameWithType: IKey
    fullName: IKey
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: IKey
    name: IKey
    nameWithType: IKey
    fullName: IKey
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullName.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
