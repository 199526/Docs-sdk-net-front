items:
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  commentId: T:Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  id: KeyVaultClientExtensions
  parent: Microsoft.Azure.KeyVault
  children:
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[],System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[],System.Byte[])
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  - Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  langs:
  - csharp
  - vb
  name: KeyVaultClientExtensions
  nameWithType: KeyVaultClientExtensions
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  type: Class
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: KeyVaultClientExtensions
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  syntax:
    content: 'public class KeyVaultClientExtensions : object'
    content.vb: >-
      Public Class KeyVaultClientExtensions
          Inherits Object
  inheritance:
  - System.Object
  extensionMethods:
  - System.Object.Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  - System.Object.Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  - System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.String)
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  id: DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: DecryptDataAsync(KeyVaultClient, KeyBundle, String, Byte[])
  nameWithType: KeyVaultClientExtensions.DecryptDataAsync(KeyVaultClient, KeyBundle, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: DecryptDataAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 34
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nDecrypts a single block of encrypted data.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> DecryptDataAsync(this KeyVaultClient client, KeyBundle keyBundle, string algorithm, byte[] cipherText)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DecryptDataAsync(client As KeyVaultClient, keyBundle As KeyBundle, algorithm As String, cipherText As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: keyBundle
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: The key to use for decryption
    - id: algorithm
      type: System.String
      description: The encryption algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: cipherText
      type: System.Byte[]
      description: The encrypted data
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 
  nameWithType.vb: KeyVaultClientExtensions.DecryptDataAsync(KeyVaultClient, KeyBundle, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte())
  name.vb: DecryptDataAsync(KeyVaultClient, KeyBundle, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  id: DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: DecryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  nameWithType: KeyVaultClientExtensions.DecryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: DecryptDataAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nDecrypts a single block of encrypted data.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> DecryptDataAsync(this KeyVaultClient client, JsonWebKey key, string algorithm, byte[] cipherText)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DecryptDataAsync(client As KeyVaultClient, key As JsonWebKey, algorithm As String, cipherText As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: key
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: The web key to use for decryption
    - id: algorithm
      type: System.String
      description: The encryption algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: cipherText
      type: System.Byte[]
      description: The encrypted data
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 
  nameWithType.vb: KeyVaultClientExtensions.DecryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.DecryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte())
  name.vb: DecryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  id: EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: EncryptDataAsync(KeyVaultClient, KeyBundle, String, Byte[])
  nameWithType: KeyVaultClientExtensions.EncryptDataAsync(KeyVaultClient, KeyBundle, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: EncryptDataAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 65
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nEncrypts a single block of data. The amount of data that may be encrypted is determined\nby the target key type and the encryption algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> EncryptDataAsync(this KeyVaultClient client, KeyBundle keyBundle, string algorithm, byte[] plaintext)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EncryptDataAsync(client As KeyVaultClient, keyBundle As KeyBundle, algorithm As String, plaintext As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: keyBundle
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: The key bundle to use for encryption
    - id: algorithm
      type: System.String
      description: The encryption algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: plaintext
      type: System.Byte[]
      description: The plain text to encrypt
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 
  nameWithType.vb: KeyVaultClientExtensions.EncryptDataAsync(KeyVaultClient, KeyBundle, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte())
  name.vb: EncryptDataAsync(KeyVaultClient, KeyBundle, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  id: EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: EncryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  nameWithType: KeyVaultClientExtensions.EncryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: EncryptDataAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 81
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nEncrypts a single block of data. The amount of data that may be encrypted is determined\nby the target key type and the encryption algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> EncryptDataAsync(this KeyVaultClient client, JsonWebKey key, string algorithm, byte[] plaintext)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function EncryptDataAsync(client As KeyVaultClient, key As JsonWebKey, algorithm As String, plaintext As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: key
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: The web key to use for encryption
    - id: algorithm
      type: System.String
      description: The encryption algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: plaintext
      type: System.Byte[]
      description: The plain text to encrypt
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 
  nameWithType.vb: KeyVaultClientExtensions.EncryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.EncryptDataAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte())
  name.vb: EncryptDataAsync(KeyVaultClient, JsonWebKey, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  id: SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: SignAsync(KeyVaultClient, KeyBundle, String, Byte[])
  nameWithType: KeyVaultClientExtensions.SignAsync(KeyVaultClient, KeyBundle, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: SignAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 104
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreates a signature from a digest using the specified key in the vault.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> SignAsync(this KeyVaultClient client, KeyBundle keyBundle, string algorithm, byte[] digest)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SignAsync(client As KeyVaultClient, keyBundle As KeyBundle, algorithm As String, digest As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: keyBundle
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: 'The key bundle of the signing key '
    - id: algorithm
      type: System.String
      description: The signing algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: digest
      type: System.Byte[]
      description: 'The signing digest hash value '
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 'signature '
  nameWithType.vb: KeyVaultClientExtensions.SignAsync(KeyVaultClient, KeyBundle, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte())
  name.vb: SignAsync(KeyVaultClient, KeyBundle, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  id: SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: SignAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  nameWithType: KeyVaultClientExtensions.SignAsync(KeyVaultClient, JsonWebKey, String, Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: SignAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nCreates a signature from a digest using the specified key in the vault.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> SignAsync(this KeyVaultClient client, JsonWebKey key, string algorithm, byte[] digest)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function SignAsync(client As KeyVaultClient, key As JsonWebKey, algorithm As String, digest As Byte()) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: key
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: 'The web key of the signing key '
    - id: algorithm
      type: System.String
      description: The signing algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: digest
      type: System.Byte[]
      description: 'The signing digest hash value '
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: 'signature '
  nameWithType.vb: KeyVaultClientExtensions.SignAsync(KeyVaultClient, JsonWebKey, String, Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.SignAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte())
  name.vb: SignAsync(KeyVaultClient, JsonWebKey, String, Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  id: UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: UnwrapKeyAsync(KeyVaultClient, KeyBundle, Byte[], String)
  nameWithType: KeyVaultClientExtensions.UnwrapKeyAsync(KeyVaultClient, KeyBundle, Byte[], String)
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: UnwrapKeyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 134
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nUnwraps a symmetric key using the specified wrapping key and algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> UnwrapKeyAsync(this KeyVaultClient client, KeyBundle wrappingKey, byte[] wrappedKey, string algorithm)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnwrapKeyAsync(client As KeyVaultClient, wrappingKey As KeyBundle, wrappedKey As Byte(), algorithm As String) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: wrappingKey
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: The wrapping key
    - id: wrappedKey
      type: System.Byte[]
      description: The symmetric key to unwrap
    - id: algorithm
      type: System.String
      description: The algorithm to use. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: The unwrapped key
  nameWithType.vb: KeyVaultClientExtensions.UnwrapKeyAsync(KeyVaultClient, KeyBundle, Byte(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.Byte(), System.String)
  name.vb: UnwrapKeyAsync(KeyVaultClient, KeyBundle, Byte(), String)
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  id: UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: UnwrapKeyAsync(KeyVaultClient, JsonWebKey, Byte[], String)
  nameWithType: KeyVaultClientExtensions.UnwrapKeyAsync(KeyVaultClient, JsonWebKey, Byte[], String)
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: UnwrapKeyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 149
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nUnwraps a symmetric key using the specified wrapping key and algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> UnwrapKeyAsync(this KeyVaultClient client, JsonWebKey wrappingKey, byte[] wrappedKey, string algorithm)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function UnwrapKeyAsync(client As KeyVaultClient, wrappingKey As JsonWebKey, wrappedKey As Byte(), algorithm As String) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: wrappingKey
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: The wrapping key
    - id: wrappedKey
      type: System.Byte[]
      description: The symmetric key to unwrap
    - id: algorithm
      type: System.String
      description: The algorithm to use. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: The unwrapped key
  nameWithType.vb: KeyVaultClientExtensions.UnwrapKeyAsync(KeyVaultClient, JsonWebKey, Byte(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.UnwrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.Byte(), System.String)
  name.vb: UnwrapKeyAsync(KeyVaultClient, JsonWebKey, Byte(), String)
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[],System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[],System.Byte[])
  id: VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.String,System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: VerifyAsync(KeyVaultClient, KeyBundle, String, Byte[], Byte[])
  nameWithType: KeyVaultClientExtensions.VerifyAsync(KeyVaultClient, KeyBundle, String, Byte[], Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: VerifyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nVerifies a signature using the specified key.\n"
  example: []
  syntax:
    content: public static Task<bool> VerifyAsync(this KeyVaultClient client, KeyBundle verifyKey, string algorithm, byte[] digest, byte[] signature)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyAsync(client As KeyVaultClient, verifyKey As KeyBundle, algorithm As String, digest As Byte(), signature As Byte()) As Task(Of Boolean)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: verifyKey
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: The verification key
    - id: algorithm
      type: System.String
      description: The signing algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: digest
      type: System.Byte[]
      description: The digest hash value
    - id: signature
      type: System.Byte[]
      description: The signature to verify
    return:
      type: Task{System.Boolean}
      description: True if verification succeeds, false if verification fails
  nameWithType.vb: KeyVaultClientExtensions.VerifyAsync(KeyVaultClient, KeyBundle, String, Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.String, System.Byte(), System.Byte())
  name.vb: VerifyAsync(KeyVaultClient, KeyBundle, String, Byte(), Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[],System.Byte[])
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[],System.Byte[])
  id: VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.String,System.Byte[],System.Byte[])
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: VerifyAsync(KeyVaultClient, JsonWebKey, String, Byte[], Byte[])
  nameWithType: KeyVaultClientExtensions.VerifyAsync(KeyVaultClient, JsonWebKey, String, Byte[], Byte[])
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte[], System.Byte[])
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: VerifyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 182
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nVerifies a signature using the specified key.\n"
  example: []
  syntax:
    content: public static Task<bool> VerifyAsync(this KeyVaultClient client, JsonWebKey verifyKey, string algorithm, byte[] digest, byte[] signature)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function VerifyAsync(client As KeyVaultClient, verifyKey As JsonWebKey, algorithm As String, digest As Byte(), signature As Byte()) As Task(Of Boolean)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: verifyKey
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: The verification key
    - id: algorithm
      type: System.String
      description: The signing algorithm. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    - id: digest
      type: System.Byte[]
      description: The digest hash value
    - id: signature
      type: System.Byte[]
      description: The signature to verify
    return:
      type: Task{System.Boolean}
      description: true if verification succeeds, false if verification fails
  nameWithType.vb: KeyVaultClientExtensions.VerifyAsync(KeyVaultClient, JsonWebKey, String, Byte(), Byte())
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.VerifyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.String, System.Byte(), System.Byte())
  name.vb: VerifyAsync(KeyVaultClient, JsonWebKey, String, Byte(), Byte())
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  id: WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.KeyBundle,System.Byte[],System.String)
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: WrapKeyAsync(KeyVaultClient, KeyBundle, Byte[], String)
  nameWithType: KeyVaultClientExtensions.WrapKeyAsync(KeyVaultClient, KeyBundle, Byte[], String)
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: WrapKeyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 223
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nWraps a symmetric key using the specified wrapping key and algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> WrapKeyAsync(this KeyVaultClient client, KeyBundle wrappingKey, byte[] key, string algorithm)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WrapKeyAsync(client As KeyVaultClient, wrappingKey As KeyBundle, key As Byte(), algorithm As String) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: wrappingKey
      type: Microsoft.Azure.KeyVault.KeyBundle
      description: The wrapping key
    - id: key
      type: System.Byte[]
      description: The key to wrap
    - id: algorithm
      type: System.String
      description: The algorithm to use. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: The wrapped key
  nameWithType.vb: KeyVaultClientExtensions.WrapKeyAsync(KeyVaultClient, KeyBundle, Byte(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.KeyBundle, System.Byte(), System.String)
  name.vb: WrapKeyAsync(KeyVaultClient, KeyBundle, Byte(), String)
- uid: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  commentId: M:Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  id: WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient,Microsoft.Azure.KeyVault.WebKey.JsonWebKey,System.Byte[],System.String)
  isExtensionMethod: true
  parent: Microsoft.Azure.KeyVault.KeyVaultClientExtensions
  langs:
  - csharp
  - vb
  name: WrapKeyAsync(KeyVaultClient, JsonWebKey, Byte[], String)
  nameWithType: KeyVaultClientExtensions.WrapKeyAsync(KeyVaultClient, JsonWebKey, Byte[], String)
  fullName: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.Byte[], System.String)
  type: Method
  source:
    remote:
      path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
      branch: master
      repo: git@github.com:qinezh/azure-sdk-for-net.git
    id: WrapKeyAsync
    path: src/KeyVault/Microsoft.Azure.KeyVault/KeyVaultClientExtensions.cs
    startLine: 238
  assemblies:
  - Microsoft.Azure.KeyVault
  namespace: Microsoft.Azure.KeyVault
  summary: "\nWraps a symmetric key using the specified wrapping key and algorithm.\n"
  example: []
  syntax:
    content: public static Task<KeyOperationResult> WrapKeyAsync(this KeyVaultClient client, JsonWebKey wrappingKey, byte[] key, string algorithm)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function WrapKeyAsync(client As KeyVaultClient, wrappingKey As JsonWebKey, key As Byte(), algorithm As String) As Task(Of KeyOperationResult)
    parameters:
    - id: client
      type: Microsoft.Azure.KeyVault.KeyVaultClient
    - id: wrappingKey
      type: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
      description: The wrapping key
    - id: key
      type: System.Byte[]
      description: The key to wrap
    - id: algorithm
      type: System.String
      description: The algorithm to use. For more information on possible algorithm types, see JsonWebKeyEncryptionAlgorithm.
    return:
      type: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
      description: The wrapped key
  nameWithType.vb: KeyVaultClientExtensions.WrapKeyAsync(KeyVaultClient, JsonWebKey, Byte(), String)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.KeyVault.KeyVaultClientExtensions.WrapKeyAsync(Microsoft.Azure.KeyVault.KeyVaultClient, Microsoft.Azure.KeyVault.WebKey.JsonWebKey, System.Byte(), System.String)
  name.vb: WrapKeyAsync(KeyVaultClient, JsonWebKey, Byte(), String)
references:
- uid: Microsoft.Azure.KeyVault
  commentId: N:Microsoft.Azure.KeyVault
  isExternal: false
  name: Microsoft.Azure.KeyVault
  nameWithType: Microsoft.Azure.KeyVault
  fullName: Microsoft.Azure.KeyVault
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  commentId: M:Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
  parent: Microsoft.Azure.Management.SiteRecovery.QueryHelpers
  definition: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
  name: ToJson()
  nameWithType: QueryHelpers.ToJson()
  fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson()
  spec.csharp:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
    name: ToJson
    nameWithType: QueryHelpers.ToJson
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
    name: ToJson
    nameWithType: QueryHelpers.ToJson
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  commentId: M:Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
  parent: Microsoft.Azure.Management.SiteRecovery.QueryHelpers
  definition: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
  name: ToQueryString()
  nameWithType: QueryHelpers.ToQueryString()
  fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString()
  spec.csharp:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
    name: ToQueryString
    nameWithType: QueryHelpers.ToQueryString
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
    name: ToQueryString
    nameWithType: QueryHelpers.ToQueryString
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
  name: CastTo<T>()
  nameWithType: ObjectExtensions.CastTo<T>()
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo<T>()
  nameWithType.vb: ObjectExtensions.CastTo(Of T)()
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo(Of T)()
  name.vb: CastTo(Of T)()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
  name: Is<T>()
  nameWithType: ObjectExtensions.Is<T>()
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is<T>()
  nameWithType.vb: ObjectExtensions.Is(Of T)()
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is(Of T)()
  name.vb: Is(Of T)()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1
    name: Is<T>
    nameWithType: ObjectExtensions.Is<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1
    name: Is(Of T)
    nameWithType: ObjectExtensions.Is(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
  name: As<T>()
  nameWithType: ObjectExtensions.As<T>()
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As<T>()
  nameWithType.vb: ObjectExtensions.As(Of T)()
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As(Of T)()
  name.vb: As(Of T)()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1
    name: As<T>
    nameWithType: ObjectExtensions.As<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1
    name: As(Of T)
    nameWithType: ObjectExtensions.As(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
  name: IsNull()
  nameWithType: ObjectExtensions.IsNull()
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
    name: IsNull
    nameWithType: ObjectExtensions.IsNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
    name: IsNull
    nameWithType: ObjectExtensions.IsNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
  name: IsNotNull()
  nameWithType: ObjectExtensions.IsNotNull()
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
    name: IsNotNull
    nameWithType: ObjectExtensions.IsNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
    name: IsNotNull
    nameWithType: ObjectExtensions.IsNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.String)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  definition: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
  name: ArgumentNotNull(String)
  nameWithType: ObjectExtensions.ArgumentNotNull(String)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.String)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.String)
    name: ArgumentNotNull
    nameWithType: ObjectExtensions.ArgumentNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.String)
    name: ArgumentNotNull
    nameWithType: ObjectExtensions.ArgumentNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
  commentId: M:Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
  isExternal: true
  name: ToJson(Object)
  nameWithType: QueryHelpers.ToJson(Object)
  fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
  spec.csharp:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
    name: ToJson
    nameWithType: QueryHelpers.ToJson
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson(System.Object)
    name: ToJson
    nameWithType: QueryHelpers.ToJson
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToJson
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers
  commentId: T:Microsoft.Azure.Management.SiteRecovery.QueryHelpers
  parent: Microsoft.Azure.Management.SiteRecovery
  isExternal: false
  name: QueryHelpers
  nameWithType: QueryHelpers
  fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers
- uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
  commentId: M:Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
  isExternal: true
  name: ToQueryString(Object)
  nameWithType: QueryHelpers.ToQueryString(Object)
  fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
  spec.csharp:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
    name: ToQueryString
    nameWithType: QueryHelpers.ToQueryString
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString(System.Object)
    name: ToQueryString
    nameWithType: QueryHelpers.ToQueryString
    fullName: Microsoft.Azure.Management.SiteRecovery.QueryHelpers.ToQueryString
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
  isExternal: true
  name: CastTo<T>(Object)
  nameWithType: ObjectExtensions.CastTo<T>(Object)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo<T>(System.Object)
  nameWithType.vb: ObjectExtensions.CastTo(Of T)(Object)
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo(Of T)(System.Object)
  name.vb: CastTo(Of T)(Object)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo<T>
    nameWithType: ObjectExtensions.CastTo<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo``1(System.Object)
    name: CastTo(Of T)
    nameWithType: ObjectExtensions.CastTo(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.CastTo(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  commentId: T:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
  parent: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
  isExternal: false
  name: ObjectExtensions
  nameWithType: ObjectExtensions
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
  isExternal: true
  name: Is<T>(Object)
  nameWithType: ObjectExtensions.Is<T>(Object)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is<T>(System.Object)
  nameWithType.vb: ObjectExtensions.Is(Of T)(Object)
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is(Of T)(System.Object)
  name.vb: Is(Of T)(Object)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
    name: Is<T>
    nameWithType: ObjectExtensions.Is<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is``1(System.Object)
    name: Is(Of T)
    nameWithType: ObjectExtensions.Is(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.Is(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
  isExternal: true
  name: As<T>(Object)
  nameWithType: ObjectExtensions.As<T>(Object)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As<T>(System.Object)
  nameWithType.vb: ObjectExtensions.As(Of T)(Object)
  fullname.vb: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As(Of T)(System.Object)
  name.vb: As(Of T)(Object)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
    name: As<T>
    nameWithType: ObjectExtensions.As<T>
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As<T>
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As``1(System.Object)
    name: As(Of T)
    nameWithType: ObjectExtensions.As(Of T)
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.As(Of T)
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
  isExternal: true
  name: IsNull(Object)
  nameWithType: ObjectExtensions.IsNull(Object)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
    name: IsNull
    nameWithType: ObjectExtensions.IsNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull(System.Object)
    name: IsNull
    nameWithType: ObjectExtensions.IsNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
  isExternal: true
  name: IsNotNull(Object)
  nameWithType: ObjectExtensions.IsNotNull(Object)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
    name: IsNotNull
    nameWithType: ObjectExtensions.IsNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull(System.Object)
    name: IsNotNull
    nameWithType: ObjectExtensions.IsNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.IsNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
  commentId: M:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
  isExternal: true
  name: ArgumentNotNull(Object, String)
  nameWithType: ObjectExtensions.ArgumentNotNull(Object, String)
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object, System.String)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
    name: ArgumentNotNull
    nameWithType: ObjectExtensions.ArgumentNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull(System.Object,System.String)
    name: ArgumentNotNull
    nameWithType: ObjectExtensions.ArgumentNotNull
    fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library.ObjectExtensions.ArgumentNotNull
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Management.SiteRecovery
  commentId: N:Microsoft.Azure.Management.SiteRecovery
  isExternal: false
  name: Microsoft.Azure.Management.SiteRecovery
  nameWithType: Microsoft.Azure.Management.SiteRecovery
  fullName: Microsoft.Azure.Management.SiteRecovery
- uid: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
  commentId: N:Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
  isExternal: false
  name: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
  nameWithType: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
  fullName: Microsoft.WindowsAzure.Management.HDInsight.Framework.Core.Library
- uid: Microsoft.Azure.KeyVault.KeyVaultClient
  commentId: T:Microsoft.Azure.KeyVault.KeyVaultClient
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: KeyVaultClient
  nameWithType: KeyVaultClient
  fullName: Microsoft.Azure.KeyVault.KeyVaultClient
- uid: Microsoft.Azure.KeyVault.KeyBundle
  commentId: T:Microsoft.Azure.KeyVault.KeyBundle
  parent: Microsoft.Azure.KeyVault
  isExternal: false
  name: KeyBundle
  nameWithType: KeyBundle
  fullName: Microsoft.Azure.KeyVault.KeyBundle
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Task{Microsoft.Azure.KeyVault.KeyOperationResult}
  commentId: '!:Task{Microsoft.Azure.KeyVault.KeyOperationResult}'
  definition: Task`1
  name: Task<KeyOperationResult>
  nameWithType: Task<KeyOperationResult>
  fullName: Task<Microsoft.Azure.KeyVault.KeyOperationResult>
  nameWithType.vb: Task(Of KeyOperationResult)
  fullname.vb: Task(Of Microsoft.Azure.KeyVault.KeyOperationResult)
  name.vb: Task(Of KeyOperationResult)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.KeyVault.KeyOperationResult
    name: KeyOperationResult
    nameWithType: KeyOperationResult
    fullName: Microsoft.Azure.KeyVault.KeyOperationResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.KeyVault.KeyOperationResult
    name: KeyOperationResult
    nameWithType: KeyOperationResult
    fullName: Microsoft.Azure.KeyVault.KeyOperationResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: 
    nameWithType: 
    fullName: 
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: 
    nameWithType: 
    fullName: 
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  commentId: T:Microsoft.Azure.KeyVault.WebKey.JsonWebKey
  parent: Microsoft.Azure.KeyVault.WebKey
  isExternal: false
  name: JsonWebKey
  nameWithType: JsonWebKey
  fullName: Microsoft.Azure.KeyVault.WebKey.JsonWebKey
- uid: Microsoft.Azure.KeyVault.WebKey
  commentId: N:Microsoft.Azure.KeyVault.WebKey
  isExternal: false
  name: Microsoft.Azure.KeyVault.WebKey
  nameWithType: Microsoft.Azure.KeyVault.WebKey
  fullName: Microsoft.Azure.KeyVault.WebKey
- uid: Task{System.Boolean}
  commentId: '!:Task{System.Boolean}'
  definition: Task`1
  name: Task<Boolean>
  nameWithType: Task<Boolean>
  fullName: Task<System.Boolean>
  nameWithType.vb: Task(Of Boolean)
  fullname.vb: Task(Of System.Boolean)
  name.vb: Task(Of Boolean)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
