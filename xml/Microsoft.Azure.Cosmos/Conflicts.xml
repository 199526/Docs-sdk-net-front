<Type Name="Conflicts" FullName="Microsoft.Azure.Cosmos.Conflicts">
  <TypeSignature Language="C#" Value="public abstract class Conflicts" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Conflicts extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.Conflicts" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Conflicts" />
  <TypeSignature Language="F#" Value="type Conflicts = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.18</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Operations for reading/querying conflicts in a Azure Cosmos container.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Conflicts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="DeleteAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteAsync (Microsoft.Azure.Cosmos.ConflictProperties conflict, Microsoft.Azure.Cosmos.PartitionKey partitionKey, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; DeleteAsync(class Microsoft.Azure.Cosmos.ConflictProperties conflict, class Microsoft.Azure.Cosmos.PartitionKey partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.DeleteAsync(Microsoft.Azure.Cosmos.ConflictProperties,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteAsync : Microsoft.Azure.Cosmos.ConflictProperties * Microsoft.Azure.Cosmos.PartitionKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="conflicts.DeleteAsync (conflict, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.Azure.Cosmos.ConflictProperties" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="conflict">The conflict to delete.</param>
        <param name="partitionKey">The partition key for the conflict.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a conflict from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>A Task representing the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Azure.Cosmos.ConflictProperties" />
      </Docs>
    </Member>
    <Member MemberName="GetConflictIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.ConflictProperties&gt; GetConflictIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;class Microsoft.Azure.Cosmos.ConflictProperties&gt; GetConflictIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.GetConflictIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConflictIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As FeedIterator(Of ConflictProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetConflictIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.ConflictProperties&gt;" Usage="conflicts.GetConflictIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.ConflictProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Obtains an iterator to go through the <see cref="T:Microsoft.Azure.Cosmos.ConflictProperties" /> on an Azure Cosmos container.
            </summary>
        <returns>An iterator to go through the conflicts.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = await conflicts.GetConflictIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.FetchNextSetAsync())
                {
                }
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="GetConflicttreamIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator GetConflicttreamIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator GetConflicttreamIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.GetConflicttreamIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetConflicttreamIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As FeedIterator" />
      <MemberSignature Language="F#" Value="abstract member GetConflicttreamIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.FeedIterator" Usage="conflicts.GetConflicttreamIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the conflicts for the container as the original CosmosResponseMessage
            </summary>
        <returns>An iterator to go through the conflicts.</returns>
        <remarks>To be added.</remarks>
        <example>
          <code language="c#"><![CDATA[
            FeedIterator conflictIterator = await conflicts.GetConflictStreamIterator();
            while (conflictIterator.HasMoreResults)
            {
                using (CosmosResponseMessage iterator = await feedIterator.FetchNextSetAsync())
                {
                }
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadConflictContent&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract T ReadConflictContent&lt;T&gt; (Microsoft.Azure.Cosmos.ConflictProperties conflict);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance !!T ReadConflictContent&lt;T&gt;(class Microsoft.Azure.Cosmos.ConflictProperties conflict) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.ReadConflictContent``1(Microsoft.Azure.Cosmos.ConflictProperties)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function ReadConflictContent(Of T) (conflict As ConflictProperties) As T" />
      <MemberSignature Language="F#" Value="abstract member ReadConflictContent : Microsoft.Azure.Cosmos.ConflictProperties -&gt; 'T" Usage="conflicts.ReadConflictContent conflict" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>T</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.Azure.Cosmos.ConflictProperties" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="conflict">The conflict for which we want to read the content of.</param>
        <summary>
            Reads the content of the Conflict resource in the Azure Cosmos DB service.
            </summary>
        <returns>The content of the conflict.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Azure.Cosmos.ConflictProperties" />
        <example>
          <code language="c#"><![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = await conflicts.GetConflictsIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.FetchNextSetAsync())
                {
                    MyClass intendedChanges = conflicts.ReadConflictContent<MyClass>(item);
                    ItemResponse<MyClass> currentState = await conflicts.ReadCurrentAsync<MyClass>(intendedChanges.MyPartitionKey, item);
                }
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
    <Member MemberName="ReadCurrentAsync&lt;T&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt; ReadCurrentAsync&lt;T&gt; (Microsoft.Azure.Cosmos.ConflictProperties conflict, Microsoft.Azure.Cosmos.PartitionKey partitionKey, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ItemResponse`1&lt;!!T&gt;&gt; ReadCurrentAsync&lt;T&gt;(class Microsoft.Azure.Cosmos.ConflictProperties conflict, class Microsoft.Azure.Cosmos.PartitionKey partitionKey, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Conflicts.ReadCurrentAsync``1(Microsoft.Azure.Cosmos.ConflictProperties,Microsoft.Azure.Cosmos.PartitionKey,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadCurrentAsync : Microsoft.Azure.Cosmos.ConflictProperties * Microsoft.Azure.Cosmos.PartitionKey * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;'T&gt;&gt;" Usage="conflicts.ReadCurrentAsync (conflict, partitionKey, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ItemResponse&lt;T&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="T" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="conflict" Type="Microsoft.Azure.Cosmos.ConflictProperties" />
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="T">To be added.</typeparam>
        <param name="conflict">The conflict for which we want to read the item.</param>
        <param name="partitionKey">The partition key for the item.</param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads the item that originated the conflict.
            </summary>
        <returns>The current state of the item associated with the conflict.</returns>
        <remarks>To be added.</remarks>
        <altmember cref="T:Microsoft.Azure.Cosmos.ConflictProperties" />
        <example>
          <code language="c#"><![CDATA[
            FeedIterator<ConflictProperties> conflictIterator = await conflicts.GetConflictsIterator();
            while (conflictIterator.HasMoreResults)
            {
                foreach(ConflictProperties item in await conflictIterator.FetchNextSetAsync())
                {
                    MyClass intendedChanges = conflicts.ReadConflictContent<MyClass>(item);
                    ItemResponse<MyClass> currentState = await conflicts.ReadCurrentAsync<MyClass>(intendedChanges.MyPartitionKey, item);
                }
            }
            ]]></code>
        </example>
      </Docs>
    </Member>
  </Members>
</Type>