<Type Name="Scripts" FullName="Microsoft.Azure.Cosmos.Scripts.Scripts">
  <TypeSignature Language="C#" Value="public abstract class Scripts" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi abstract beforefieldinit Scripts extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Microsoft.Azure.Cosmos.Scripts.Scripts" />
  <TypeSignature Language="VB.NET" Value="Public MustInherit Class Scripts" />
  <TypeSignature Language="F#" Value="type Scripts = class" />
  <AssemblyInfo>
    <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
    <AssemblyVersion>3.0.0.18</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            Represents script operations on an Azure Cosmos container.
            </summary>
    <remarks>To be added.</remarks>
    <altmember cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" />
    <altmember cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" />
    <altmember cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" />
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected Scripts ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>To be added.</summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="CreateStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; CreateStoredProcedureAsync (Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties storedProcedureProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; CreateStoredProcedureAsync(class Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties storedProcedureProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateStoredProcedureAsync(Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateStoredProcedureAsync : Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;" Usage="scripts.CreateStoredProcedureAsync (storedProcedureProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureProperties" Type="Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="storedProcedureProperties">The Stored Procedure to create</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a stored procedure as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
        <returns>The <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> that was created contained within a <see cref="T:System.Threading.Tasks.Task" /> object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureProperties" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the stored procedure or the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of stored procedures for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> you tried to create was too large.</description></item></list></exception>
        <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#"><![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.GetScripts();
             StoredProcedureProperties storedProcedure = new StoredProcedureProperties(id, sprocBody);
             CosmosStoredProcedure cosmosStoredProcedure = await scripts.CreateStoredProcedureAsync(storedProcedure);
             
             // Execute the stored procedure
             CosmosItemResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string, string>(testPartitionId, "appendString", "Item as a string: ");
             Console.WriteLine("sprocResponse.Resource");
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateTriggerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; CreateTriggerAsync (Microsoft.Azure.Cosmos.Scripts.TriggerProperties triggerProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; CreateTriggerAsync(class Microsoft.Azure.Cosmos.Scripts.TriggerProperties triggerProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateTriggerAsync(Microsoft.Azure.Cosmos.Scripts.TriggerProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateTriggerAsync : Microsoft.Azure.Cosmos.Scripts.TriggerProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;" Usage="scripts.CreateTriggerAsync (triggerProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerProperties" Type="Microsoft.Azure.Cosmos.Scripts.TriggerProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a trigger as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggerProperties" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new trigger or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of triggers for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> you tried to create was too large.</description></item></list></exception>
        <example>
              This creates a trigger then uses the trigger in a create item.
             <code language="c#"><![CDATA[
             Scripts scripts = this.container.GetScripts();
             CosmosTrigger cosmosTrigger = await scripts.CreateTriggerAsync(
                 new TriggerProperties
                 {
                     Id = "addTax",
                     Body = @"function AddTax() {
                         var item = getContext().getRequest().getBody();
            
                         // calculate the tax.
                         item.tax = item.cost * .15;
            
                         // Update the request -- this is what is going to be inserted.
                         getContext().getRequest().setBody(item);
                     }",
                     TriggerOperation = TriggerOperation.All,
                     TriggerType = TriggerType.Pre
                 });
            
             CosmosItemRequestOptions options = new CosmosItemRequestOptions()
             {
                 PreTriggers = new List<string>() { cosmosTrigger.Id },
             };
            
             // Create a new item with trigger set in the request options
             CosmosItemResponse<dynamic> createdItem = await this.container.Items.CreateItemAsync<dynamic>(item.status, item, options);
             double itemTax = createdItem.Resource.tax;
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="CreateUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; CreateUserDefinedFunctionAsync (Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties userDefinedFunctionProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; CreateUserDefinedFunctionAsync(class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties userDefinedFunctionProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.CreateUserDefinedFunctionAsync(Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member CreateUserDefinedFunctionAsync : Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;" Usage="scripts.CreateUserDefinedFunctionAsync (userDefinedFunctionProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionProperties" Type="Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Creates a user defined function as an asynchronous operation in the Azure Cosmos DB service.
             </summary>
        <returns>A task object representing the service response for the asynchronous operation.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="userDefinedFunctionProperties" /> is not set.</exception>
        <exception cref="T:System.AggregateException">Represents a consolidation of failures that occurred during async processing. Look within InnerExceptions to find the actual exception(s)</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a user defined function are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>400</term><description>BadRequest - This means something was wrong with the request supplied. It is likely that an Id was not supplied for the new user defined function or that the Body was malformed.</description></item><item><term>403</term><description>Forbidden - You have reached your quota of user defined functions for the collection supplied. Contact support to have this quota increased.</description></item><item><term>409</term><description>Conflict - This means a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> with an id matching the id you supplied already existed.</description></item><item><term>413</term><description>RequestEntityTooLarge - This means the body of the <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> you tried to create was too large.</description></item></list></exception>
        <example>
              This creates a user defined function then uses the function in an item query.
             <code language="c#"><![CDATA[
             Scripts scripts = this.container.GetScripts();
             await scripts.UserDefinedFunctions.CreateUserDefinedFunctionAsync(
                 new UserDefinedFunctionProperties 
                 { 
                     Id = "calculateTax", 
                     Body = @"function(amt) { return amt * 0.05; }" 
                 });
            
             QueryDefinition sqlQuery = new QueryDefinition(
                 "SELECT VALUE udf.calculateTax(t.cost) FROM toDoActivity t where t.cost > @expensive and t.status = @status")
                 .UseParameter("@expensive", 9000)
                 .UseParameter("@status", "Done");
            
             FeedIterator<double> setIterator = this.container.Items.GetItemsQueryIterator<double>(
                 sqlQueryDefinition: sqlQuery,
                 partitionKey: "Done");
            
             while (setIterator.HasMoreResults)
             {
                 foreach (var tax in await setIterator.FetchNextSetAsync())
                 {
                     Console.WriteLine(tax);
                 }
             }
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; DeleteStoredProcedureAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; DeleteStoredProcedureAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteStoredProcedureAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteStoredProcedureAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;" Usage="scripts.DeleteStoredProcedureAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The identifier of the Stored Procedure to delete.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.ResponseMessage" /> which will contain the response to the request issued.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> are not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
            This examples gets a reference to an existing stored procedure and deletes it.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            CosmosResponseMessage response = await scripts.DeleteStoredProcedureAsync("taxUdfId");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteTriggerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; DeleteTriggerAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; DeleteTriggerAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteTriggerAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteTriggerAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;" Usage="scripts.DeleteTriggerAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The id of the trigger to delete.</param>
        <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <example>
            This examples gets a reference to an existing trigger and deletes it.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            TriggerResponse response = await scripts.DeleteTriggerAsync("existingId");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="DeleteUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; DeleteUserDefinedFunctionAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; DeleteUserDefinedFunctionAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.DeleteUserDefinedFunctionAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member DeleteUserDefinedFunctionAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;" Usage="scripts.DeleteUserDefinedFunctionAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The id of the user defined function to delete.</param>
        <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Delete a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> which will contain information about the request issued.</returns>
        <remarks>To be added.</remarks>
        <example>
            This examples gets a reference to an existing user defined function and deletes it.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            UserDefinedFunctionResponse response = await this.container.DeleteUserDefinedFunctionAsync("existingId");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureAsync&lt;TInput,TOutput&gt;">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse&lt;TOutput&gt;&gt; ExecuteStoredProcedureAsync&lt;TInput,TOutput&gt; (Microsoft.Azure.Cosmos.PartitionKey partitionKey, string storedProcedureId, TInput input, Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse`1&lt;!!TOutput&gt;&gt; ExecuteStoredProcedureAsync&lt;TInput, TOutput&gt;(class Microsoft.Azure.Cosmos.PartitionKey partitionKey, string storedProcedureId, !!TInput input, class Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ExecuteStoredProcedureAsync``2(Microsoft.Azure.Cosmos.PartitionKey,System.String,``0,Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteStoredProcedureAsync : Microsoft.Azure.Cosmos.PartitionKey * string * 'Input * Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse&lt;'Output&gt;&gt;" Usage="scripts.ExecuteStoredProcedureAsync (partitionKey, storedProcedureId, input, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureExecuteResponse&lt;TOutput&gt;&gt;</ReturnType>
      </ReturnValue>
      <TypeParameters>
        <TypeParameter Name="TInput" />
        <TypeParameter Name="TOutput" />
      </TypeParameters>
      <Parameters>
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="storedProcedureId" Type="System.String" />
        <Parameter Name="input" Type="TInput" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <typeparam name="TInput">The input type that is JSON serializable.</typeparam>
        <typeparam name="TOutput">The return type that is JSON serializable.</typeparam>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Documents.PartitionKey" /></param>
        <param name="storedProcedureId">The identifier of the Stored Procedure to execute.</param>
        <param name="input">The JSON serializable input parameters.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service.
             </summary>
        <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureId" /> or <paramref name="partitionKey" />  are not set.</exception>
        <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#"><![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.GetScripts();
             CosmosStoredProcedure cosmosStoredProcedure = await scripts.CreateStoredProcedureAsync(
                     id: "appendString",
                     body: sprocBody);
             
             // Execute the stored procedure
             StoredProcedureExecuteResponse<string> sprocResponse = await scripts.ExecuteStoredProcedureAsync<string, string>(testPartitionId, "Item as a string: ");
             Console.WriteLine(sprocResponse.Resource);
             /// ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ExecuteStoredProcedureStreamAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt; ExecuteStoredProcedureStreamAsync (Microsoft.Azure.Cosmos.PartitionKey partitionKey, string storedProcedureId, System.IO.Stream streamPayload, Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.ResponseMessage&gt; ExecuteStoredProcedureStreamAsync(class Microsoft.Azure.Cosmos.PartitionKey partitionKey, string storedProcedureId, class System.IO.Stream streamPayload, class Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ExecuteStoredProcedureStreamAsync(Microsoft.Azure.Cosmos.PartitionKey,System.String,System.IO.Stream,Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ExecuteStoredProcedureStreamAsync : Microsoft.Azure.Cosmos.PartitionKey * string * System.IO.Stream * Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;" Usage="scripts.ExecuteStoredProcedureStreamAsync (partitionKey, storedProcedureId, streamPayload, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.ResponseMessage&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="partitionKey" Type="Microsoft.Azure.Cosmos.PartitionKey" />
        <Parameter Name="storedProcedureId" Type="System.String" />
        <Parameter Name="streamPayload" Type="System.IO.Stream" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="partitionKey">The partition key for the item. <see cref="T:Microsoft.Azure.Documents.PartitionKey" /></param>
        <param name="storedProcedureId">The identifier of the Stored Procedure to execute.</param>
        <param name="streamPayload">The stream representing the input for the stored procedure.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Executes a stored procedure against a container as an asynchronous operation in the Azure Cosmos service and obtains a Stream as response.
             </summary>
        <returns>The task object representing the service response for the asynchronous operation which would contain any response set in the stored procedure.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureId" /> or <paramref name="partitionKey" />  are not set.</exception>
        <example>
              This creates and executes a stored procedure that appends a string to the first item returned from the query.
             <code language="c#"><![CDATA[
             string sprocBody = @"function simple(prefix)
                {
                    var collection = getContext().getCollection();
            
                    // Query documents and take 1st item.
                    var isAccepted = collection.queryDocuments(
                    collection.getSelfLink(),
                    'SELECT * FROM root r',
                    function(err, feed, options) {
                        if (err)throw err;
            
                        // Check the feed and if it's empty, set the body to 'no docs found',
                        // Otherwise just take 1st element from the feed.
                        if (!feed || !feed.length) getContext().getResponse().setBody(""no docs found"");
                        else getContext().getResponse().setBody(prefix + JSON.stringify(feed[0]));
                    });
            
                    if (!isAccepted) throw new Error(""The query wasn't accepted by the server. Try again/use continuation token between API and script."");
                }";
                
             Scripts scripts = this.container.GetScripts();
             CosmosStoredProcedure cosmosStoredProcedure = await scripts.CreateStoredProcedureAsync(
                     id: "appendString",
                     body: sprocBody);
             
             // Execute the stored procedure
             CosmosResponseMessage sprocResponse = await scripts.ExecuteStoredProcedureStreamAsync(testPartitionId, streamPayload: stream);
             using (StreamReader sr = new StreamReader(sprocResponse.Content))
             {
                 string stringResponse = await sr.ReadToEndAsync();
                 Console.WriteLine(stringResponse);
              }
             
             /// ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetStoredProceduresIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties&gt; GetStoredProceduresIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties&gt; GetStoredProceduresIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetStoredProceduresIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetStoredProceduresIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As FeedIterator(Of StoredProcedureProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetStoredProceduresIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties&gt;" Usage="scripts.GetStoredProceduresIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the stored procedures for the container
            </summary>
        <returns>An iterator to read through the existing stored procedures.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the stored procedures under the cosmos container
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            FeedIterator<StoredProcedureProperties> setIterator = scripts.GetStoredProcedureIterator();
            while (setIterator.HasMoreResults)
            {
                foreach(StoredProcedureProperties storedProcedure in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(storedProcedure.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetTriggersIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.TriggerProperties&gt; GetTriggersIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;class Microsoft.Azure.Cosmos.Scripts.TriggerProperties&gt; GetTriggersIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetTriggersIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetTriggersIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As FeedIterator(Of TriggerProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetTriggersIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.TriggerProperties&gt;" Usage="scripts.GetTriggersIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.TriggerProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the triggers for the container
            </summary>
        <returns>An iterator to read through the existing triggers.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the triggers under the cosmos container
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            FeedIterator<TriggerProperties> setIterator = scripts.Triggers.GetTriggerIterator();
            while (setIterator.HasMoreResults)
            {
                foreach(TriggerProperties triggerProperties in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(triggerProperties.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="GetUserDefinedFunctionsIterator">
      <MemberSignature Language="C#" Value="public abstract Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties&gt; GetUserDefinedFunctionsIterator (Nullable&lt;int&gt; maxItemCount = null, string continuationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Microsoft.Azure.Cosmos.FeedIterator`1&lt;class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties&gt; GetUserDefinedFunctionsIterator(valuetype System.Nullable`1&lt;int32&gt; maxItemCount, string continuationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.GetUserDefinedFunctionsIterator(System.Nullable{System.Int32},System.String)" />
      <MemberSignature Language="VB.NET" Value="Public MustOverride Function GetUserDefinedFunctionsIterator (Optional maxItemCount As Nullable(Of Integer) = null, Optional continuationToken As String = null) As FeedIterator(Of UserDefinedFunctionProperties)" />
      <MemberSignature Language="F#" Value="abstract member GetUserDefinedFunctionsIterator : Nullable&lt;int&gt; * string -&gt; Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties&gt;" Usage="scripts.GetUserDefinedFunctionsIterator (maxItemCount, continuationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Microsoft.Azure.Cosmos.FeedIterator&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="maxItemCount" Type="System.Nullable&lt;System.Int32&gt;" />
        <Parameter Name="continuationToken" Type="System.String" />
      </Parameters>
      <Docs>
        <param name="maxItemCount">(Optional) The max item count to return as part of the query</param>
        <param name="continuationToken">(Optional) The continuation token in the Azure Cosmos DB service.</param>
        <summary>
            Gets an iterator to go through all the user defined functions for the container
            </summary>
        <returns>An iterator to read through the existing user defined functions.</returns>
        <remarks>To be added.</remarks>
        <example>
            Get an iterator for all the triggers under the cosmos container
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            FeedIterator<UserDefinedFunctionProperties> setIterator = scripts.GetUserDefinedFunctionIterator();
            while (setIterator.HasMoreResults)
            {
                foreach(UserDefinedFunctionProperties usdfProperties in await setIterator.FetchNextSetAsync())
                {
                     Console.WriteLine(udfProperties.Id); 
                }
            }
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; ReadStoredProcedureAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; ReadStoredProcedureAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadStoredProcedureAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadStoredProcedureAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;" Usage="scripts.ReadStoredProcedureAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The identifier of the Stored Procedure to read.</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" />.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="id" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
             This reads an existing stored procedure.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            CosmosStoredProcedure storedProcedure = await scripts.ReadStoredProcedureAsync("ExistingId");
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadTriggerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; ReadTriggerAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; ReadTriggerAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadTriggerAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadTriggerAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;" Usage="scripts.ReadTriggerAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The id of the trigger to read.</param>
        <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> from the Azure Cosmos service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
             This reads an existing trigger
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            TriggerResponse response = await scripts.ReadTriggerAsync("ExistingId");
            TriggerProperties triggerProperties = response;
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReadUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; ReadUserDefinedFunctionAsync (string id, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; ReadUserDefinedFunctionAsync(string id, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReadUserDefinedFunctionAsync(System.String,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReadUserDefinedFunctionAsync : string * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;" Usage="scripts.ReadUserDefinedFunctionAsync (id, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="id" Type="System.String" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="id">The id of the user defined function to read</param>
        <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Reads a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> from the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> containing the read resource record.
            </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
            <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to read did not exist.</description></item><item><term>429</term><description>TooManyRequests - This means you have exceeded the number of request units per second. Consult the DocumentClientException.RetryAfter value to see how long you should wait before retrying this operation.</description></item></list></exception>
        <example>
             This reads an existing user defined function.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            UserDefinedFunctionResponse response = await scripts.ReadUserDefinedFunctionAsync("ExistingId");
            UserDefinedFunctionProperties udfProperties = response;
            ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceStoredProcedureAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; ReplaceStoredProcedureAsync (Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties storedProcedureProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt; ReplaceStoredProcedureAsync(class Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties storedProcedureProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceStoredProcedureAsync(Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceStoredProcedureAsync : Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;" Usage="scripts.ReplaceStoredProcedureAsync (storedProcedureProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.StoredProcedureResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="storedProcedureProperties" Type="Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="storedProcedureProperties">The Stored Procedure to replace</param>
        <param name="requestOptions">(Optional) The options for the stored procedure request <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureRequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" /> in the Azure Cosmos service as an asynchronous operation.
             </summary>
        <returns>
             A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.StoredProcedureProperties" />.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="storedProcedureProperties" /> is not set.</exception>
        <exception cref="T:Microsoft.Azure.Cosmos.CosmosException">This exception can encapsulate many different types of errors. To determine the specific error always look at the StatusCode property. Some common codes you may get when creating a Document are:
             <list type="table"><listheader><term>StatusCode</term><description>Reason for exception</description></listheader><item><term>404</term><description>NotFound - This means the resource you tried to delete did not exist.</description></item></list></exception>
        <example>
             This examples replaces an existing stored procedure.
             <code language="c#"><![CDATA[
             //Updated body
             string body = @"function AddTax() {
                 var item = getContext().getRequest().getBody();
            
                 // Validate/calculate the tax.
                 item.tax = item.cost* .15;
            
                 // Update the request -- this is what is going to be inserted.
                 getContext().getRequest().setBody(item);
             }";
             
             Scripts scripts = this.container.GetScripts();
             CosmosResponseMessage response = await scripts.ReplaceStoredProcedureAsync("testTriggerId", body);
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceTriggerAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; ReplaceTriggerAsync (Microsoft.Azure.Cosmos.Scripts.TriggerProperties triggerProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt; ReplaceTriggerAsync(class Microsoft.Azure.Cosmos.Scripts.TriggerProperties triggerProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceTriggerAsync(Microsoft.Azure.Cosmos.Scripts.TriggerProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceTriggerAsync : Microsoft.Azure.Cosmos.Scripts.TriggerProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;" Usage="scripts.ReplaceTriggerAsync (triggerProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.TriggerResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="triggerProperties" Type="Microsoft.Azure.Cosmos.Scripts.TriggerProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="triggerProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the trigger request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
             Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> in the Azure Cosmos service as an asynchronous operation.
             </summary>
        <returns>
             A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.TriggerProperties" /> containing the updated resource record.
             </returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">If <paramref name="triggerProperties" /> is not set.</exception>
        <example>
             This examples replaces an existing trigger.
             <code language="c#"><![CDATA[
             TriggerProperties triggerProperties = new TriggerProperties
             {
                 Id = "testTriggerId",
                 Body = @"function AddTax() {
                     var item = getContext().getRequest().getBody();
            
                     // Validate/calculate the tax.
                     item.tax = item.cost* .15;
            
                     // Update the request -- this is what is going to be inserted.
                     getContext().getRequest().setBody(item);
                 }",
                 TriggerOperation = TriggerOperation.All,
                 TriggerType = TriggerType.Post
             };
             
             Scripts scripts = this.container.GetScripts();
             TriggerResponse response = await scripts.ReplaceTriggerAsync(triggerSettigs);
             ]]></code></example>
      </Docs>
    </Member>
    <Member MemberName="ReplaceUserDefinedFunctionAsync">
      <MemberSignature Language="C#" Value="public abstract System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; ReplaceUserDefinedFunctionAsync (Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties userDefinedFunctionProperties, Microsoft.Azure.Cosmos.RequestOptions requestOptions = null, System.Threading.CancellationToken cancellationToken = null);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt; ReplaceUserDefinedFunctionAsync(class Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties userDefinedFunctionProperties, class Microsoft.Azure.Cosmos.RequestOptions requestOptions, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Microsoft.Azure.Cosmos.Scripts.Scripts.ReplaceUserDefinedFunctionAsync(Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties,Microsoft.Azure.Cosmos.RequestOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="F#" Value="abstract member ReplaceUserDefinedFunctionAsync : Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties * Microsoft.Azure.Cosmos.RequestOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;" Usage="scripts.ReplaceUserDefinedFunctionAsync (userDefinedFunctionProperties, requestOptions, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Microsoft.Azure.Cosmos.Client</AssemblyName>
        <AssemblyVersion>3.0.0.18</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="userDefinedFunctionProperties" Type="Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" />
        <Parameter Name="requestOptions" Type="Microsoft.Azure.Cosmos.RequestOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="userDefinedFunctionProperties">The <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> object.</param>
        <param name="requestOptions">(Optional) The options for the user defined function request <see cref="T:Microsoft.Azure.Cosmos.RequestOptions" /></param>
        <param name="cancellationToken">(Optional) <see cref="T:System.Threading.CancellationToken" /> representing request cancellation.</param>
        <summary>
            Replaces a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> in the Azure Cosmos DB service as an asynchronous operation.
            </summary>
        <returns>
            A <see cref="T:System.Threading.Tasks.Task" /> containing a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionResponse" /> which wraps a <see cref="T:Microsoft.Azure.Cosmos.Scripts.UserDefinedFunctionProperties" /> containing the updated resource record.
            </returns>
        <remarks>To be added.</remarks>
        <example>
            This examples replaces an existing user defined function.
            <code language="c#"><![CDATA[
            Scripts scripts = this.container.GetScripts();
            UserDefinedFunctionProperties udfProperties = new UserDefinedFunctionProperties
            {
                Id = "testUserDefinedFunId",
                Body = "function(amt) { return amt * 0.15; }",
            };
            
            UserDefinedFunctionResponse response = await scripts.ReplaceUserDefinedFunctionAsync(udfProperties);
            UserDefinedFunctionProperties udfProperties = response;
            ]]></code></example>
      </Docs>
    </Member>
  </Members>
</Type>