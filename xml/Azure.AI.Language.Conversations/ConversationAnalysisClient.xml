<Type Name="ConversationAnalysisClient" FullName="Azure.AI.Language.Conversations.ConversationAnalysisClient">
  <TypeSignature Language="C#" Value="public class ConversationAnalysisClient" />
  <TypeSignature Language="ILAsm" Value=".class public auto ansi beforefieldinit ConversationAnalysisClient extends System.Object" />
  <TypeSignature Language="DocId" Value="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" />
  <TypeSignature Language="VB.NET" Value="Public Class ConversationAnalysisClient" />
  <TypeSignature Language="F#" Value="type ConversationAnalysisClient = class" />
  <AssemblyInfo>
    <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
    <AssemblyVersion>1.0.0.0</AssemblyVersion>
    <AssemblyVersion>1.1.0.0</AssemblyVersion>
  </AssemblyInfo>
  <Base>
    <BaseTypeName>System.Object</BaseTypeName>
  </Base>
  <Interfaces />
  <Docs>
    <summary>
            The <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" /> allows you analyze conversations.
            </summary>
    <remarks>To be added.</remarks>
  </Docs>
  <Members>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="protected ConversationAnalysisClient ();" />
      <MemberSignature Language="ILAsm" Value=".method familyhidebysig specialname rtspecialname instance void .ctor() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor" />
      <MemberSignature Language="VB.NET" Value="Protected Sub New ()" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters />
      <Docs>
        <summary>
            Protected constructor to allow mocking.
            </summary>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
      </Parameters>
      <Docs>
        <param name="endpoint">The Conversation Analysis endpoint on which to operate.</param>
        <param name="credential">An <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests to the <paramref name="endpoint" />.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName=".ctor">
      <MemberSignature Language="C#" Value="public ConversationAnalysisClient (Uri endpoint, Azure.AzureKeyCredential credential, Azure.AI.Language.Conversations.ConversationAnalysisClientOptions options);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig specialname rtspecialname instance void .ctor(class System.Uri endpoint, class Azure.AzureKeyCredential credential, class Azure.AI.Language.Conversations.ConversationAnalysisClientOptions options) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.#ctor(System.Uri,Azure.AzureKeyCredential,Azure.AI.Language.Conversations.ConversationAnalysisClientOptions)" />
      <MemberSignature Language="VB.NET" Value="Public Sub New (endpoint As Uri, credential As AzureKeyCredential, options As ConversationAnalysisClientOptions)" />
      <MemberSignature Language="F#" Value="new Azure.AI.Language.Conversations.ConversationAnalysisClient : Uri * Azure.AzureKeyCredential * Azure.AI.Language.Conversations.ConversationAnalysisClientOptions -&gt; Azure.AI.Language.Conversations.ConversationAnalysisClient" Usage="new Azure.AI.Language.Conversations.ConversationAnalysisClient (endpoint, credential, options)" />
      <MemberType>Constructor</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <Parameters>
        <Parameter Name="endpoint" Type="System.Uri" />
        <Parameter Name="credential" Type="Azure.AzureKeyCredential" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.ConversationAnalysisClientOptions" />
      </Parameters>
      <Docs>
        <param name="endpoint">The Conversation Analysis endpoint on which to operate.</param>
        <param name="credential">An <see cref="T:Azure.AzureKeyCredential" /> used to authenticate requests to the <paramref name="endpoint" />.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClientOptions" /> to customize requests sent to the endpoint.</param>
        <summary>
            Initializes a new instance of the <see cref="T:Azure.AI.Language.Conversations.ConversationAnalysisClient" /> class.
            </summary>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="endpoint" /> or <paramref name="credential" /> is null.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response AnalyzeConversation (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response AnalyzeConversation(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (content As RequestContent, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response&#xA;override this.AnalyzeConversation : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Response" Usage="conversationAnalysisClient.AnalyzeConversation (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              kind: "Conversation" (required)
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              kind: "ConversationResult"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt; AnalyzeConversation (string utterance, Azure.AI.Language.Conversations.ConversationsProject project, Azure.AI.Language.Conversations.AnalyzeConversationOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt; AnalyzeConversation(string utterance, class Azure.AI.Language.Conversations.ConversationsProject project, class Azure.AI.Language.Conversations.AnalyzeConversationOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversation(System.String,Azure.AI.Language.Conversations.ConversationsProject,Azure.AI.Language.Conversations.AnalyzeConversationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversation (utterance As String, project As ConversationsProject, Optional options As AnalyzeConversationOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Response(Of AnalyzeConversationTaskResult)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversation : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&#xA;override this.AnalyzeConversation : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;" Usage="conversationAnalysisClient.AnalyzeConversation (utterance, project, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utterance" Type="System.String" />
        <Parameter Name="project" Type="Azure.AI.Language.Conversations.ConversationsProject" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.AnalyzeConversationOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utterance">The conversation utterance to be analyzed.</param>
        <param name="project">The <see cref="T:Azure.AI.Language.Conversations.ConversationsProject" /> used for conversation analysis.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationOptions" /> with additional query options.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="utterance" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="utterance" /> or <paramref name="project" /> or is null.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; AnalyzeConversationAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; AnalyzeConversationAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.AnalyzeConversationAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Analyzes the input conversation utterance. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              kind: "Conversation" (required)
            }
            </code>
            Schema for <c>Response Body</c>:
            <code>{
              kind: "ConversationResult"
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="AnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt; AnalyzeConversationAsync (string utterance, Azure.AI.Language.Conversations.ConversationsProject project, Azure.AI.Language.Conversations.AnalyzeConversationOptions options = default, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt; AnalyzeConversationAsync(string utterance, class Azure.AI.Language.Conversations.ConversationsProject project, class Azure.AI.Language.Conversations.AnalyzeConversationOptions options, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.AnalyzeConversationAsync(System.String,Azure.AI.Language.Conversations.ConversationsProject,Azure.AI.Language.Conversations.AnalyzeConversationOptions,System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function AnalyzeConversationAsync (utterance As String, project As ConversationsProject, Optional options As AnalyzeConversationOptions = Nothing, Optional cancellationToken As CancellationToken = Nothing) As Task(Of Response(Of AnalyzeConversationTaskResult))" />
      <MemberSignature Language="F#" Value="abstract member AnalyzeConversationAsync : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;&#xA;override this.AnalyzeConversationAsync : string * Azure.AI.Language.Conversations.ConversationsProject * Azure.AI.Language.Conversations.AnalyzeConversationOptions * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;" Usage="conversationAnalysisClient.AnalyzeConversationAsync (utterance, project, options, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.0.0.0</AssemblyVersion>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&lt;Azure.AI.Language.Conversations.AnalyzeConversationTaskResult&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="utterance" Type="System.String" />
        <Parameter Name="project" Type="Azure.AI.Language.Conversations.ConversationsProject" />
        <Parameter Name="options" Type="Azure.AI.Language.Conversations.AnalyzeConversationOptions" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="utterance">The conversation utterance to be analyzed.</param>
        <param name="project">The <see cref="T:Azure.AI.Language.Conversations.ConversationsProject" /> used for conversation analysis.</param>
        <param name="options">Optional <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationOptions" /> with additional query options.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentException">
          <paramref name="utterance" /> is an empty string.</exception>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="utterance" /> or <paramref name="project" /> or is null.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
      </Docs>
    </Member>
    <Member MemberName="GetAuthorizationHeader">
      <MemberSignature Language="C#" Value="public static string GetAuthorizationHeader ();" />
      <MemberSignature Language="ILAsm" Value=".method public static hidebysig string GetAuthorizationHeader() cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.GetAuthorizationHeader" />
      <MemberSignature Language="VB.NET" Value="Public Shared Function GetAuthorizationHeader () As String" />
      <MemberSignature Language="F#" Value="static member GetAuthorizationHeader : unit -&gt; string" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.GetAuthorizationHeader " />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.String</ReturnType>
      </ReturnValue>
      <Parameters />
      <Docs>
        <summary> returns the authorization header. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatus">
      <MemberSignature Language="C#" Value="public virtual Azure.Response JobStatus (Guid jobId, bool? showStats = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Response JobStatus(valuetype System.Guid jobId, valuetype System.Nullable`1&lt;bool&gt; showStats, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.JobStatus(System.Guid,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function JobStatus (jobId As Guid, Optional showStats As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Response" />
      <MemberSignature Language="F#" Value="abstract member JobStatus : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response&#xA;override this.JobStatus : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; Azure.Response" Usage="conversationAnalysisClient.JobStatus (jobId, showStats, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Response</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Guid" />
        <Parameter Name="showStats" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="showStats"> (Optional) if set to true, response will contain request and document level statistics. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              displayName: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: JobStateJobId,
              lastUpdateDateTime: string (ISO 8601 Format),
              status: JobState,
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ],
              nextLink: string,
              tasks: {
                completed: number,
                failed: number,
                inProgress: number,
                total: number,
                items: [
                  {
                    lastUpdateDateTime: string (ISO 8601 Format),
                    status: TaskState,
                    taskName: string,
                    kind: "conversationalSummarizationResults" | "conversationalPIIResults"
                  }
                ]
              },
              statistics: {
                transactionsCount: number,
                conversationsCount: number,
                validConversationsCount: number,
                erroneousConversationsCount: number
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="JobStatusAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Response&gt; JobStatusAsync (Guid jobId, bool? showStats = default, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Response&gt; JobStatusAsync(valuetype System.Guid jobId, valuetype System.Nullable`1&lt;bool&gt; showStats, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.JobStatusAsync(System.Guid,System.Nullable{System.Boolean},Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function JobStatusAsync (jobId As Guid, Optional showStats As Nullable(Of Boolean) = Nothing, Optional context As RequestContext = Nothing) As Task(Of Response)" />
      <MemberSignature Language="F#" Value="abstract member JobStatusAsync : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;&#xA;override this.JobStatusAsync : Guid * Nullable&lt;bool&gt; * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Response&gt;" Usage="conversationAnalysisClient.JobStatusAsync (jobId, showStats, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Response&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="jobId" Type="System.Guid" />
        <Parameter Name="showStats" Type="System.Nullable&lt;System.Boolean&gt;" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="jobId"> Job ID. </param>
        <param name="showStats"> (Optional) if set to true, response will contain request and document level statistics. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Get the status of an analysis job. A job may consist of one or more tasks. Once all tasks are succeeded, the job will transition to the succeeded state and results will be available for each task. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Response Body</c>:
            <code>{
              displayName: string,
              createdDateTime: string (ISO 8601 Format),
              expirationDateTime: string (ISO 8601 Format),
              jobId: JobStateJobId,
              lastUpdateDateTime: string (ISO 8601 Format),
              status: JobState,
              errors: [
                {
                  code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                  message: string,
                  target: string,
                  details: [Error],
                  innererror: {
                    code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                    message: string,
                    details: Dictionary&lt;string, string&gt;,
                    target: string,
                    innererror: InnerErrorModel
                  }
                }
              ],
              nextLink: string,
              tasks: {
                completed: number,
                failed: number,
                inProgress: number,
                total: number,
                items: [
                  {
                    lastUpdateDateTime: string (ISO 8601 Format),
                    status: TaskState,
                    taskName: string,
                    kind: "conversationalSummarizationResults" | "conversationalPIIResults"
                  }
                ]
              },
              statistics: {
                transactionsCount: number,
                conversationsCount: number,
                validConversationsCount: number,
                erroneousConversationsCount: number
              }
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
      </Docs>
    </Member>
    <Member MemberName="Pipeline">
      <MemberSignature Language="C#" Value="public virtual Azure.Core.Pipeline.HttpPipeline Pipeline { get; }" />
      <MemberSignature Language="ILAsm" Value=".property instance class Azure.Core.Pipeline.HttpPipeline Pipeline" />
      <MemberSignature Language="DocId" Value="P:Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberSignature Language="VB.NET" Value="Public Overridable ReadOnly Property Pipeline As HttpPipeline" />
      <MemberSignature Language="F#" Value="member this.Pipeline : Azure.Core.Pipeline.HttpPipeline" Usage="Azure.AI.Language.Conversations.ConversationAnalysisClient.Pipeline" />
      <MemberType>Property</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Core.Pipeline.HttpPipeline</ReturnType>
      </ReturnValue>
      <Docs>
        <summary> The HTTP pipeline for sending and receiving REST requests and responses. </summary>
        <value>To be added.</value>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="StartAnalyzeConversation">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt; StartAnalyzeConversation (System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; input, System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; tasks, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt; StartAnalyzeConversation(class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; input, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.StartAnalyzeConversation(System.Collections.Generic.IEnumerable{Azure.AI.Language.Conversations.Models.GeneratedConversation},System.Collections.Generic.IEnumerable{Azure.AI.Language.Conversations.AnalyzeConversationLROTask},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartAnalyzeConversation (input As IEnumerable(Of GeneratedConversation), tasks As IEnumerable(Of AnalyzeConversationLROTask), Optional cancellationToken As CancellationToken = Nothing) As Operation(Of AnalyzeConversationJobState)" />
      <MemberSignature Language="F#" Value="abstract member StartAnalyzeConversation : seq&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; * seq&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&#xA;override this.StartAnalyzeConversation : seq&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; * seq&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; * System.Threading.CancellationToken -&gt; Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;" Usage="conversationAnalysisClient.StartAnalyzeConversation (input, tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt;" />
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="input">The <see cref="T:Azure.AI.Language.Conversations.Models.GeneratedConversation" /> used for tasks input.</param>
        <param name="tasks">
          <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationLROTask" /> defines the tasks to be used.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> or <paramref name="tasks" /> or is null.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="input" /> or <paramref name="tasks" /> is empty.</exception>
      </Docs>
    </Member>
    <Member MemberName="StartAnalyzeConversationAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt; StartAnalyzeConversationAsync (System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; input, System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; tasks, System.Threading.CancellationToken cancellationToken = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt; StartAnalyzeConversationAsync(class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; input, class System.Collections.Generic.IEnumerable`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; tasks, valuetype System.Threading.CancellationToken cancellationToken) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.StartAnalyzeConversationAsync(System.Collections.Generic.IEnumerable{Azure.AI.Language.Conversations.Models.GeneratedConversation},System.Collections.Generic.IEnumerable{Azure.AI.Language.Conversations.AnalyzeConversationLROTask},System.Threading.CancellationToken)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function StartAnalyzeConversationAsync (input As IEnumerable(Of GeneratedConversation), tasks As IEnumerable(Of AnalyzeConversationLROTask), Optional cancellationToken As CancellationToken = Nothing) As Task(Of Operation(Of AnalyzeConversationJobState))" />
      <MemberSignature Language="F#" Value="abstract member StartAnalyzeConversationAsync : seq&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; * seq&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;&#xA;override this.StartAnalyzeConversationAsync : seq&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt; * seq&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt; * System.Threading.CancellationToken -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;" Usage="conversationAnalysisClient.StartAnalyzeConversationAsync (input, tasks, cancellationToken)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="input" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.Models.GeneratedConversation&gt;" />
        <Parameter Name="tasks" Type="System.Collections.Generic.IEnumerable&lt;Azure.AI.Language.Conversations.AnalyzeConversationLROTask&gt;" />
        <Parameter Name="cancellationToken" Type="System.Threading.CancellationToken" />
      </Parameters>
      <Docs>
        <param name="input">The <see cref="T:Azure.AI.Language.Conversations.Models.GeneratedConversation" /> used for tasks input.</param>
        <param name="tasks">
          <see cref="T:Azure.AI.Language.Conversations.AnalyzeConversationLROTask" /> defines the tasks to be used.</param>
        <param name="cancellationToken">An optional <see cref="T:System.Threading.CancellationToken" /> to cancel the request.</param>
        <summary>Analyzes a conversational utterance.</summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="input" /> or <paramref name="tasks" /> is null.</exception>
        <exception cref="T:System.ArgumentException">
          <paramref name="input" /> or <paramref name="tasks" /> is empty.</exception>
        <exception cref="T:Azure.RequestFailedException">The service returned an error. The exception contains details of the service error.</exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt; SubmitJob (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt; SubmitJob(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.SubmitJob(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitJob (content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of AnalyzeConversationJobState)" />
      <MemberSignature Language="F#" Value="abstract member SubmitJob : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&#xA;override this.SubmitJob : Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;" Usage="conversationAnalysisClient.SubmitJob (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitJob">
      <MemberSignature Language="C#" Value="public virtual Azure.Operation&lt;BinaryData&gt; SubmitJob (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class Azure.Operation`1&lt;class System.BinaryData&gt; SubmitJob(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.SubmitJob(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitJob (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Operation(Of BinaryData)" />
      <MemberSignature Language="F#" Value="abstract member SubmitJob : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;&#xA;override this.SubmitJob : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; Azure.Operation&lt;BinaryData&gt;" Usage="conversationAnalysisClient.SubmitJob (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>Azure.Operation&lt;System.BinaryData&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              displayName: string,
              analysisInput: {
                conversations: [
                  {
                    id: string (required),
                    language: string (required),
                    modality: "transcript" | "text" (required),
                    domain: "finance" | "healthcare" | "generic"
                  }
                ] (required)
              } (required),
              tasks: [
                {
                  taskName: string,
                  kind: "ConversationalPIITask" | "ConversationalSummarizationTask" (required)
                }
              ] (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
    <Member MemberName="SubmitJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt; SubmitJobAsync (Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt; SubmitJobAsync(class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.SubmitJobAsync(Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitJobAsync (content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of AnalyzeConversationJobState))" />
      <MemberSignature Language="F#" Value="abstract member SubmitJobAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;&#xA;override this.SubmitJobAsync : Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;" Usage="conversationAnalysisClient.SubmitJobAsync (content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;Azure.AI.Language.Conversations.AnalyzeConversationJobState&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns>To be added.</returns>
        <remarks>To be added.</remarks>
      </Docs>
    </Member>
    <Member MemberName="SubmitJobAsync">
      <MemberSignature Language="C#" Value="public virtual System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt; SubmitJobAsync (Azure.WaitUntil waitUntil, Azure.Core.RequestContent content, Azure.RequestContext context = default);" />
      <MemberSignature Language="ILAsm" Value=".method public hidebysig newslot virtual instance class System.Threading.Tasks.Task`1&lt;class Azure.Operation`1&lt;class System.BinaryData&gt;&gt; SubmitJobAsync(valuetype Azure.WaitUntil waitUntil, class Azure.Core.RequestContent content, class Azure.RequestContext context) cil managed" />
      <MemberSignature Language="DocId" Value="M:Azure.AI.Language.Conversations.ConversationAnalysisClient.SubmitJobAsync(Azure.WaitUntil,Azure.Core.RequestContent,Azure.RequestContext)" />
      <MemberSignature Language="VB.NET" Value="Public Overridable Function SubmitJobAsync (waitUntil As WaitUntil, content As RequestContent, Optional context As RequestContext = Nothing) As Task(Of Operation(Of BinaryData))" />
      <MemberSignature Language="F#" Value="abstract member SubmitJobAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;&#xA;override this.SubmitJobAsync : Azure.WaitUntil * Azure.Core.RequestContent * Azure.RequestContext -&gt; System.Threading.Tasks.Task&lt;Azure.Operation&lt;BinaryData&gt;&gt;" Usage="conversationAnalysisClient.SubmitJobAsync (waitUntil, content, context)" />
      <MemberType>Method</MemberType>
      <AssemblyInfo>
        <AssemblyName>Azure.AI.Language.Conversations</AssemblyName>
        <AssemblyVersion>1.1.0.0</AssemblyVersion>
      </AssemblyInfo>
      <ReturnValue>
        <ReturnType>System.Threading.Tasks.Task&lt;Azure.Operation&lt;System.BinaryData&gt;&gt;</ReturnType>
      </ReturnValue>
      <Parameters>
        <Parameter Name="waitUntil" Type="Azure.WaitUntil" />
        <Parameter Name="content" Type="Azure.Core.RequestContent" />
        <Parameter Name="context" Type="Azure.RequestContext" />
      </Parameters>
      <Docs>
        <param name="waitUntil">
          <see cref="F:Azure.WaitUntil.Completed" /> if the method should wait to return until the long-running operation has completed on the service; <see cref="F:Azure.WaitUntil.Started" /> if it should return after starting the operation. For more information on long-running operations, please see <see href="https://github.com/Azure/azure-sdk-for-net/blob/main/sdk/core/Azure.Core/samples/LongRunningOperations.md"> Azure.Core Long-Running Operation samples</see>. </param>
        <param name="content"> The content to send as the body of the request. </param>
        <param name="context"> The request context, which can override default behaviors on the request on a per-call basis. </param>
        <summary> Submit a collection of conversations for analysis. Specify one or more unique tasks to be executed. </summary>
        <returns>To be added.</returns>
        <remarks>
            Schema for <c>Request Body</c>:
            <code>{
              displayName: string,
              analysisInput: {
                conversations: [
                  {
                    id: string (required),
                    language: string (required),
                    modality: "transcript" | "text" (required),
                    domain: "finance" | "healthcare" | "generic"
                  }
                ] (required)
              } (required),
              tasks: [
                {
                  taskName: string,
                  kind: "ConversationalPIITask" | "ConversationalSummarizationTask" (required)
                }
              ] (required)
            }
            </code>
            Schema for <c>Response Error</c>:
            <code>{
              error: {
                code: "InvalidRequest" | "InvalidArgument" | "Unauthorized" | "Forbidden" | "NotFound" | "ProjectNotFound" | "OperationNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchIndexNotFound" | "TooManyRequests" | "AzureCognitiveSearchThrottling" | "AzureCognitiveSearchIndexLimitReached" | "InternalServerError" | "ServiceUnavailable",
                message: string,
                target: string,
                details: [Error],
                innererror: {
                  code: "InvalidRequest" | "InvalidParameterValue" | "KnowledgeBaseNotFound" | "AzureCognitiveSearchNotFound" | "AzureCognitiveSearchThrottling" | "ExtractionFailure" | "InvalidRequestBodyFormat" | "EmptyRequest" | "MissingInputDocuments" | "InvalidDocument" | "ModelVersionIncorrect" | "InvalidDocumentBatch" | "UnsupportedLanguageCode" | "InvalidCountryHint",
                  message: string,
                  details: Dictionary&lt;string, string&gt;,
                  target: string,
                  innererror: InnerErrorModel
                }
              }
            }
            </code></remarks>
        <exception cref="T:System.ArgumentNullException">
          <paramref name="content" /> is null. </exception>
      </Docs>
    </Member>
  </Members>
</Type>
