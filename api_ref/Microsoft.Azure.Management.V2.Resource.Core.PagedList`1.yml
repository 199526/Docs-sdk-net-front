items:
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  commentId: T:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  id: PagedList`1
  parent: Microsoft.Azure.Management.V2.Resource.Core
  children:
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(IPage{`0},System.Func{System.String,IPage{`0}})
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Count
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.CurrentPage
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.EmptyPagedList``1
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetEnumerator
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetNextPage
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.HasNextPage
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Item(System.Int32)
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadAll
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadNextPage
  - Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.System#Collections#IEnumerable#GetEnumerator
  langs:
  - csharp
  - vb
  name: PagedList<T>
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>
  type: Class
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: PagedList
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 10
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: 'public class PagedList<T> : IReadOnlyList<T>, IReadOnlyCollection<T>, IEnumerable<T>, IEnumerable'
    content.vb: >-
      Public Class PagedList(Of T)
          Implements IReadOnlyList(Of T), IReadOnlyCollection(Of T), IEnumerable(Of T), IEnumerable
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.Collections.Generic.IReadOnlyList{{T}}
  - System.Collections.Generic.IReadOnlyCollection{{T}}
  - System.Collections.Generic.IEnumerable{{T}}
  - System.Collections.IEnumerable
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T)
  name.vb: PagedList(Of T)
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.CurrentPage
  commentId: P:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.CurrentPage
  id: CurrentPage
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: CurrentPage
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.CurrentPage
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: CurrentPage
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 15
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public IPage<T> CurrentPage { get; }
    content.vb: Public ReadOnly Property CurrentPage As IPage(Of T)
    parameters: []
    return:
      type: IPage{{T}}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).CurrentPage
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Count
  commentId: P:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Count
  id: Count
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: Count
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.Count
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Count
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 17
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
  implements:
  - System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).Count
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Item(System.Int32)
  commentId: P:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: Item[Int32]
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.Item[System.Int32]
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: this[]
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public T this[int index] { get; }
    content.vb: Public ReadOnly Property Item(index As Integer) As T
    parameters:
    - id: index
      type: System.Int32
    return:
      type: '{T}'
  implements:
  - System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(IPage{`0},System.Func{System.String,IPage{`0}})
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(IPage{`0},System.Func{System.String,IPage{`0}})
  id: '#ctor(IPage{`0},System.Func{System.String,IPage{`0}})'
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: PagedList(IPage<T>, Func<String, IPage<T>>)
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.PagedList(IPage<T>, System.Func<System.String, IPage<T>>)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 39
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public PagedList(IPage<T> firstPage, Func<string, IPage<T>> getNextPage)
    content.vb: Public Sub New(firstPage As IPage(Of T), getNextPage As Func(Of String, IPage(Of T)))
    parameters:
    - id: firstPage
      type: IPage{{T}}
    - id: getNextPage
      type: System.Func{System.String,IPage{{T}}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).PagedList(IPage(Of T), System.Func(Of System.String, IPage(Of T)))
  name.vb: PagedList(IPage(Of T), Func(Of String, IPage(Of T)))
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.#ctor(System.Collections.Generic.IEnumerable{`0})
  id: '#ctor(System.Collections.Generic.IEnumerable{`0})'
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: PagedList(IEnumerable<T>)
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.PagedList(System.Collections.Generic.IEnumerable<T>)
  type: Constructor
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 47
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public PagedList(IEnumerable<T> enumerable)
    content.vb: Public Sub New(enumerable As IEnumerable(Of T))
    parameters:
    - id: enumerable
      type: System.Collections.Generic.IEnumerable{{T}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).PagedList(System.Collections.Generic.IEnumerable(Of T))
  name.vb: PagedList(IEnumerable(Of T))
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetEnumerator
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetEnumerator
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public IEnumerator<T> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of T)
    return:
      type: System.Collections.Generic.IEnumerator{{T}}
  implements:
  - System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).GetEnumerator()
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.System#Collections#IEnumerable#GetEnumerator
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.System#Collections#IEnumerable#GetEnumerator
  id: System#Collections#IEnumerable#GetEnumerator
  isEii: true
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: IEnumerable.GetEnumerator()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.System.Collections.IEnumerable.GetEnumerator()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: System.Collections.IEnumerable.GetEnumerator
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 55
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: IEnumerator IEnumerable.GetEnumerator()
    content.vb: Function System.Collections.IEnumerable.GetEnumerator As IEnumerator Implements IEnumerable.GetEnumerator
    return:
      type: System.Collections.IEnumerator
  implements:
  - System.Collections.IEnumerable.GetEnumerator
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.HasNextPage
  commentId: P:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.HasNextPage
  id: HasNextPage
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: HasNextPage
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.HasNextPage
  type: Property
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: HasNextPage
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 60
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public bool HasNextPage { get; }
    content.vb: Public ReadOnly Property HasNextPage As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).HasNextPage
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetNextPage
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.GetNextPage
  id: GetNextPage
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: GetNextPage()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.GetNextPage()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: GetNextPage
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public IPage<T> GetNextPage()
    content.vb: Public Function GetNextPage As IPage(Of T)
    return:
      type: IPage{{T}}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).GetNextPage()
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadNextPage
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadNextPage
  id: LoadNextPage
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: LoadNextPage()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.LoadNextPage()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LoadNextPage
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 77
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public bool LoadNextPage()
    content.vb: Public Function LoadNextPage As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).LoadNextPage()
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadAll
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.LoadAll
  id: LoadAll
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: LoadAll()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.LoadAll()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: LoadAll
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public void LoadAll()
    content.vb: Public Sub LoadAll
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).LoadAll()
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.EmptyPagedList``1
  commentId: M:Microsoft.Azure.Management.V2.Resource.Core.PagedList`1.EmptyPagedList``1
  id: EmptyPagedList``1
  parent: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  langs:
  - csharp
  - vb
  name: EmptyPagedList<U>()
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>.EmptyPagedList<U>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
      branch: 103a27efa2658342d95a385715c4448ba1b34efa
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: EmptyPagedList
    path: src/ResourceManagement/Resource/Microsoft.Azure.Management.V2.Resource/Core/PagedList.cs
    startLine: 157
  assemblies:
  - Microsoft.Azure.Management.V2.Resource
  packages:
  - Microsoft.Azure.Management.V2.Resource(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.V2.Resource.Core
  syntax:
    content: public static PagedList<U> EmptyPagedList<U>()
    content.vb: Public Shared Function EmptyPagedList(Of U) As PagedList(Of U)
    typeParameters:
    - id: U
    return:
      type: Microsoft.Azure.Management.V2.Resource.Core.PagedList{{U}}
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T).EmptyPagedList(Of U)()
  name.vb: EmptyPagedList(Of U)()
references:
- uid: Microsoft.Azure.Management.V2.Resource.Core
  isExternal: false
  name: Microsoft.Azure.Management.V2.Resource.Core
  fullName: Microsoft.Azure.Management.V2.Resource.Core
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Collections.Generic.IReadOnlyList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyList`1
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IReadOnlyCollection`1
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Collections.Generic.IReadOnlyList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyList<T>
  fullName: System.Collections.Generic.IReadOnlyList<T>
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T)
  name.vb: IReadOnlyList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1
    name: IReadOnlyList
    fullName: System.Collections.Generic.IReadOnlyList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IReadOnlyCollection`1
  parent: System.Collections.Generic
  isExternal: true
  name: IReadOnlyCollection<T>
  fullName: System.Collections.Generic.IReadOnlyCollection<T>
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T)
  name.vb: IReadOnlyCollection(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyCollection`1
    name: IReadOnlyCollection
    fullName: System.Collections.Generic.IReadOnlyCollection
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: IPage{{T}}
  definition: IPage`1
  name: IPage<T>
  fullName: IPage<T>
  fullname.vb: IPage(Of T)
  name.vb: IPage(Of T)
  spec.csharp:
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: IPage`1
  isExternal: true
  name: IPage<>
  fullName: IPage<>
  fullname.vb: IPage(Of )
  name.vb: IPage(Of )
  spec.csharp:
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
- uid: System.Collections.Generic.IReadOnlyCollection{{T}}.Count
  parent: System.Collections.Generic.IReadOnlyCollection{{T}}
  definition: System.Collections.Generic.IReadOnlyCollection`1.Count
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Collections.Generic.IReadOnlyCollection`1.Count
  parent: System.Collections.Generic.IReadOnlyCollection`1
  isExternal: true
  name: Count
  fullName: System.Collections.Generic.IReadOnlyCollection<T>.Count
  fullname.vb: System.Collections.Generic.IReadOnlyCollection(Of T).Count
- uid: System.Collections.Generic.IReadOnlyList{{T}}.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList{{T}}
  definition: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
  parent: System.Collections.Generic.IReadOnlyList`1
  isExternal: true
  name: Item[Int32]
  fullName: System.Collections.Generic.IReadOnlyList<T>.Item[System.Int32]
  fullname.vb: System.Collections.Generic.IReadOnlyList(Of T).Item(System.Int32)
  name.vb: Item(Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList<T>.Item
    isExternal: true
  - name: '['
    fullName: '['
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: ']'
    fullName: ']'
  spec.vb:
  - uid: System.Collections.Generic.IReadOnlyList`1.Item(System.Int32)
    name: Item
    fullName: System.Collections.Generic.IReadOnlyList(Of T).Item
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Func{System.String,IPage{{T}}}
  parent: System
  definition: System.Func`2
  name: Func<String, IPage<T>>
  fullName: System.Func<System.String, IPage<T>>
  fullname.vb: System.Func(Of System.String, IPage(Of T))
  name.vb: Func(Of String, IPage(Of T))
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: IPage`1
    name: IPage
    fullName: IPage
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{{T}}.GetEnumerator
  parent: System.Collections.Generic.IEnumerable{{T}}
  definition: System.Collections.Generic.IEnumerable`1.GetEnumerator
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerator`1
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
  parent: System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator()
  fullname.vb: System.Collections.Generic.IEnumerable(Of T).GetEnumerator()
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable<T>.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.Generic.IEnumerable(Of T).GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerator`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerator<T>
  fullName: System.Collections.Generic.IEnumerator<T>
  fullname.vb: System.Collections.Generic.IEnumerator(Of T)
  name.vb: IEnumerator(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerator`1
    name: IEnumerator
    fullName: System.Collections.Generic.IEnumerator
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable.GetEnumerator
  parent: System.Collections.IEnumerable
  isExternal: true
  name: GetEnumerator()
  fullName: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Collections.IEnumerable.GetEnumerator
    name: GetEnumerator
    fullName: System.Collections.IEnumerable.GetEnumerator
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Collections.IEnumerator
  parent: System.Collections
  isExternal: true
  name: IEnumerator
  fullName: System.Collections.IEnumerator
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList{{U}}
  parent: Microsoft.Azure.Management.V2.Resource.Core
  definition: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  name: PagedList<U>
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<U>
  fullname.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of U)
  name.vb: PagedList(Of U)
  spec.csharp:
  - uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
    name: PagedList
    fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList
  - name: <
    fullName: <
  - name: U
    fullName: U
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
    name: PagedList
    fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList
  - name: '(Of '
    fullName: '(Of '
  - name: U
    fullName: U
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
  parent: Microsoft.Azure.Management.V2.Resource.Core
  isExternal: false
  name: PagedList<T>
  fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList<T>
  fullname.vb: Microsoft.Azure.Management.V2.Resource.Core.PagedList(Of T)
  name.vb: PagedList(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
    name: PagedList
    fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.V2.Resource.Core.PagedList`1
    name: PagedList
    fullName: Microsoft.Azure.Management.V2.Resource.Core.PagedList
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
