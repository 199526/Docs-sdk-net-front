items:
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  commentId: T:Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  id: IUpdate
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  children: []
  langs:
  - csharp
  - vb
  name: IUpdate
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  type: Interface
  source:
    remote:
      path: src/ResourceManagement/Network/Microsoft.Azure.Management.Fluent.Network/Domain/NicIpConfiguration/Update/IUpdate.cs
      branch: 915751bb98dc36580083db8233fb617f4c6dfd74
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: IUpdate
    path: src/ResourceManagement/Network/Microsoft.Azure.Management.Fluent.Network/Domain/NicIpConfiguration/Update/IUpdate.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Management.Fluent.Network
  packages:
  - Microsoft.Azure.Management.Fluent.Network(0.0.1-prerelease)
  namespace: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  summary: "\nThe entirety of a network interface IP configuration update as part of a network interface update.\n"
  example: []
  syntax:
    content: 'public interface IUpdate : ISettable<IUpdate>, IWithSubnet, IWithPrivateIp, IWithPrivateIpAddress<IUpdate>, IWithPublicIpAddress, IWithPublicIpAddress<IUpdate>, IWithExistingPublicIpAddress<IUpdate>, IWithNewPublicIpAddress<IUpdate>, IWithLoadBalancer'
    content.vb: >-
      Public Interface IUpdate
          Inherits ISettable(Of IUpdate), IWithSubnet, IWithPrivateIp, IWithPublicIpAddress, IWithLoadBalancer
  inheritedMembers:
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet(System.String)
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion(System.String)
  - Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithPrivateIpAddressDynamic
  - Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithPrivateIpAddressStatic(System.String)
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithExistingPublicIpAddress(System.String)
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithoutPublicIpAddress
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress
  - Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress(System.String)
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
  - Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
references:
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  isExternal: false
  name: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet
  isExternal: true
  name: WithSubnet(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet(System.String)
    name: WithSubnet
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet(System.String)
    name: WithSubnet
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet.WithSubnet
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp
  isExternal: true
  name: WithPrivateIpVersion(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion(System.String)
    name: WithPrivateIpVersion
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion(System.String)
    name: WithPrivateIpVersion
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp.WithPrivateIpVersion
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithPrivateIpAddressDynamic
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
  name: WithPrivateIpAddressDynamic()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithPrivateIpAddressDynamic()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithPrivateIpAddressDynamic()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
    name: WithPrivateIpAddressDynamic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithPrivateIpAddressDynamic
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
    name: WithPrivateIpAddressDynamic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithPrivateIpAddressDynamic
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithPrivateIpAddressStatic(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
  name: WithPrivateIpAddressStatic(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithPrivateIpAddressStatic(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithPrivateIpAddressStatic(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
    name: WithPrivateIpAddressStatic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithPrivateIpAddressStatic
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
    name: WithPrivateIpAddressStatic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithPrivateIpAddressStatic
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  name: WithExistingPublicIpAddress(IPublicIpAddress)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithExistingPublicIpAddress(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
  name: WithExistingPublicIpAddress(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithExistingPublicIpAddress(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithExistingPublicIpAddress(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithoutPublicIpAddress
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
  name: WithoutPublicIpAddress()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithoutPublicIpAddress()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithoutPublicIpAddress()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
    name: WithoutPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithoutPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
    name: WithoutPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithoutPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
  name: WithNewPublicIpAddress(ICreatable<IPublicIpAddress>)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress(ICreatable<Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress>)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress(ICreatable(Of Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress))
  name.vb: WithNewPublicIpAddress(ICreatable(Of IPublicIpAddress))
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: ICreatable`1
    name: ICreatable
    fullName: ICreatable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: ICreatable`1
    name: ICreatable
    fullName: ICreatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
  name: WithNewPublicIpAddress()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}.WithNewPublicIpAddress(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
  name: WithNewPublicIpAddress(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate).WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
  isExternal: true
  name: WithExistingLoadBalancerBackend(ILoadBalancer, String)
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer, System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
    name: WithExistingLoadBalancerBackend
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
    name: ILoadBalancer
    fullName: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
    name: WithExistingLoadBalancerBackend
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerBackend
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
    name: ILoadBalancer
    fullName: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
  isExternal: true
  name: WithExistingLoadBalancerInboundNatRule(ILoadBalancer, String)
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer, System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
    name: WithExistingLoadBalancerInboundNatRule
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
    name: ILoadBalancer
    fullName: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule(Microsoft.Azure.Management.Fluent.Network.ILoadBalancer,System.String)
    name: WithExistingLoadBalancerInboundNatRule
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithExistingLoadBalancerInboundNatRule
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
    name: ILoadBalancer
    fullName: Microsoft.Azure.Management.Fluent.Network.ILoadBalancer
  - name: ', '
    fullName: ', '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
  isExternal: false
  name: WithoutLoadBalancerBackends()
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
    name: WithoutLoadBalancerBackends
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
    name: WithoutLoadBalancerBackends
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerBackends
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
  isExternal: false
  name: WithoutLoadBalancerInboundNatRules()
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
    name: WithoutLoadBalancerInboundNatRules
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
    name: WithoutLoadBalancerInboundNatRules
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer.WithoutLoadBalancerInboundNatRules
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  isExternal: false
  name: IWithSubnet
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithSubnet
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  isExternal: false
  name: IWithPrivateIp
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithPrivateIp
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
  isExternal: false
  name: WithPrivateIpAddressDynamic()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<ReturnT>.WithPrivateIpAddressDynamic()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of ReturnT).WithPrivateIpAddressDynamic()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
    name: WithPrivateIpAddressDynamic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<ReturnT>.WithPrivateIpAddressDynamic
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressDynamic
    name: WithPrivateIpAddressDynamic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of ReturnT).WithPrivateIpAddressDynamic
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update
  definition: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
  name: IWithPrivateIpAddress<IUpdate>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate)
  name.vb: IWithPrivateIpAddress(Of IUpdate)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
    name: IWithPrivateIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
    name: IWithPrivateIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
  isExternal: true
  name: WithPrivateIpAddressStatic(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<ReturnT>.WithPrivateIpAddressStatic(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of ReturnT).WithPrivateIpAddressStatic(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
    name: WithPrivateIpAddressStatic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<ReturnT>.WithPrivateIpAddressStatic
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1.WithPrivateIpAddressStatic(System.String)
    name: WithPrivateIpAddressStatic
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of ReturnT).WithPrivateIpAddressStatic
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
  isExternal: false
  name: WithExistingPublicIpAddress(IPublicIpAddress)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
  name: IWithExistingPublicIpAddress<IUpdate>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate)
  name.vb: IWithExistingPublicIpAddress(Of IUpdate)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
    name: IWithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
    name: IWithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
  isExternal: true
  name: WithExistingPublicIpAddress(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithExistingPublicIpAddress(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithExistingPublicIpAddress(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithExistingPublicIpAddress(System.String)
    name: WithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithExistingPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
  isExternal: false
  name: WithoutPublicIpAddress()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithoutPublicIpAddress()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithoutPublicIpAddress()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
    name: WithoutPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>.WithoutPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1.WithoutPublicIpAddress
    name: WithoutPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT).WithoutPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
  isExternal: true
  name: WithNewPublicIpAddress(ICreatable<IPublicIpAddress>)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress(ICreatable<Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress>)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress(ICreatable(Of Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress))
  name.vb: WithNewPublicIpAddress(ICreatable(Of IPublicIpAddress))
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: ICreatable`1
    name: ICreatable
    fullName: ICreatable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: '>'
    fullName: '>'
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(ICreatable{Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress})
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: ICreatable`1
    name: ICreatable
    fullName: ICreatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
    name: IPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.IPublicIpAddress
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress{Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate}
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  definition: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
  name: IWithNewPublicIpAddress<IUpdate>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate)
  name.vb: IWithNewPublicIpAddress(Of IUpdate)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
    name: IWithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
    name: IWithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
    name: IUpdate
    fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IUpdate
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
  isExternal: false
  name: WithNewPublicIpAddress()
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress()
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress()
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
  isExternal: true
  name: WithNewPublicIpAddress(String)
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress(System.String)
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress(System.String)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>.WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1.WithNewPublicIpAddress(System.String)
    name: WithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT).WithNewPublicIpAddress
  - name: (
    fullName: (
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
  parent: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update
  isExternal: false
  name: IWithLoadBalancer
  fullName: Microsoft.Azure.Management.Fluent.Network.NicIpConfiguration.Update.IWithLoadBalancer
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
  parent: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update
  isExternal: false
  name: IWithPrivateIpAddress<ReturnT>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress<ReturnT>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress(Of ReturnT)
  name.vb: IWithPrivateIpAddress(Of ReturnT)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
    name: IWithPrivateIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress
  - name: <
    fullName: <
  - name: ReturnT
    fullName: ReturnT
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress`1
    name: IWithPrivateIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update.IWithPrivateIpAddress
  - name: '(Of '
    fullName: '(Of '
  - name: ReturnT
    fullName: ReturnT
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update
  isExternal: false
  name: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPrivateIpAddress.Update
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  isExternal: false
  name: IWithExistingPublicIpAddress<ReturnT>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress<ReturnT>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress(Of ReturnT)
  name.vb: IWithExistingPublicIpAddress(Of ReturnT)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
    name: IWithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress
  - name: <
    fullName: <
  - name: ReturnT
    fullName: ReturnT
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress`1
    name: IWithExistingPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithExistingPublicIpAddress
  - name: '(Of '
    fullName: '(Of '
  - name: ReturnT
    fullName: ReturnT
  - name: )
    fullName: )
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  isExternal: false
  name: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
- uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
  parent: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update
  isExternal: false
  name: IWithNewPublicIpAddress<ReturnT>
  fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress<ReturnT>
  fullname.vb: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress(Of ReturnT)
  name.vb: IWithNewPublicIpAddress(Of ReturnT)
  spec.csharp:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
    name: IWithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress
  - name: <
    fullName: <
  - name: ReturnT
    fullName: ReturnT
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress`1
    name: IWithNewPublicIpAddress
    fullName: Microsoft.Azure.Management.Fluent.Network.HasPublicIpAddress.Update.IWithNewPublicIpAddress
  - name: '(Of '
    fullName: '(Of '
  - name: ReturnT
    fullName: ReturnT
  - name: )
    fullName: )
