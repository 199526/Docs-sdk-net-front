items:
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  commentId: T:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  id: LinkedServiceTypeRegistrationTests
  parent: DataFactory.Tests.UnitTests
  children:
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetRegisteredLinkedServiceCaseInsensitive``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetUserRegisteredLinkedServiceCaseInsensitive
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceType
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceTypeWithReservedName``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ClientsDoNotShareTypeMap
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedLinkedServiceTypeIsRegisteredTest``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedTypes
  langs:
  - csharp
  - vb
  name: LinkedServiceTypeRegistrationTests
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: LinkedServiceTypeRegistrationTests
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 27
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public class LinkedServiceTypeRegistrationTests : TypeRegistrationTestBase<LinkedServiceTypeProperties, GenericLinkedService>'
    content.vb: >-
      Public Class LinkedServiceTypeRegistrationTests
          Inherits TypeRegistrationTestBase(Of LinkedServiceTypeProperties, GenericLinkedService)
  inheritance:
  - System.Object
  - DataFactory.Tests.UnitTests.UnitTestBase
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  inheritedMembers:
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestCanRegisterTypeWithReservedName``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.RegisteringTypeTwiceWithoutForceThrowsException``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestCanRegisterType``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestReservedTypeIsRegistered``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.ReservedTypesList
  - DataFactory.Tests.UnitTests.UnitTestBase.Client
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedTypes
  commentId: P:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedTypes
  id: ReservedTypes
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: ReservedTypes
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedTypes
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReservedTypes
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 37
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public static IEnumerable<object[]> ReservedTypes { get; }
    content.vb: Public Shared ReadOnly Property ReservedTypes As IEnumerable(Of Object())
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object[]}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceType
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceType
  id: CanRegisterLinkedServiceType
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanRegisterLinkedServiceType()
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceType()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanRegisterLinkedServiceType
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 45
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void CanRegisterLinkedServiceType()
    content.vb: Public Sub CanRegisterLinkedServiceType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedLinkedServiceTypeIsRegisteredTest``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedLinkedServiceTypeIsRegisteredTest``1(System.Type,``0)
  id: ReservedLinkedServiceTypeIsRegisteredTest``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: ReservedLinkedServiceTypeIsRegisteredTest<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedLinkedServiceTypeIsRegisteredTest<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReservedLinkedServiceTypeIsRegisteredTest
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 53
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public void ReservedLinkedServiceTypeIsRegisteredTest<T>(Type type, T registeredType)where T : LinkedServiceTypeProperties'
    content.vb: Public Sub ReservedLinkedServiceTypeIsRegisteredTest(Of T As LinkedServiceTypeProperties)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ReservedLinkedServiceTypeIsRegisteredTest(Of T)(System.Type, T)
  name.vb: ReservedLinkedServiceTypeIsRegisteredTest(Of T)(Type, T)
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceTypeWithReservedName``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceTypeWithReservedName``1(System.Type,``0)
  id: CanRegisterLinkedServiceTypeWithReservedName``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanRegisterLinkedServiceTypeWithReservedName<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceTypeWithReservedName<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanRegisterLinkedServiceTypeWithReservedName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 63
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public void CanRegisterLinkedServiceTypeWithReservedName<T>(Type type, T registeredType)where T : TypeProperties'
    content.vb: Public Sub CanRegisterLinkedServiceTypeWithReservedName(Of T As TypeProperties)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanRegisterLinkedServiceTypeWithReservedName(Of T)(System.Type, T)
  name.vb: CanRegisterLinkedServiceTypeWithReservedName(Of T)(Type, T)
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
  id: RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException()
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 73
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException()
    content.vb: Public Sub RegisteringLinkedServiceTypeTwiceWithoutForceThrowsException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
  id: RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive()
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 81
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive()
    content.vb: Public Sub RegisteringLinkedServiceTwiceThrowsExceptionCaseInsensitive
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetRegisteredLinkedServiceCaseInsensitive``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetRegisteredLinkedServiceCaseInsensitive``1(System.Type,``0)
  id: CanGetRegisteredLinkedServiceCaseInsensitive``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanGetRegisteredLinkedServiceCaseInsensitive<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetRegisteredLinkedServiceCaseInsensitive<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanGetRegisteredLinkedServiceCaseInsensitive
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 89
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void CanGetRegisteredLinkedServiceCaseInsensitive<T>(Type type, T registeredType)
    content.vb: Public Sub CanGetRegisteredLinkedServiceCaseInsensitive(Of T)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetRegisteredLinkedServiceCaseInsensitive(Of T)(System.Type, T)
  name.vb: CanGetRegisteredLinkedServiceCaseInsensitive(Of T)(Type, T)
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ClientsDoNotShareTypeMap
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ClientsDoNotShareTypeMap
  id: ClientsDoNotShareTypeMap
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: ClientsDoNotShareTypeMap()
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.ClientsDoNotShareTypeMap()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ClientsDoNotShareTypeMap
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 97
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void ClientsDoNotShareTypeMap()
    content.vb: Public Sub ClientsDoNotShareTypeMap
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetUserRegisteredLinkedServiceCaseInsensitive
  commentId: M:DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetUserRegisteredLinkedServiceCaseInsensitive
  id: CanGetUserRegisteredLinkedServiceCaseInsensitive
  parent: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanGetUserRegisteredLinkedServiceCaseInsensitive()
  fullName: DataFactory.Tests.UnitTests.LinkedServiceTypeRegistrationTests.CanGetUserRegisteredLinkedServiceCaseInsensitive()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanGetUserRegisteredLinkedServiceCaseInsensitive
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/LinkedServiceTypeRegistrationTests.cs
    startLine: 114
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void CanGetUserRegisteredLinkedServiceCaseInsensitive()
    content.vb: Public Sub CanGetUserRegisteredLinkedServiceCaseInsensitive
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DataFactory.Tests.UnitTests
  isExternal: false
  name: DataFactory.Tests.UnitTests
  fullName: DataFactory.Tests.UnitTests
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: DataFactory.Tests.UnitTests.UnitTestBase
  parent: DataFactory.Tests.UnitTests
  isExternal: false
  name: UnitTestBase
  fullName: DataFactory.Tests.UnitTests.UnitTestBase
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  parent: DataFactory.Tests.UnitTests
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  name: TypeRegistrationTestBase<LinkedServiceTypeProperties, GenericLinkedService>
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService)
  name.vb: TypeRegistrationTestBase(Of LinkedServiceTypeProperties, GenericLinkedService)
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties
    name: LinkedServiceTypeProperties
    fullName: Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties
  - name: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService
    name: GenericLinkedService
    fullName: Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties
    name: LinkedServiceTypeProperties
    fullName: Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties
  - name: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService
    name: GenericLinkedService
    fullName: Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestCanRegisterTypeWithReservedName``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  name: TestCanRegisterTypeWithReservedName<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestCanRegisterTypeWithReservedName<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestCanRegisterTypeWithReservedName(Of T)()
  name.vb: TestCanRegisterTypeWithReservedName(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestCanRegisterTypeWithReservedName<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestCanRegisterTypeWithReservedName(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.RegisteringTypeTwiceWithoutForceThrowsException``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  name: RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  name.vb: RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.RegisteringTypeTwiceWithoutForceThrowsException<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).RegisteringTypeTwiceWithoutForceThrowsException(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestCanRegisterType``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  name: TestCanRegisterType<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestCanRegisterType<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestCanRegisterType(Of T)()
  name.vb: TestCanRegisterType(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestCanRegisterType<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestCanRegisterType(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestReservedTypeIsRegistered``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  name: TestReservedTypeIsRegistered<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestReservedTypeIsRegistered<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestReservedTypeIsRegistered(Of T)()
  name.vb: TestReservedTypeIsRegistered(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestReservedTypeIsRegistered<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestReservedTypeIsRegistered(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  name.vb: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}.ReservedTypesList
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  name: ReservedTypesList
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService>.ReservedTypesList
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.LinkedServiceTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericLinkedService).ReservedTypesList
- uid: DataFactory.Tests.UnitTests.UnitTestBase.Client
  parent: DataFactory.Tests.UnitTests.UnitTestBase
  isExternal: false
  name: Client
  fullName: DataFactory.Tests.UnitTests.UnitTestBase.Client
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  parent: DataFactory.Tests.UnitTests
  isExternal: false
  name: TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
  name.vb: TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: <
    fullName: <
  - name: TRegistered
    fullName: TRegistered
  - name: ', '
    fullName: ', '
  - name: TGenericTypeProperties
    fullName: TGenericTypeProperties
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: '(Of '
    fullName: '(Of '
  - name: TRegistered
    fullName: TRegistered
  - name: ', '
    fullName: ', '
  - name: TGenericTypeProperties
    fullName: TGenericTypeProperties
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestCanRegisterTypeWithReservedName<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterTypeWithReservedName<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterTypeWithReservedName(Of T)()
  name.vb: TestCanRegisterTypeWithReservedName(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterTypeWithReservedName<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterTypeWithReservedName(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  name.vb: RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.RegisteringTypeTwiceWithoutForceThrowsException<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).RegisteringTypeTwiceWithoutForceThrowsException(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestCanRegisterType<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterType<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterType(Of T)()
  name.vb: TestCanRegisterType(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterType<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterType(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestReservedTypeIsRegistered<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestReservedTypeIsRegistered<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestReservedTypeIsRegistered(Of T)()
  name.vb: TestReservedTypeIsRegistered(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestReservedTypeIsRegistered<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestReservedTypeIsRegistered(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  name.vb: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: ReservedTypesList
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.ReservedTypesList
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).ReservedTypesList
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
