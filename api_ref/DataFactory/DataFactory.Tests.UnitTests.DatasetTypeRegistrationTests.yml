items:
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  commentId: T:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  id: DatasetTypeRegistrationTests
  parent: DataFactory.Tests.UnitTests
  children:
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanGetRegisteredActivityCaseInsensitive``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterDatasetType
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterTableTypeWithReservedName``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.RegisteringDatasetTypeTwiceWithoutForceThrowsException
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedDatasetTypeIsRegisteredTest``1(System.Type,``0)
  - DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedTypes
  langs:
  - csharp
  - vb
  name: DatasetTypeRegistrationTests
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: DatasetTypeRegistrationTests
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 27
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public class DatasetTypeRegistrationTests : TypeRegistrationTestBase<DatasetTypeProperties, GenericDataset>'
    content.vb: >-
      Public Class DatasetTypeRegistrationTests
          Inherits TypeRegistrationTestBase(Of DatasetTypeProperties, GenericDataset)
  inheritance:
  - System.Object
  - DataFactory.Tests.UnitTests.UnitTestBase
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  inheritedMembers:
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestCanRegisterTypeWithReservedName``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.RegisteringTypeTwiceWithoutForceThrowsException``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestCanRegisterType``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestReservedTypeIsRegistered``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.ReservedTypesList
  - DataFactory.Tests.UnitTests.UnitTestBase.Client
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedTypes
  commentId: P:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedTypes
  id: ReservedTypes
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: ReservedTypes
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedTypes
  type: Property
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReservedTypes
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 37
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public static IEnumerable<object[]> ReservedTypes { get; }
    content.vb: Public Shared ReadOnly Property ReservedTypes As IEnumerable(Of Object())
    parameters: []
    return:
      type: System.Collections.Generic.IEnumerable{System.Object[]}
  modifiers.csharp:
  - public
  - static
  - get
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterDatasetType
  commentId: M:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterDatasetType
  id: CanRegisterDatasetType
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanRegisterDatasetType()
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterDatasetType()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanRegisterDatasetType
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 45
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void CanRegisterDatasetType()
    content.vb: Public Sub CanRegisterDatasetType
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterTableTypeWithReservedName``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterTableTypeWithReservedName``1(System.Type,``0)
  id: CanRegisterTableTypeWithReservedName``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanRegisterTableTypeWithReservedName<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterTableTypeWithReservedName<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanRegisterTableTypeWithReservedName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 53
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public void CanRegisterTableTypeWithReservedName<T>(Type type, T registeredType)where T : TypeProperties'
    content.vb: Public Sub CanRegisterTableTypeWithReservedName(Of T As TypeProperties)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanRegisterTableTypeWithReservedName(Of T)(System.Type, T)
  name.vb: CanRegisterTableTypeWithReservedName(Of T)(Type, T)
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedDatasetTypeIsRegisteredTest``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedDatasetTypeIsRegisteredTest``1(System.Type,``0)
  id: ReservedDatasetTypeIsRegisteredTest``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: ReservedDatasetTypeIsRegisteredTest<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedDatasetTypeIsRegisteredTest<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReservedDatasetTypeIsRegisteredTest
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 63
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public void ReservedDatasetTypeIsRegisteredTest<T>(Type type, T registeredType)where T : DatasetTypeProperties'
    content.vb: Public Sub ReservedDatasetTypeIsRegisteredTest(Of T As DatasetTypeProperties)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.ReservedDatasetTypeIsRegisteredTest(Of T)(System.Type, T)
  name.vb: ReservedDatasetTypeIsRegisteredTest(Of T)(Type, T)
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.RegisteringDatasetTypeTwiceWithoutForceThrowsException
  commentId: M:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.RegisteringDatasetTypeTwiceWithoutForceThrowsException
  id: RegisteringDatasetTypeTwiceWithoutForceThrowsException
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: RegisteringDatasetTypeTwiceWithoutForceThrowsException()
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.RegisteringDatasetTypeTwiceWithoutForceThrowsException()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: RegisteringDatasetTypeTwiceWithoutForceThrowsException
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 73
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void RegisteringDatasetTypeTwiceWithoutForceThrowsException()
    content.vb: Public Sub RegisteringDatasetTypeTwiceWithoutForceThrowsException
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanGetRegisteredActivityCaseInsensitive``1(System.Type,``0)
  commentId: M:DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanGetRegisteredActivityCaseInsensitive``1(System.Type,``0)
  id: CanGetRegisteredActivityCaseInsensitive``1(System.Type,``0)
  parent: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests
  langs:
  - csharp
  - vb
  name: CanGetRegisteredActivityCaseInsensitive<T>(Type, T)
  fullName: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanGetRegisteredActivityCaseInsensitive<T>(System.Type, T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CanGetRegisteredActivityCaseInsensitive
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/DatasetTypeRegistrationTests.cs
    startLine: 81
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: public void CanGetRegisteredActivityCaseInsensitive<T>(Type type, T registeredType)
    content.vb: Public Sub CanGetRegisteredActivityCaseInsensitive(Of T)(type As Type, registeredType As T)
    parameters:
    - id: type
      type: System.Type
    - id: registeredType
      type: '{T}'
    typeParameters:
    - id: T
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: DataFactory.Tests.UnitTests.DatasetTypeRegistrationTests.CanGetRegisteredActivityCaseInsensitive(Of T)(System.Type, T)
  name.vb: CanGetRegisteredActivityCaseInsensitive(Of T)(Type, T)
references:
- uid: DataFactory.Tests.UnitTests
  isExternal: false
  name: DataFactory.Tests.UnitTests
  fullName: DataFactory.Tests.UnitTests
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: DataFactory.Tests.UnitTests.UnitTestBase
  parent: DataFactory.Tests.UnitTests
  isExternal: false
  name: UnitTestBase
  fullName: DataFactory.Tests.UnitTests.UnitTestBase
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  parent: DataFactory.Tests.UnitTests
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  name: TypeRegistrationTestBase<DatasetTypeProperties, GenericDataset>
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset)
  name.vb: TypeRegistrationTestBase(Of DatasetTypeProperties, GenericDataset)
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties
    name: DatasetTypeProperties
    fullName: Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties
  - name: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Management.DataFactories.Models.GenericDataset
    name: GenericDataset
    fullName: Microsoft.Azure.Management.DataFactories.Models.GenericDataset
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties
    name: DatasetTypeProperties
    fullName: Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties
  - name: ', '
    fullName: ', '
  - uid: Microsoft.Azure.Management.DataFactories.Models.GenericDataset
    name: GenericDataset
    fullName: Microsoft.Azure.Management.DataFactories.Models.GenericDataset
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestCanRegisterTypeWithReservedName``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  name: TestCanRegisterTypeWithReservedName<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestCanRegisterTypeWithReservedName<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestCanRegisterTypeWithReservedName(Of T)()
  name.vb: TestCanRegisterTypeWithReservedName(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestCanRegisterTypeWithReservedName<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestCanRegisterTypeWithReservedName(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.RegisteringTypeTwiceWithoutForceThrowsException``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  name: RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  name.vb: RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.RegisteringTypeTwiceWithoutForceThrowsException<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).RegisteringTypeTwiceWithoutForceThrowsException(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestCanRegisterType``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  name: TestCanRegisterType<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestCanRegisterType<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestCanRegisterType(Of T)()
  name.vb: TestCanRegisterType(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestCanRegisterType<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestCanRegisterType(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestReservedTypeIsRegistered``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  name: TestReservedTypeIsRegistered<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestReservedTypeIsRegistered<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestReservedTypeIsRegistered(Of T)()
  name.vb: TestReservedTypeIsRegistered(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestReservedTypeIsRegistered<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestReservedTypeIsRegistered(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  name.vb: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}.ReservedTypesList
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase{Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties,Microsoft.Azure.Management.DataFactories.Models.GenericDataset}
  definition: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  name: ReservedTypesList
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset>.ReservedTypesList
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of Microsoft.Azure.Management.DataFactories.Models.DatasetTypeProperties, Microsoft.Azure.Management.DataFactories.Models.GenericDataset).ReservedTypesList
- uid: DataFactory.Tests.UnitTests.UnitTestBase.Client
  parent: DataFactory.Tests.UnitTests.UnitTestBase
  isExternal: false
  name: Client
  fullName: DataFactory.Tests.UnitTests.UnitTestBase.Client
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  parent: DataFactory.Tests.UnitTests
  isExternal: false
  name: TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
  name.vb: TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: <
    fullName: <
  - name: TRegistered
    fullName: TRegistered
  - name: ', '
    fullName: ', '
  - name: TGenericTypeProperties
    fullName: TGenericTypeProperties
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
    name: TypeRegistrationTestBase
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase
  - name: '(Of '
    fullName: '(Of '
  - name: TRegistered
    fullName: TRegistered
  - name: ', '
    fullName: ', '
  - name: TGenericTypeProperties
    fullName: TGenericTypeProperties
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestCanRegisterTypeWithReservedName<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterTypeWithReservedName<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterTypeWithReservedName(Of T)()
  name.vb: TestCanRegisterTypeWithReservedName(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterTypeWithReservedName<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
    name: TestCanRegisterTypeWithReservedName(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterTypeWithReservedName(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  name.vb: RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.RegisteringTypeTwiceWithoutForceThrowsException<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
    name: RegisteringTypeTwiceWithoutForceThrowsException(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).RegisteringTypeTwiceWithoutForceThrowsException(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestCanRegisterType<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterType<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterType(Of T)()
  name.vb: TestCanRegisterType(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterType<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
    name: TestCanRegisterType(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterType(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestReservedTypeIsRegistered<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestReservedTypeIsRegistered<T>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestReservedTypeIsRegistered(Of T)()
  name.vb: TestReservedTypeIsRegistered(Of T)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered<T>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestReservedTypeIsRegistered<T>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
    name: TestReservedTypeIsRegistered(Of T)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestReservedTypeIsRegistered(Of T)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  name.vb: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  spec.csharp:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
    name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
    fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  isExternal: false
  name: ReservedTypesList
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.ReservedTypesList
  fullname.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).ReservedTypesList
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
