items:
- uid: DataFactory.Tests.Framework.Common
  commentId: T:DataFactory.Tests.Framework.Common
  id: Common
  parent: DataFactory.Tests.Framework
  children:
  - DataFactory.Tests.Framework.Common.AssertAreEqual(System.Object,System.Object)
  - DataFactory.Tests.Framework.Common.ResourceGroupName
  - DataFactory.Tests.Framework.Common.SchemaPropertyName
  - DataFactory.Tests.Framework.Common.TryConvertMismatchedTypes(System.Object@,System.Object@)
  - DataFactory.Tests.Framework.Common.ValidateAreSame(System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  - DataFactory.Tests.Framework.Common.ValidateDictionariesItemsAreSame(System.Collections.IDictionary,System.Collections.IDictionary,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  - DataFactory.Tests.Framework.Common.ValidateListItemsAreSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  langs:
  - csharp
  - vb
  name: Common
  fullName: DataFactory.Tests.Framework.Common
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: Common
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 30
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public class Common
    content.vb: Public Class Common
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataFactory.Tests.Framework.Common.ResourceGroupName
  commentId: F:DataFactory.Tests.Framework.Common.ResourceGroupName
  id: ResourceGroupName
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: ResourceGroupName
  fullName: DataFactory.Tests.Framework.Common.ResourceGroupName
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ResourceGroupName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 32
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string ResourceGroupName = "ResourceGroup"
    content.vb: Public Const ResourceGroupName As String = "ResourceGroup"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.Common.SchemaPropertyName
  commentId: F:DataFactory.Tests.Framework.Common.SchemaPropertyName
  id: SchemaPropertyName
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: SchemaPropertyName
  fullName: DataFactory.Tests.Framework.Common.SchemaPropertyName
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: SchemaPropertyName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 38
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nThe property name for object types that allow \na schema to be specified as a top-level property.\n"
  example: []
  syntax:
    content: public const string SchemaPropertyName = "$schema"
    content.vb: Public Const SchemaPropertyName As String = "$schema"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.Common.ValidateDictionariesItemsAreSame(System.Collections.IDictionary,System.Collections.IDictionary,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  commentId: M:DataFactory.Tests.Framework.Common.ValidateDictionariesItemsAreSame(System.Collections.IDictionary,System.Collections.IDictionary,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  id: ValidateDictionariesItemsAreSame(System.Collections.IDictionary,System.Collections.IDictionary,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: ValidateDictionariesItemsAreSame(IDictionary, IDictionary, String, Boolean, Boolean, Boolean, Func<Object, IComparable>, Boolean)
  fullName: DataFactory.Tests.Framework.Common.ValidateDictionariesItemsAreSame(System.Collections.IDictionary, System.Collections.IDictionary, System.String, System.Boolean, System.Boolean, System.Boolean, System.Func<System.Object, System.IComparable>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ValidateDictionariesItemsAreSame
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 51
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nAsserts if the items within the given two dictionaries are not the same.\n"
  example: []
  syntax:
    content: public static void ValidateDictionariesItemsAreSame(IDictionary expected, IDictionary actual, string description = null, bool onlyCompareDataMembers = true, bool treatNullSameAsEmptyString = false, bool ignoreCollectionOrder = false, Func<object, IComparable> getSortId = null, bool tryConvertMismatchedTypes = false)
    content.vb: Public Shared Sub ValidateDictionariesItemsAreSame(expected As IDictionary, actual As IDictionary, description As String = Nothing, onlyCompareDataMembers As Boolean = True, treatNullSameAsEmptyString As Boolean = False, ignoreCollectionOrder As Boolean = False, getSortId As Func(Of Object, IComparable) = Nothing, tryConvertMismatchedTypes As Boolean = False)
    parameters:
    - id: expected
      type: System.Collections.IDictionary
      description: 
    - id: actual
      type: System.Collections.IDictionary
      description: 
    - id: description
      type: System.String
      description: 
    - id: onlyCompareDataMembers
      type: System.Boolean
      description: When true, only data contracts members are compared.
    - id: treatNullSameAsEmptyString
      type: System.Boolean
      description: When true, when comparing strings, null and and empty string are considered equivalent.
    - id: ignoreCollectionOrder
      type: System.Boolean
      description: When true, expected and actual collections items do not have to be in the same order
    - id: getSortId
      type: System.Func{System.Object,System.IComparable}
      description: Value types and strings are already handled. If handling of more complex types is required, put it here.
    - id: tryConvertMismatchedTypes
      type: System.Boolean
      description: if the actual type is not the same as the expected type, try to convert it. This allows a string representation of a Guid, for example, to be considered a match of the corresponding Guid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.Common.ValidateDictionariesItemsAreSame(System.Collections.IDictionary, System.Collections.IDictionary, System.String, System.Boolean, System.Boolean, System.Boolean, System.Func(Of System.Object, System.IComparable), System.Boolean)
  name.vb: ValidateDictionariesItemsAreSame(IDictionary, IDictionary, String, Boolean, Boolean, Boolean, Func(Of Object, IComparable), Boolean)
- uid: DataFactory.Tests.Framework.Common.ValidateListItemsAreSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  commentId: M:DataFactory.Tests.Framework.Common.ValidateListItemsAreSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  id: ValidateListItemsAreSame``1(System.Collections.Generic.IList{``0},System.Collections.Generic.IList{``0},System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: ValidateListItemsAreSame<T>(IList<T>, IList<T>, String, Boolean, Boolean, Boolean, Func<Object, IComparable>, Boolean)
  fullName: DataFactory.Tests.Framework.Common.ValidateListItemsAreSame<T>(System.Collections.Generic.IList<T>, System.Collections.Generic.IList<T>, System.String, System.Boolean, System.Boolean, System.Boolean, System.Func<System.Object, System.IComparable>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ValidateListItemsAreSame
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 95
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nAsserts if the items within the given two collections are not the same.\n"
  example: []
  syntax:
    content: public static void ValidateListItemsAreSame<T>(IList<T> expected, IList<T> actual, string description = null, bool onlyCompareDataMembers = true, bool treatNullSameAsEmptyString = false, bool ignoreCollectionOrder = false, Func<object, IComparable> getSortId = null, bool tryConvertMismatchedTypes = false)
    content.vb: Public Shared Sub ValidateListItemsAreSame(Of T)(expected As IList(Of T), actual As IList(Of T), description As String = Nothing, onlyCompareDataMembers As Boolean = True, treatNullSameAsEmptyString As Boolean = False, ignoreCollectionOrder As Boolean = False, getSortId As Func(Of Object, IComparable) = Nothing, tryConvertMismatchedTypes As Boolean = False)
    parameters:
    - id: expected
      type: System.Collections.Generic.IList{{T}}
      description: 
    - id: actual
      type: System.Collections.Generic.IList{{T}}
      description: 
    - id: description
      type: System.String
      description: 
    - id: onlyCompareDataMembers
      type: System.Boolean
      description: When true, only data contracts members are compared.
    - id: treatNullSameAsEmptyString
      type: System.Boolean
      description: When true, when comparing strings, null and and empty string are considered equivalent.
    - id: ignoreCollectionOrder
      type: System.Boolean
      description: When true, expected and actual collections items do not have to be in the same order
    - id: getSortId
      type: System.Func{System.Object,System.IComparable}
      description: Value types and strings are already handled. If handling of more complex types is required, put it here.
    - id: tryConvertMismatchedTypes
      type: System.Boolean
      description: if the actual type is not the same as the expected type, try to convert it. This allows a string representation of a Guid, for example, to be considered a match of the corresponding Guid.
    typeParameters:
    - id: T
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.Common.ValidateListItemsAreSame(Of T)(System.Collections.Generic.IList(Of T), System.Collections.Generic.IList(Of T), System.String, System.Boolean, System.Boolean, System.Boolean, System.Func(Of System.Object, System.IComparable), System.Boolean)
  name.vb: ValidateListItemsAreSame(Of T)(IList(Of T), IList(Of T), String, Boolean, Boolean, Boolean, Func(Of Object, IComparable), Boolean)
- uid: DataFactory.Tests.Framework.Common.ValidateAreSame(System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  commentId: M:DataFactory.Tests.Framework.Common.ValidateAreSame(System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  id: ValidateAreSame(System.Object,System.Object,System.String,System.Boolean,System.Boolean,System.Boolean,System.Func{System.Object,System.IComparable},System.Boolean)
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: ValidateAreSame(Object, Object, String, Boolean, Boolean, Boolean, Func<Object, IComparable>, Boolean)
  fullName: DataFactory.Tests.Framework.Common.ValidateAreSame(System.Object, System.Object, System.String, System.Boolean, System.Boolean, System.Boolean, System.Func<System.Object, System.IComparable>, System.Boolean)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ValidateAreSame
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 137
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nAsserts if the two instances are not the same.\n"
  example: []
  syntax:
    content: public static void ValidateAreSame(object expected, object actual, string description = null, bool onlyCompareDataMembers = true, bool treatNullSameAsEmptyString = false, bool ignoreCollectionOrder = false, Func<object, IComparable> getSortId = null, bool tryConvertMismatchedTypes = false)
    content.vb: Public Shared Sub ValidateAreSame(expected As Object, actual As Object, description As String = Nothing, onlyCompareDataMembers As Boolean = True, treatNullSameAsEmptyString As Boolean = False, ignoreCollectionOrder As Boolean = False, getSortId As Func(Of Object, IComparable) = Nothing, tryConvertMismatchedTypes As Boolean = False)
    parameters:
    - id: expected
      type: System.Object
      description: 
    - id: actual
      type: System.Object
      description: 
    - id: description
      type: System.String
      description: 
    - id: onlyCompareDataMembers
      type: System.Boolean
      description: When true, only data contracts members are compared.
    - id: treatNullSameAsEmptyString
      type: System.Boolean
      description: When true, when comparing strings, null and and empty string are considered equivalent.
    - id: ignoreCollectionOrder
      type: System.Boolean
      description: When true, expected and actual collections items do not have to be in the same order
    - id: getSortId
      type: System.Func{System.Object,System.IComparable}
      description: Value types and strings are already handled. If handling of more complex types is required, put it here.
    - id: tryConvertMismatchedTypes
      type: System.Boolean
      description: if the actual type is not the same as the expected type, try to convert it. This allows a string representation of a Guid, for example, to be considered a match of the corresponding Guid.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.Common.ValidateAreSame(System.Object, System.Object, System.String, System.Boolean, System.Boolean, System.Boolean, System.Func(Of System.Object, System.IComparable), System.Boolean)
  name.vb: ValidateAreSame(Object, Object, String, Boolean, Boolean, Boolean, Func(Of Object, IComparable), Boolean)
- uid: DataFactory.Tests.Framework.Common.TryConvertMismatchedTypes(System.Object@,System.Object@)
  commentId: M:DataFactory.Tests.Framework.Common.TryConvertMismatchedTypes(System.Object@,System.Object@)
  id: TryConvertMismatchedTypes(System.Object@,System.Object@)
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: TryConvertMismatchedTypes(ref Object, ref Object)
  fullName: DataFactory.Tests.Framework.Common.TryConvertMismatchedTypes(ref System.Object, ref System.Object)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TryConvertMismatchedTypes
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 315
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static void TryConvertMismatchedTypes(ref object expectedValue, ref object actualValue)
    content.vb: Public Shared Sub TryConvertMismatchedTypes(ByRef expectedValue As Object, ByRef actualValue As Object)
    parameters:
    - id: expectedValue
      type: System.Object
    - id: actualValue
      type: System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.Common.TryConvertMismatchedTypes(ByRef System.Object, ByRef System.Object)
  name.vb: TryConvertMismatchedTypes(ByRef Object, ByRef Object)
- uid: DataFactory.Tests.Framework.Common.AssertAreEqual(System.Object,System.Object)
  commentId: M:DataFactory.Tests.Framework.Common.AssertAreEqual(System.Object,System.Object)
  id: AssertAreEqual(System.Object,System.Object)
  parent: DataFactory.Tests.Framework.Common
  langs:
  - csharp
  - vb
  name: AssertAreEqual(Object, Object)
  fullName: DataFactory.Tests.Framework.Common.AssertAreEqual(System.Object, System.Object)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: AssertAreEqual
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/Common.cs
    startLine: 336
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static void AssertAreEqual(object expected, object actual)
    content.vb: Public Shared Sub AssertAreEqual(expected As Object, actual As Object)
    parameters:
    - id: expected
      type: System.Object
    - id: actual
      type: System.Object
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DataFactory.Tests.Framework
  isExternal: false
  name: DataFactory.Tests.Framework
  fullName: DataFactory.Tests.Framework
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Collections.IDictionary
  parent: System.Collections
  isExternal: true
  name: IDictionary
  fullName: System.Collections.IDictionary
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.Func{System.Object,System.IComparable}
  parent: System
  definition: System.Func`2
  name: Func<Object, IComparable>
  fullName: System.Func<System.Object, System.IComparable>
  fullname.vb: System.Func(Of System.Object, System.IComparable)
  name.vb: Func(Of Object, IComparable)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IComparable
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.IComparable
    name: IComparable
    fullName: System.IComparable
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: System.Func`2
  parent: System
  isExternal: true
  name: Func<T, TResult>
  fullName: System.Func<T, TResult>
  fullname.vb: System.Func(Of T, TResult)
  name.vb: Func(Of T, TResult)
  spec.csharp:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`2
    name: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: ', '
    fullName: ', '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{{T}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
