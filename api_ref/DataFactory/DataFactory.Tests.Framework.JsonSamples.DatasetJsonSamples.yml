items:
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  commentId: T:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  id: DatasetJsonSamples
  parent: DataFactory.Tests.Framework.JsonSamples
  children:
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AmazonS3Dataset
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureDataLakeStoreDataset
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureSqlDataWarehouseTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobDatasetWithFullFormat
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobJsonFormatTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobOrcFormatTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.CustomTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable2
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.FolderPathTableSample
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISOracleTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISTable
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.MongoDbDataset
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ODataResourceDataset
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.OnpremieseCassandraDataset
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.PartitionTableSample
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithLatency
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithStyle
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithValidation
  - DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.WebTableDataset
  langs:
  - csharp
  - vb
  name: DatasetJsonSamples
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: DatasetJsonSamples
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 18
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: 'public class DatasetJsonSamples : JsonSampleCollection<DatasetJsonSamples>, IEnumerable<object[]>, IEnumerable'
    content.vb: >-
      Public Class DatasetJsonSamples
          Inherits JsonSampleCollection(Of DatasetJsonSamples)
          Implements IEnumerable(Of Object()), IEnumerable
  inheritance:
  - System.Object
  - DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}
  implements:
  - System.Collections.Generic.IEnumerable{System.Object[]}
  - System.Collections.IEnumerable
  inheritedMembers:
  - DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}.GetEnumerator
  - DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}.System#Collections#IEnumerable#GetEnumerator
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.CustomTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.CustomTable
  id: CustomTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: CustomTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.CustomTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: CustomTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 25
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample(new string[]{"properties.typeProperties.PropertyBagPropertyName1", "properties.typeProperties.propertyBagPropertyName2"})]

      public const string CustomTable = "\n{\n    name: \"CustomTable\",\n    properties:\n    {\n        type: \"CustomDataset\",\n        linkedServiceName: \"MyCustomServiceName\",\n        typeProperties:\n        {   \n            PropertyBagPropertyName1: \"PropertyBagPropertyValue1\",\n            propertyBagPropertyName2: \"PropertyBagPropertyValue2\"\n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        }\n    }\n}\n"
    content.vb: >-
      <JsonSample(New String() {"properties.typeProperties.PropertyBagPropertyName1", "properties.typeProperties.propertyBagPropertyName2"})>

      Public Const CustomTable As String = vbLf & "{" & vbLf & "    name: ""CustomTable""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""CustomDataset""," & vbLf & "        linkedServiceName: ""MyCustomServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {   " & vbLf & "            PropertyBagPropertyName1: ""PropertyBagPropertyValue1""," & vbLf & "            propertyBagPropertyName2: ""PropertyBagPropertyValue2""" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISTable
  id: HDISTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: HDISTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: HDISTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 49
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string HDISTable = "\n{\n    name: \"TestOut\",\n    properties:\n    {\n        type: \"SqlServerTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            tableName: \"$EncryptedString$MyEncryptedTableName\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        }\n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const HDISTable As String = vbLf & "{" & vbLf & "    name: ""TestOut""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""SqlServerTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""$EncryptedString$MyEncryptedTableName""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISOracleTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISOracleTable
  id: HDISOracleTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: HDISOracleTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.HDISOracleTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: HDISOracleTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 72
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string HDISOracleTable = "\n{\n    name: \"TestOut\",\n    properties:\n    {\n        type: \"OracleTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            tableName: \"$EncryptedString$MyEncryptedTableName\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        }\n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const HDISOracleTable As String = vbLf & "{" & vbLf & "    name: ""TestOut""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""OracleTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""$EncryptedString$MyEncryptedTableName""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobTable
  id: BlobTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: BlobTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: BlobTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 95
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string BlobTable = "\n{\n    name: \"MyDemoBlob\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        structure:\n        [\n            { name: \"PartitionKey\", type: \"Guid\" },\n            { name: \"RowKey\", type: \"String\" }, \n            { name: \"Timestamp\", type: \"String\" },\n            { name: \"game_id \", type: \"String\" },\n        ],\n        typeProperties:\n        {        \n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\\\\{PartitionKey}\",\n            fileName: \"TestBlobName\",       \n\n            format:\n            {\n                type: \"TextFormat\",\n                columnDelimiter: \",\",\n                rowDelimiter: \";\",\n                escapeChar: \"#\",\n                nullValue: \"\\\\N\",\n                encodingName: \"utf-8\"\n            },\n            partitionedBy:\n            [\n                { name: \"PartitionKey\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy-MM-dd\" } },\n            ]\n        },\n        availability:\n        {\n            interval: 1, \n            frequency: \"Hour\",\n            style: \"StartOfInterval\"     \n        },\n        policy:\n        {\n                validation:\n                {   \n                    minimumSizeMB: 200.0\n                }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const BlobTable As String = vbLf & "{" & vbLf & "    name: ""MyDemoBlob""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        structure:" & vbLf & "        [" & vbLf & "            { name: ""PartitionKey"", type: ""Guid"" }," & vbLf & "            { name: ""RowKey"", type: ""String"" }, " & vbLf & "            { name: ""Timestamp"", type: ""String"" }," & vbLf & "            { name: ""game_id "", type: ""String"" }," & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {        " & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time\\{PartitionKey}""," & vbLf & "            fileName: ""TestBlobName"",       " & vbLf & vbLf & "            format:" & vbLf & "            {" & vbLf & "                type: ""TextFormat""," & vbLf & "                columnDelimiter: "",""," & vbLf & "                rowDelimiter: "";""," & vbLf & "                escapeChar: ""#""," & vbLf & "                nullValue: ""\\N""," & vbLf & "                encodingName: ""utf-8""" & vbLf & "            }," & vbLf & "            partitionedBy:" & vbLf & "            [" & vbLf & "                { name: ""PartitionKey"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy-MM-dd"" } }," & vbLf & "            ]" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1, " & vbLf & "            frequency: ""Hour""," & vbLf & "            style: ""StartOfInterval""     " & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "                validation:" & vbLf & "                {   " & vbLf & "                    minimumSizeMB: 200.0" & vbLf & "                }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobDatasetWithFullFormat
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobDatasetWithFullFormat
  id: BlobDatasetWithFullFormat
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: BlobDatasetWithFullFormat
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobDatasetWithFullFormat
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: BlobDatasetWithFullFormat
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 145
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string BlobDatasetWithFullFormat = "\n{\n    name: \"MyDemoBlob\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        structure:\n        [\n            { name: \"PartitionKey\", type: \"Guid\" },\n            { name: \"RowKey\", type: \"String\" }, \n            { name: \"Timestamp\", type: \"String\" },\n            { name: \"game_id \", type: \"String\" },\n        ],\n        typeProperties:\n        {        \n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\\\\{PartitionKey}\",\n            fileName: \"TestBlobName\",       \n            format:\n            {\n                type: \"TextFormat\",\n                columnDelimiter: \",\",\n                rowDelimiter: \";\",\n                escapeChar: \"#\",\n                nullValue: \"\\\\N\",\n                encodingName: \"utf-8\",\n                treatEmptyAsNull: true,\n                firstRowAsHeader: false,\n                skipLineCount: 1\n            },\n            partitionedBy:\n            [\n                { name: \"PartitionKey\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy-MM-dd\" } },\n            ]\n        },\n        availability:\n        {\n            interval: 1, \n            frequency: \"Hour\",\n            style: \"StartOfInterval\"     \n        },\n        policy:\n        {\n                validation:\n                {   \n                    minimumSizeMB: 200.0\n                }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const BlobDatasetWithFullFormat As String = vbLf & "{" & vbLf & "    name: ""MyDemoBlob""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        structure:" & vbLf & "        [" & vbLf & "            { name: ""PartitionKey"", type: ""Guid"" }," & vbLf & "            { name: ""RowKey"", type: ""String"" }, " & vbLf & "            { name: ""Timestamp"", type: ""String"" }," & vbLf & "            { name: ""game_id "", type: ""String"" }," & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {        " & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time\\{PartitionKey}""," & vbLf & "            fileName: ""TestBlobName"",       " & vbLf & "            format:" & vbLf & "            {" & vbLf & "                type: ""TextFormat""," & vbLf & "                columnDelimiter: "",""," & vbLf & "                rowDelimiter: "";""," & vbLf & "                escapeChar: ""#""," & vbLf & "                nullValue: ""\\N""," & vbLf & "                encodingName: ""utf-8""," & vbLf & "                treatEmptyAsNull: true," & vbLf & "                firstRowAsHeader: false," & vbLf & "                skipLineCount: 1" & vbLf & "            }," & vbLf & "            partitionedBy:" & vbLf & "            [" & vbLf & "                { name: ""PartitionKey"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy-MM-dd"" } }," & vbLf & "            ]" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1, " & vbLf & "            frequency: ""Hour""," & vbLf & "            style: ""StartOfInterval""     " & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "                validation:" & vbLf & "                {   " & vbLf & "                    minimumSizeMB: 200.0" & vbLf & "                }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobJsonFormatTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobJsonFormatTable
  id: BlobJsonFormatTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: BlobJsonFormatTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobJsonFormatTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: BlobJsonFormatTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 197
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string BlobJsonFormatTable = "\n{\n    name: \"MyDemoBlob\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        structure:\n        [\n            { name: \"PartitionKey\", type: \"Guid\" },\n            { name: \"RowKey\", type: \"String\" }, \n            { name: \"Timestamp\", type: \"String\" },\n            { name: \"game_id \", type: \"String\" },\n        ],\n        typeProperties:\n        {        \n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\\\\{PartitionKey}\",\n            fileName: \"TestBlobName\",   \n            format:\n            {\n                type: \"JsonFormat\",\n                nestingSeparator: \",\",\n                filePattern: \"setOfObjects\",\n                encodingName: \"utf-8\"\n            },\n            partitionedBy:\n            [\n                { name: \"PartitionKey\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy-MM-dd\" } },\n            ]\n        },\n        availability:\n        {\n            interval: 1, \n            frequency: \"Hour\",\n            style: \"StartOfInterval\"     \n        },\n        policy:\n        {\n            validation:\n            {   \n                minimumSizeMB: 200.0\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const BlobJsonFormatTable As String = vbLf & "{" & vbLf & "    name: ""MyDemoBlob""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        structure:" & vbLf & "        [" & vbLf & "            { name: ""PartitionKey"", type: ""Guid"" }," & vbLf & "            { name: ""RowKey"", type: ""String"" }, " & vbLf & "            { name: ""Timestamp"", type: ""String"" }," & vbLf & "            { name: ""game_id "", type: ""String"" }," & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {        " & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time\\{PartitionKey}""," & vbLf & "            fileName: ""TestBlobName"",   " & vbLf & "            format:" & vbLf & "            {" & vbLf & "                type: ""JsonFormat""," & vbLf & "                nestingSeparator: "",""," & vbLf & "                filePattern: ""setOfObjects""," & vbLf & "                encodingName: ""utf-8""" & vbLf & "            }," & vbLf & "            partitionedBy:" & vbLf & "            [" & vbLf & "                { name: ""PartitionKey"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy-MM-dd"" } }," & vbLf & "            ]" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1, " & vbLf & "            frequency: ""Hour""," & vbLf & "            style: ""StartOfInterval""     " & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {   " & vbLf & "                minimumSizeMB: 200.0" & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureSqlDataWarehouseTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureSqlDataWarehouseTable
  id: AzureSqlDataWarehouseTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: AzureSqlDataWarehouseTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureSqlDataWarehouseTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: AzureSqlDataWarehouseTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 244
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string AzureSqlDataWarehouseTable = "\n{\n    name: \"Test\",\n    properties:\n    {\n        type: \"AzureSqlDWTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        structure:  \n        [ \n            { name: \"somecol\", type: \"String\" }\n        ],\n        typeProperties:\n        {            \n            tableName: \"mytablename\"            \n        },\n        availability: \n        {\n            interval: 1, \n            frequency: \"Hour\",\n        },\n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const AzureSqlDataWarehouseTable As String = vbLf & "{" & vbLf & "    name: ""Test""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureSqlDWTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        structure:  " & vbLf & "        [ " & vbLf & "            { name: ""somecol"", type: ""String"" }" & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""mytablename""            " & vbLf & "        }," & vbLf & "        availability: " & vbLf & "        {" & vbLf & "            interval: 1, " & vbLf & "            frequency: ""Hour""," & vbLf & "        }," & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable
  id: ExternalTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: ExternalTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ExternalTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 269
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string ExternalTable = "\n{\n    name: \"External\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\",\n            fileName: \"TestBlobName\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        },\n        policy:\n        {\n            validation:\n            {\n                minimumSizeMB: 10.0,\n            },\n            externalData:\n            {\n                dataDelay: \"00:10:00\",\n                retryInterval: \"00:01:00\",\n                retryTimeout: \"00:10:00\",\n                maximumRetry: 3\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const ExternalTable As String = vbLf & "{" & vbLf & "    name: ""External""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time""," & vbLf & "            fileName: ""TestBlobName""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumSizeMB: 10.0," & vbLf & "            }," & vbLf & "            externalData:" & vbLf & "            {" & vbLf & "                dataDelay: ""00:10:00""," & vbLf & "                retryInterval: ""00:01:00""," & vbLf & "                retryTimeout: ""00:10:00""," & vbLf & "                maximumRetry: 3" & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable2
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable2
  id: ExternalTable2
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: ExternalTable2
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ExternalTable2
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ExternalTable2
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 306
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string ExternalTable2 = "\n{\n    name: \"External\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {                \n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\",\n            fileName: \"TestBlobName\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        },\n        external: true,\n        policy:\n        {\n            validation:\n            {\n                minimumSizeMB: 10.0,\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const ExternalTable2 As String = vbLf & "{" & vbLf & "    name: ""External""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {                " & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time""," & vbLf & "            fileName: ""TestBlobName""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }," & vbLf & "        external: true," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumSizeMB: 10.0," & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithValidation
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithValidation
  id: TableWithValidation
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: TableWithValidation
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithValidation
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TableWithValidation
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 337
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string TableWithValidation = "\n{\n    name: \"TableWithValidation\",\n    properties:\n    {\n        type: \"AzureTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            tableName: \"table$Date$Time\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        },\n        policy:\n        {\n            validation:\n            {\n                minimumRows: 10,\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const TableWithValidation As String = vbLf & "{" & vbLf & "    name: ""TableWithValidation""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""table$Date$Time""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumRows: 10," & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithLatency
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithLatency
  id: TableWithLatency
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: TableWithLatency
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithLatency
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TableWithLatency
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 366
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string TableWithLatency = "\n{\n    name: \"TableWithLatency\",\n    properties:\n    {\n        type: \"AzureTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            tableName: \"table$Date$Time\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\"\n        },\n        policy:\n        {\n            validation:\n            {\n                minimumRows: 10,\n            },\n            latency:\n            {\n                latencyLength: \"00:50:00\",\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const TableWithLatency As String = vbLf & "{" & vbLf & "    name: ""TableWithLatency""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""table$Date$Time""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""" & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumRows: 10," & vbLf & "            }," & vbLf & "            latency:" & vbLf & "            {" & vbLf & "                latencyLength: ""00:50:00""," & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithStyle
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithStyle
  id: TableWithStyle
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: TableWithStyle
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.TableWithStyle
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TableWithStyle
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 399
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string TableWithStyle = "\n{\n    name: \"TableWithStyle\",\n    properties:\n    {\n        type: \"AzureTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            tableName: \"table$Date$Time\"            \n        },\n        availability:\n        {\n            offset: \"01:00:00\",\n            interval: 1,\n            anchorDateTime: \"2014-02-27T12:00:00\",\n            frequency: \"Hour\",\n            style: \"EndOfInterval\"\n        },\n        policy:\n        {\n            validation:\n            {\n                minimumRows: 10\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const TableWithStyle As String = vbLf & "{" & vbLf & "    name: ""TableWithStyle""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            tableName: ""table$Date$Time""            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            offset: ""01:00:00""," & vbLf & "            interval: 1," & vbLf & "            anchorDateTime: ""2014-02-27T12:00:00""," & vbLf & "            frequency: ""Hour""," & vbLf & "            style: ""EndOfInterval""" & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumRows: 10" & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.PartitionTableSample
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.PartitionTableSample
  id: PartitionTableSample
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: PartitionTableSample
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.PartitionTableSample
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PartitionTableSample
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 429
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string PartitionTableSample = "\n{\n    name: \"DA_PartitionTest\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"LinkedService-CuratedWikiData\",\n        structure:  \n        [ \n            { name: \"slicetimestamp\", type: \"String\"},\n            { name: \"projectname\", type: \"String\"},\n            { name: \"pageviews\", type: \"Decimal\"}\n        ],\n        typeProperties:\n        {            \n            folderPath: \"wikidatagateway/wikisampledataout/{Year}/{Month}/{Day}\",\n\t\t\tfileName: \"{Hour}.csv\",\n\t\t\tpartitionedBy: \n\t\t\t[\n\t\t\t\t{ name: \"Year\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy\" } },\n\t\t\t\t{ name: \"Month\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"MM\" } }, \n\t\t\t\t{ name: \"Day\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"dd\" } }, \n\t\t\t\t{ name: \"Hour\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"hh\" } } \n\t\t\t]            \n        },\n        availability: \n        {\n            frequency: \"Hour\",\n            interval: 1\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const PartitionTableSample As String = vbLf & "{" & vbLf & "    name: ""DA_PartitionTest""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""LinkedService-CuratedWikiData""," & vbLf & "        structure:  " & vbLf & "        [ " & vbLf & "            { name: ""slicetimestamp"", type: ""String""}," & vbLf & "            { name: ""projectname"", type: ""String""}," & vbLf & "            { name: ""pageviews"", type: ""Decimal""}" & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            folderPath: ""wikidatagateway/wikisampledataout/{Year}/{Month}/{Day}""," & vbLf & vbTab & vbTab & vbTab & "fileName: ""{Hour}.csv""," & vbLf & vbTab & vbTab & vbTab & "partitionedBy: " & vbLf & vbTab & vbTab & vbTab & "[" & vbLf & vbTab & vbTab & vbTab & vbTab & "{ name: ""Year"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy"" } }," & vbLf & vbTab & vbTab & vbTab & vbTab & "{ name: ""Month"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""MM"" } }, " & vbLf & vbTab & vbTab & vbTab & vbTab & "{ name: ""Day"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""dd"" } }, " & vbLf & vbTab & vbTab & vbTab & vbTab & "{ name: ""Hour"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""hh"" } } " & vbLf & vbTab & vbTab & vbTab & "]            " & vbLf & "        }," & vbLf & "        availability: " & vbLf & "        {" & vbLf & "            frequency: ""Hour""," & vbLf & "            interval: 1" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.FolderPathTableSample
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.FolderPathTableSample
  id: FolderPathTableSample
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: FolderPathTableSample
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.FolderPathTableSample
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: FolderPathTableSample
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 463
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string FolderPathTableSample = "\n{\n    name: \"DA_PartitionTest\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"LinkedService-CuratedWikiData\",\n        typeProperties:\n        {            \n            folderPath: \"wikidatagateway/wikisampledataout/\",\n            tableRootLocation: \"wikidatagateway/wikisampledataout/\"            \n        },\n        structure:  \n        [ \n            { name: \"slicetimestamp\", type: \"String\"},\n            { name: \"projectname\", type: \"String\"},\n            { name: \"pageviews\", type: \"Decimal\"}\n        ],\n        availability: \n        {\n            frequency: \"Hour\",\n            interval: 1\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const FolderPathTableSample As String = vbLf & "{" & vbLf & "    name: ""DA_PartitionTest""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""LinkedService-CuratedWikiData""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            folderPath: ""wikidatagateway/wikisampledataout/""," & vbLf & "            tableRootLocation: ""wikidatagateway/wikisampledataout/""            " & vbLf & "        }," & vbLf & "        structure:  " & vbLf & "        [ " & vbLf & "            { name: ""slicetimestamp"", type: ""String""}," & vbLf & "            { name: ""projectname"", type: ""String""}," & vbLf & "            { name: ""pageviews"", type: ""Decimal""}" & vbLf & "        ]," & vbLf & "        availability: " & vbLf & "        {" & vbLf & "            frequency: ""Hour""," & vbLf & "            interval: 1" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureDataLakeStoreDataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureDataLakeStoreDataset
  id: AzureDataLakeStoreDataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: AzureDataLakeStoreDataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AzureDataLakeStoreDataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: AzureDataLakeStoreDataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 490
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string AzureDataLakeStoreDataset = "\n{\n    name: \"Table-AzureDataLakeStore\",\n    properties:\n    {\n        type: \"AzureDataLakeStore\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            folderPath: \"data/{Year}/{Month}/{Day}/{Hour}\",\n            partitionedBy: \n            [\n                { name: \"Year\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy\" } },\n                { name: \"Month\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"MM\" } }, \n                { name: \"Day\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"dd\" } }, \n                { name: \"Hour\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"hh\" } } \n            ],\n            fileName: \"itemname\",\n            format:\n            {\n                type: \"TextFormat\",\n                columnDelimiter: \",\",\n                rowDelimiter: \";\",\n                escapeChar: \"#\",\n                nullValue: \"\\\\N\",\n                encodingName: \"utf-8\"\n            },\n            compression:\n            {\n                type: \"Deflate\",\n                level: \"Fastest\"\n            }\n        },\n        availability:\n        {\n            interval: 1,\n            frequency: \"Hour\"\n        }\n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const AzureDataLakeStoreDataset As String = vbLf & "{" & vbLf & "    name: ""Table-AzureDataLakeStore""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureDataLakeStore""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            folderPath: ""data/{Year}/{Month}/{Day}/{Hour}""," & vbLf & "            partitionedBy: " & vbLf & "            [" & vbLf & "                { name: ""Year"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy"" } }," & vbLf & "                { name: ""Month"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""MM"" } }, " & vbLf & "                { name: ""Day"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""dd"" } }, " & vbLf & "                { name: ""Hour"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""hh"" } } " & vbLf & "            ]," & vbLf & "            fileName: ""itemname""," & vbLf & "            format:" & vbLf & "            {" & vbLf & "                type: ""TextFormat""," & vbLf & "                columnDelimiter: "",""," & vbLf & "                rowDelimiter: "";""," & vbLf & "                escapeChar: ""#""," & vbLf & "                nullValue: ""\\N""," & vbLf & "                encodingName: ""utf-8""" & vbLf & "            }," & vbLf & "            compression:" & vbLf & "            {" & vbLf & "                type: ""Deflate""," & vbLf & "                level: ""Fastest""" & vbLf & "            }" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ODataResourceDataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ODataResourceDataset
  id: ODataResourceDataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: ODataResourceDataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.ODataResourceDataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ODataResourceDataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 533
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string ODataResourceDataset = "\n{\n    name: \"ODataResourceDataset\",\n    properties:\n    {\n        type: \"ODataResource\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {            \n            path: \"path\"\n        },\n        availability:\n        {\n            interval: 1,\n            frequency: \"Hour\"\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const ODataResourceDataset As String = vbLf & "{" & vbLf & "    name: ""ODataResourceDataset""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""ODataResource""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {            " & vbLf & "            path: ""path""" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.WebTableDataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.WebTableDataset
  id: WebTableDataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: WebTableDataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.WebTableDataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: WebTableDataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 553
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string WebTableDataset = "\n{\n    name: \"WebTable\",\n    properties:\n    {\n        type: \"WebTable\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties:\n        {\n            index: 4,            \n            path: \"data/{Year}/{Month}/{Day}/{Hour}\",\n            partitionedBy: \n            [\n                { name: \"Year\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy\" } },\n                { name: \"Month\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"MM\" } }, \n                { name: \"Day\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"dd\" } }, \n                { name: \"Hour\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"hh\" } } \n            ]            \n        },\n        availability:\n        {\n            interval: 1,\n            frequency: \"Hour\"\n        }\n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const WebTableDataset As String = vbLf & "{" & vbLf & "    name: ""WebTable""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""WebTable""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties:" & vbLf & "        {" & vbLf & "            index: 4,            " & vbLf & "            path: ""data/{Year}/{Month}/{Day}/{Hour}""," & vbLf & "            partitionedBy: " & vbLf & "            [" & vbLf & "                { name: ""Year"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy"" } }," & vbLf & "                { name: ""Month"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""MM"" } }, " & vbLf & "                { name: ""Day"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""dd"" } }, " & vbLf & "                { name: ""Hour"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""hh"" } } " & vbLf & "            ]            " & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobOrcFormatTable
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobOrcFormatTable
  id: BlobOrcFormatTable
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: BlobOrcFormatTable
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.BlobOrcFormatTable
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: BlobOrcFormatTable
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 582
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string BlobOrcFormatTable = "\n{\n    name: \"MyDemoBlob\",\n    properties:\n    {\n        type: \"AzureBlob\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        structure:\n        [\n            { name: \"PartitionKey\", type: \"Guid\" },\n            { name: \"RowKey\", type: \"String\" },\n            { name: \"Timestamp\", type: \"String\" },\n            { name: \"game_id \", type: \"String\" },\n        ],\n        typeProperties:\n        {\n            folderPath: \"MyContainer\\\\MySubFolder\\\\$Date\\\\$Time\\\\FileName$Date$Time\\\\{PartitionKey}\",\n            fileName: \"TestBlobName\",\n            format:\n            {\n                type: \"OrcFormat\"\n            },\n            partitionedBy:\n            [\n                { name: \"PartitionKey\", value: { type: \"DateTime\", date: \"SliceStart\", format: \"yyyy-MM-dd\" } },\n            ]\n        },\n        availability:\n        {\n            interval: 1,\n            frequency: \"Hour\",\n            style: \"StartOfInterval\"\n        },\n        policy:\n        {\n            validation:\n            {\n                minimumSizeMB: 200.0\n            }\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const BlobOrcFormatTable As String = vbLf & "{" & vbLf & "    name: ""MyDemoBlob""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AzureBlob""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        structure:" & vbLf & "        [" & vbLf & "            { name: ""PartitionKey"", type: ""Guid"" }," & vbLf & "            { name: ""RowKey"", type: ""String"" }," & vbLf & "            { name: ""Timestamp"", type: ""String"" }," & vbLf & "            { name: ""game_id "", type: ""String"" }," & vbLf & "        ]," & vbLf & "        typeProperties:" & vbLf & "        {" & vbLf & "            folderPath: ""MyContainer\\MySubFolder\\$Date\\$Time\\FileName$Date$Time\\{PartitionKey}""," & vbLf & "            fileName: ""TestBlobName""," & vbLf & "            format:" & vbLf & "            {" & vbLf & "                type: ""OrcFormat""" & vbLf & "            }," & vbLf & "            partitionedBy:" & vbLf & "            [" & vbLf & "                { name: ""PartitionKey"", value: { type: ""DateTime"", date: ""SliceStart"", format: ""yyyy-MM-dd"" } }," & vbLf & "            ]" & vbLf & "        }," & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1," & vbLf & "            frequency: ""Hour""," & vbLf & "            style: ""StartOfInterval""" & vbLf & "        }," & vbLf & "        policy:" & vbLf & "        {" & vbLf & "            validation:" & vbLf & "            {" & vbLf & "                minimumSizeMB: 200.0" & vbLf & "            }" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.OnpremieseCassandraDataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.OnpremieseCassandraDataset
  id: OnpremieseCassandraDataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: OnpremieseCassandraDataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.OnpremieseCassandraDataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: OnpremieseCassandraDataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 625
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string OnpremieseCassandraDataset = "\n{ \n    name: \"CassandraTable\", \n    properties: { \n        type: \"CassandraTable\", \n        linkedServiceName: \"ls\",\n        typeProperties: { \n            tableName: \"fake table\",\n            keyspace: \"fake key space\" \n        }, \n        availability: { \n            frequency: \"Hour\", \n            interval: \"1\" \n        } \n    } \n} \n"
    content.vb: >-
      <JsonSample>

      Public Const OnpremieseCassandraDataset As String = vbLf & "{ " & vbLf & "    name: ""CassandraTable"", " & vbLf & "    properties: { " & vbLf & "        type: ""CassandraTable"", " & vbLf & "        linkedServiceName: ""ls""," & vbLf & "        typeProperties: { " & vbLf & "            tableName: ""fake table""," & vbLf & "            keyspace: ""fake key space"" " & vbLf & "        }, " & vbLf & "        availability: { " & vbLf & "            frequency: ""Hour"", " & vbLf & "            interval: ""1"" " & vbLf & "        } " & vbLf & "    } " & vbLf & "} " & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.MongoDbDataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.MongoDbDataset
  id: MongoDbDataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: MongoDbDataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.MongoDbDataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: MongoDbDataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 644
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string MongoDbDataset = "\n{ \n    name: \"MongoDbTable\", \n    properties: { \n        type: \"MongoDbCollection\", \n        linkedServiceName: \"fake ls\",\n        typeProperties: { \n            collectionName: \"fake table\"\n        }, \n        availability: { \n            frequency: \"Hour\", \n            interval: 1\n        } \n    }\n}\n"
    content.vb: >-
      <JsonSample>

      Public Const MongoDbDataset As String = vbLf & "{ " & vbLf & "    name: ""MongoDbTable"", " & vbLf & "    properties: { " & vbLf & "        type: ""MongoDbCollection"", " & vbLf & "        linkedServiceName: ""fake ls""," & vbLf & "        typeProperties: { " & vbLf & "            collectionName: ""fake table""" & vbLf & "        }, " & vbLf & "        availability: { " & vbLf & "            frequency: ""Hour"", " & vbLf & "            interval: 1" & vbLf & "        } " & vbLf & "    }" & vbLf & "}" & vbLf
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AmazonS3Dataset
  commentId: F:DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AmazonS3Dataset
  id: AmazonS3Dataset
  parent: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  langs:
  - csharp
  - vb
  name: AmazonS3Dataset
  fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples.AmazonS3Dataset
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: AmazonS3Dataset
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonSamples/DatasetJsonSamples.cs
    startLine: 662
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework.JsonSamples
  syntax:
    content: >-
      [JsonSample]

      public const string AmazonS3Dataset = "\n{\n    name: \"AmazonS3Dataset\",\n    properties:\n    {\n        type: \"AmazonS3\",\n        linkedServiceName: \"MyLinkedServiceName\",\n        typeProperties: { \n            bucketName: \"sample bucket\",\n            key: \"sample key\",\n            prefix: \"sample prefix\",\n            version: \"sample version\",\n            format:{\n                type:\"OrcFormat\"\n            },\n            compression:\n            {\n                type: \"Deflate\",\n                level: \"Fastest\"\n            }\n        }, \n        availability:\n        {\n            interval: 1,\n            frequency: \"Hour\"\n        }\n    }\n}"
    content.vb: >-
      <JsonSample>

      Public Const AmazonS3Dataset As String = vbLf & "{" & vbLf & "    name: ""AmazonS3Dataset""," & vbLf & "    properties:" & vbLf & "    {" & vbLf & "        type: ""AmazonS3""," & vbLf & "        linkedServiceName: ""MyLinkedServiceName""," & vbLf & "        typeProperties: { " & vbLf & "            bucketName: ""sample bucket""," & vbLf & "            key: ""sample key""," & vbLf & "            prefix: ""sample prefix""," & vbLf & "            version: ""sample version""," & vbLf & "            format:{" & vbLf & "                type:""OrcFormat""" & vbLf & "            }," & vbLf & "            compression:" & vbLf & "            {" & vbLf & "                type: ""Deflate""," & vbLf & "                level: ""Fastest""" & vbLf & "            }" & vbLf & "        }, " & vbLf & "        availability:" & vbLf & "        {" & vbLf & "            interval: 1," & vbLf & "            frequency: ""Hour""" & vbLf & "        }" & vbLf & "    }" & vbLf & "}"
    return:
      type: System.String
  attributes:
  - type: DataFactory.Tests.Framework.JsonSampleAttribute
    ctor: DataFactory.Tests.Framework.JsonSampleAttribute.#ctor
    arguments: []
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
references:
- uid: DataFactory.Tests.Framework.JsonSamples
  isExternal: false
  name: DataFactory.Tests.Framework.JsonSamples
  fullName: DataFactory.Tests.Framework.JsonSamples
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}
  parent: DataFactory.Tests.Framework.JsonSamples
  definition: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
  name: JsonSampleCollection<DatasetJsonSamples>
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples>
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples)
  name.vb: JsonSampleCollection(Of DatasetJsonSamples)
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
    name: JsonSampleCollection
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection
  - name: <
    fullName: <
  - uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
    name: DatasetJsonSamples
    fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
    name: JsonSampleCollection
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection
  - name: '(Of '
    fullName: '(Of '
  - uid: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
    name: DatasetJsonSamples
    fullName: DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable{System.Object[]}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Object[]>
  fullName: System.Collections.Generic.IEnumerable<System.Object[]>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Object())
  name.vb: IEnumerable(Of Object())
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
- uid: System.Collections.IEnumerable
  parent: System.Collections
  isExternal: true
  name: IEnumerable
  fullName: System.Collections.IEnumerable
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}.GetEnumerator
  parent: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}
  definition: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
  name: GetEnumerator()
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples>.GetEnumerator()
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples).GetEnumerator()
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
    name: GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
    name: GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}.System#Collections#IEnumerable#GetEnumerator
  parent: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection{DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples}
  definition: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
  name: IEnumerable.GetEnumerator()
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples>.System.Collections.IEnumerable.GetEnumerator()
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of DataFactory.Tests.Framework.JsonSamples.DatasetJsonSamples).System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
  parent: DataFactory.Tests.Framework.JsonSamples
  isExternal: false
  name: JsonSampleCollection<T>
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<T>
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of T)
  name.vb: JsonSampleCollection(Of T)
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
    name: JsonSampleCollection
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
    name: JsonSampleCollection
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections
  isExternal: false
  name: System.Collections
  fullName: System.Collections
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
  parent: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
  isExternal: false
  name: GetEnumerator()
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<T>.GetEnumerator()
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of T).GetEnumerator()
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
    name: GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<T>.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.GetEnumerator
    name: GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of T).GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
  parent: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1
  isExternal: false
  name: IEnumerable.GetEnumerator()
  fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<T>.System.Collections.IEnumerable.GetEnumerator()
  fullname.vb: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of T).System.Collections.IEnumerable.GetEnumerator()
  name.vb: System.Collections.IEnumerable.GetEnumerator()
  spec.csharp:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: IEnumerable.GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection<T>.System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection`1.System#Collections#IEnumerable#GetEnumerator
    name: System.Collections.IEnumerable.GetEnumerator
    fullName: DataFactory.Tests.Framework.JsonSamples.JsonSampleCollection(Of T).System.Collections.IEnumerable.GetEnumerator
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
