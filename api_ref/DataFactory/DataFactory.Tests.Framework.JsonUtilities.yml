items:
- uid: DataFactory.Tests.Framework.JsonUtilities
  commentId: T:DataFactory.Tests.Framework.JsonUtilities
  id: JsonUtilities
  parent: DataFactory.Tests.Framework
  children:
  - DataFactory.Tests.Framework.JsonUtilities.EncryptedStringSentinel
  - DataFactory.Tests.Framework.JsonUtilities.ExtendedProperties
  - DataFactory.Tests.Framework.JsonUtilities.ExtendedPropertyNameProperties
  - DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJObject(Newtonsoft.Json.Linq.JObject,System.String)
  - DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJToken(Newtonsoft.Json.Linq.JObject,System.String)
  - DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyInfo(System.Type)
  - DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyNames(System.Type)
  - DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializer)
  - DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializerSettings)
  - DataFactory.Tests.Framework.JsonUtilities.HubName
  - DataFactory.Tests.Framework.JsonUtilities.IsTypeNameMatch(System.String,System.String)
  - DataFactory.Tests.Framework.JsonUtilities.JsonDotNetType
  - DataFactory.Tests.Framework.JsonUtilities.MoveJTokens(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String[])
  - DataFactory.Tests.Framework.JsonUtilities.PropertyHasNonDefaultValue``1(``0)
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameActivities
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparer
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparison
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameDescription
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameId
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameName
  - DataFactory.Tests.Framework.JsonUtilities.PropertyNameProperties
  - DataFactory.Tests.Framework.JsonUtilities.ReferenceId
  - DataFactory.Tests.Framework.JsonUtilities.Settings
  - DataFactory.Tests.Framework.JsonUtilities.Type
  - DataFactory.Tests.Framework.JsonUtilities.TypePropertyNameProperties
  - DataFactory.Tests.Framework.JsonUtilities.WritePropertyName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  - DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  - DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,System.String,System.String,Newtonsoft.Json.JsonSerializer)
  - DataFactory.Tests.Framework.JsonUtilities.WriteTypeName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: JsonUtilities
  fullName: DataFactory.Tests.Framework.JsonUtilities
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: JsonUtilities
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 32
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nMisc utilities that facilitate working with JSON.\n"
  example: []
  syntax:
    content: public class JsonUtilities
    content.vb: Public Class JsonUtilities
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparison
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparison
  id: PropertyNameComparison
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameComparison
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparison
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameComparison
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 37
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const StringComparison PropertyNameComparison = StringComparison.OrdinalIgnoreCase
    content.vb: Public Const PropertyNameComparison As StringComparison = StringComparison.OrdinalIgnoreCase
    return:
      type: System.StringComparison
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparer
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparer
  id: PropertyNameComparer
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameComparer
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameComparer
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameComparer
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 38
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static StringComparer PropertyNameComparer
    content.vb: Public Shared PropertyNameComparer As StringComparer
    return:
      type: System.StringComparer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.Type
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.Type
  id: Type
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: Type
  fullName: DataFactory.Tests.Framework.JsonUtilities.Type
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: Type
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 44
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nType property name required by Hydra to resolve polymorphic property types.\nAppears in our user-facing JSON.\n"
  example: []
  syntax:
    content: public const string Type = "type"
    content.vb: Public Const Type As String = "type"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.HubName
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.HubName
  id: HubName
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: HubName
  fullName: DataFactory.Tests.Framework.JsonUtilities.HubName
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: HubName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 46
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string HubName = "hubName"
    content.vb: Public Const HubName As String = "hubName"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.ExtendedProperties
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.ExtendedProperties
  id: ExtendedProperties
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: ExtendedProperties
  fullName: DataFactory.Tests.Framework.JsonUtilities.ExtendedProperties
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ExtendedProperties
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 48
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string ExtendedProperties = "extendedProperties"
    content.vb: Public Const ExtendedProperties As String = "extendedProperties"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.ReferenceId
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.ReferenceId
  id: ReferenceId
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: ReferenceId
  fullName: DataFactory.Tests.Framework.JsonUtilities.ReferenceId
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReferenceId
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 54
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReferenceId (id) is the property identifying the resource entity. \nAppears in our user-facing JSON on GET calls.\n"
  example: []
  syntax:
    content: public const string ReferenceId = "id"
    content.vb: Public Const ReferenceId As String = "id"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.JsonDotNetType
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.JsonDotNetType
  id: JsonDotNetType
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: JsonDotNetType
  fullName: DataFactory.Tests.Framework.JsonUtilities.JsonDotNetType
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: JsonDotNetType
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 60
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nType property name, optionally used by JSON.NET to resolve polymorphic property types. \nFor internal use only, does not appear in our user-facing JSON.\n"
  example: []
  syntax:
    content: public const string JsonDotNetType = "$type"
    content.vb: Public Const JsonDotNetType As String = "$type"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameProperties
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameProperties
  id: PropertyNameProperties
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameProperties
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameProperties
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameProperties
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 62
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string PropertyNameProperties = "Properties"
    content.vb: Public Const PropertyNameProperties As String = "Properties"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.TypePropertyNameProperties
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.TypePropertyNameProperties
  id: TypePropertyNameProperties
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: TypePropertyNameProperties
  fullName: DataFactory.Tests.Framework.JsonUtilities.TypePropertyNameProperties
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TypePropertyNameProperties
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 63
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string TypePropertyNameProperties = "TypeProperties"
    content.vb: Public Const TypePropertyNameProperties As String = "TypeProperties"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.ExtendedPropertyNameProperties
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.ExtendedPropertyNameProperties
  id: ExtendedPropertyNameProperties
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: ExtendedPropertyNameProperties
  fullName: DataFactory.Tests.Framework.JsonUtilities.ExtendedPropertyNameProperties
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ExtendedPropertyNameProperties
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 64
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string ExtendedPropertyNameProperties = "ExtendedProperties"
    content.vb: Public Const ExtendedPropertyNameProperties As String = "ExtendedProperties"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameActivities
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameActivities
  id: PropertyNameActivities
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameActivities
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameActivities
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameActivities
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 65
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string PropertyNameActivities = "Activities"
    content.vb: Public Const PropertyNameActivities As String = "Activities"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameName
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameName
  id: PropertyNameName
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameName
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameName
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 66
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string PropertyNameName = "Name"
    content.vb: Public Const PropertyNameName As String = "Name"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameId
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameId
  id: PropertyNameId
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameId
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameId
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameId
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 67
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string PropertyNameId = "Id"
    content.vb: Public Const PropertyNameId As String = "Id"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyNameDescription
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.PropertyNameDescription
  id: PropertyNameDescription
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyNameDescription
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyNameDescription
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyNameDescription
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 68
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string PropertyNameDescription = "Description"
    content.vb: Public Const PropertyNameDescription As String = "Description"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.EncryptedStringSentinel
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.EncryptedStringSentinel
  id: EncryptedStringSentinel
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: EncryptedStringSentinel
  fullName: DataFactory.Tests.Framework.JsonUtilities.EncryptedStringSentinel
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: EncryptedStringSentinel
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 70
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public const string EncryptedStringSentinel = "$EncryptedString$"
    content.vb: Public Const EncryptedStringSentinel As String = "$EncryptedString$"
    return:
      type: System.String
  modifiers.csharp:
  - public
  - const
  modifiers.vb:
  - Public
  - Const
- uid: DataFactory.Tests.Framework.JsonUtilities.Settings
  commentId: F:DataFactory.Tests.Framework.JsonUtilities.Settings
  id: Settings
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: Settings
  fullName: DataFactory.Tests.Framework.JsonUtilities.Settings
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: Settings
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 72
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static JsonSerializerSettings Settings
    content.vb: Public Shared Settings As JsonSerializerSettings
    return:
      type: Newtonsoft.Json.JsonSerializerSettings
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.MoveJTokens(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String[])
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.MoveJTokens(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String[])
  id: MoveJTokens(Newtonsoft.Json.Linq.JObject,Newtonsoft.Json.Linq.JObject,System.String[])
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: MoveJTokens(JObject, JObject, String[])
  fullName: DataFactory.Tests.Framework.JsonUtilities.MoveJTokens(Newtonsoft.Json.Linq.JObject, Newtonsoft.Json.Linq.JObject, System.String[])
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: MoveJTokens
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 86
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nMoves the tokens with the given names from the source to the target.\n"
  example: []
  syntax:
    content: public static void MoveJTokens(JObject source, JObject target, params string[] tokenNames)
    content.vb: Public Shared Sub MoveJTokens(source As JObject, target As JObject, ParamArray tokenNames As String())
    parameters:
    - id: source
      type: Newtonsoft.Json.Linq.JObject
      description: 
    - id: target
      type: Newtonsoft.Json.Linq.JObject
      description: 
    - id: tokenNames
      type: System.String[]
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.JsonUtilities.MoveJTokens(Newtonsoft.Json.Linq.JObject, Newtonsoft.Json.Linq.JObject, System.String())
  name.vb: MoveJTokens(JObject, JObject, String())
- uid: DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJToken(Newtonsoft.Json.Linq.JObject,System.String)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJToken(Newtonsoft.Json.Linq.JObject,System.String)
  id: GetAndRemoveJToken(Newtonsoft.Json.Linq.JObject,System.String)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetAndRemoveJToken(JObject, String)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJToken(Newtonsoft.Json.Linq.JObject, System.String)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetAndRemoveJToken
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 105
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the JToken inside of the given JObject with the given name, removing\nit from the JObject. Returns null if not found.\n"
  example: []
  syntax:
    content: public static JToken GetAndRemoveJToken(JObject jObject, string tokenName)
    content.vb: Public Shared Function GetAndRemoveJToken(jObject As JObject, tokenName As String) As JToken
    parameters:
    - id: jObject
      type: Newtonsoft.Json.Linq.JObject
      description: 
    - id: tokenName
      type: System.String
      description: 
    return:
      type: Newtonsoft.Json.Linq.JToken
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJObject(Newtonsoft.Json.Linq.JObject,System.String)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJObject(Newtonsoft.Json.Linq.JObject,System.String)
  id: GetAndRemoveJObject(Newtonsoft.Json.Linq.JObject,System.String)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetAndRemoveJObject(JObject, String)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetAndRemoveJObject(Newtonsoft.Json.Linq.JObject, System.String)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetAndRemoveJObject
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 122
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the JToken (cast to a JObject) inside of the given JObject with the given name, removing\nit from the JObject. Returns null if not found. Throws an error if the JToken is not a JObject\n"
  example: []
  syntax:
    content: public static JObject GetAndRemoveJObject(JObject jObject, string tokenName)
    content.vb: Public Shared Function GetAndRemoveJObject(jObject As JObject, tokenName As String) As JObject
    parameters:
    - id: jObject
      type: Newtonsoft.Json.Linq.JObject
      description: 
    - id: tokenName
      type: System.String
      description: 
    return:
      type: Newtonsoft.Json.Linq.JObject
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyInfo(System.Type)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyInfo(System.Type)
  id: GetDataMemberPropertyInfo(System.Type)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetDataMemberPropertyInfo(Type)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyInfo(System.Type)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetDataMemberPropertyInfo
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 138
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the DataMember property info of the given type.\n"
  example: []
  syntax:
    content: public static IEnumerable<Tuple<PropertyInfo, DataMemberAttribute>> GetDataMemberPropertyInfo(Type type)
    content.vb: Public Shared Function GetDataMemberPropertyInfo(type As Type) As IEnumerable(Of Tuple(Of PropertyInfo, DataMemberAttribute))
    parameters:
    - id: type
      type: System.Type
    return:
      type: System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.PropertyInfo,System.Runtime.Serialization.DataMemberAttribute}}
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyNames(System.Type)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyNames(System.Type)
  id: GetDataMemberPropertyNames(System.Type)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetDataMemberPropertyNames(Type)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetDataMemberPropertyNames(System.Type)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetDataMemberPropertyNames
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 161
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the DataMamber property names of the given type.\n"
  example: []
  syntax:
    content: public static IEnumerable<string> GetDataMemberPropertyNames(Type type)
    content.vb: Public Shared Function GetDataMemberPropertyNames(type As Type) As IEnumerable(Of String)
    parameters:
    - id: type
      type: System.Type
      description: 
    return:
      type: System.Collections.Generic.IEnumerable{System.String}
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializer)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializer)
  id: GetPropertyName(System.String,Newtonsoft.Json.JsonSerializer)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetPropertyName(String, JsonSerializer)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetPropertyName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 173
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the given property name, applying to it any transforms specified by \nthe given serializer's settings (i.e. converting it to camelCase).\n"
  example: []
  syntax:
    content: public static string GetPropertyName(string propertyName, JsonSerializer serializer)
    content.vb: Public Shared Function GetPropertyName(propertyName As String, serializer As JsonSerializer) As String
    parameters:
    - id: propertyName
      type: System.String
      description: 
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: 
    return:
      type: System.String
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializerSettings)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String,Newtonsoft.Json.JsonSerializerSettings)
  id: GetPropertyName(System.String,Newtonsoft.Json.JsonSerializerSettings)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: GetPropertyName(String, JsonSerializerSettings)
  fullName: DataFactory.Tests.Framework.JsonUtilities.GetPropertyName(System.String, Newtonsoft.Json.JsonSerializerSettings)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: GetPropertyName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 191
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns the given property name, applying to it any transforms specified by \nthe given serializer's settings (i.e. converting it to camelCase).\n"
  example: []
  syntax:
    content: public static string GetPropertyName(string propertyName, JsonSerializerSettings serializerSettings)
    content.vb: Public Shared Function GetPropertyName(propertyName As String, serializerSettings As JsonSerializerSettings) As String
    parameters:
    - id: propertyName
      type: System.String
      description: 
    - id: serializerSettings
      type: Newtonsoft.Json.JsonSerializerSettings
      description: 
    return:
      type: System.String
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.WritePropertyName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.WritePropertyName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  id: WritePropertyName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: WritePropertyName(JsonWriter, String, JsonSerializer)
  fullName: DataFactory.Tests.Framework.JsonUtilities.WritePropertyName(Newtonsoft.Json.JsonWriter, System.String, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: WritePropertyName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 222
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nWrites to the given writer the given property names, transformed as appropriate according to the\ngiven serializer's settings (i.e. converted to camelCase).\n"
  example: []
  syntax:
    content: public static void WritePropertyName(JsonWriter writer, string propertyName, JsonSerializer serializer)
    content.vb: Public Shared Sub WritePropertyName(writer As JsonWriter, propertyName As String, serializer As JsonSerializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: 
    - id: propertyName
      type: System.String
      description: 
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.PropertyHasNonDefaultValue``1(``0)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.PropertyHasNonDefaultValue``1(``0)
  id: PropertyHasNonDefaultValue``1(``0)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: PropertyHasNonDefaultValue<T>(T)
  fullName: DataFactory.Tests.Framework.JsonUtilities.PropertyHasNonDefaultValue<T>(T)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: PropertyHasNonDefaultValue
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 233
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns whether the given property value is non-default. For an IEnumerable, null and empty are both considered defaults.\n"
  example: []
  syntax:
    content: public static bool PropertyHasNonDefaultValue<T>(T propertyValue)
    content.vb: Public Shared Function PropertyHasNonDefaultValue(Of T)(propertyValue As T) As Boolean
    parameters:
    - id: propertyValue
      type: '{T}'
      description: 
    typeParameters:
    - id: T
    return:
      type: System.Boolean
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: DataFactory.Tests.Framework.JsonUtilities.PropertyHasNonDefaultValue(Of T)(T)
  name.vb: PropertyHasNonDefaultValue(Of T)(T)
- uid: DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,System.String,System.String,Newtonsoft.Json.JsonSerializer)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,System.String,System.String,Newtonsoft.Json.JsonSerializer)
  id: WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,System.String,System.String,Newtonsoft.Json.JsonSerializer)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: WriteReferenceId(JsonWriter, String, String, String, JsonSerializer)
  fullName: DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter, System.String, System.String, System.String, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: WriteReferenceId
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 293
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static void WriteReferenceId(JsonWriter writer, string referenceIdBase, string resourceType, string resourceName, JsonSerializer serializer)
    content.vb: Public Shared Sub WriteReferenceId(writer As JsonWriter, referenceIdBase As String, resourceType As String, resourceName As String, serializer As JsonSerializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
    - id: referenceIdBase
      type: System.String
    - id: resourceType
      type: System.String
    - id: resourceName
      type: System.String
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  id: WriteReferenceId(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: WriteReferenceId(JsonWriter, String, JsonSerializer)
  fullName: DataFactory.Tests.Framework.JsonUtilities.WriteReferenceId(Newtonsoft.Json.JsonWriter, System.String, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: WriteReferenceId
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 314
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  syntax:
    content: public static void WriteReferenceId(JsonWriter writer, string referenceId, JsonSerializer serializer)
    content.vb: Public Shared Sub WriteReferenceId(writer As JsonWriter, referenceId As String, serializer As JsonSerializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
    - id: referenceId
      type: System.String
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.IsTypeNameMatch(System.String,System.String)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.IsTypeNameMatch(System.String,System.String)
  id: IsTypeNameMatch(System.String,System.String)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: IsTypeNameMatch(String, String)
  fullName: DataFactory.Tests.Framework.JsonUtilities.IsTypeNameMatch(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: IsTypeNameMatch
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 329
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nReturns whether the given type name matches the given short type name (should be a const) with or without the long namespace prefix. \n"
  example: []
  syntax:
    content: public static bool IsTypeNameMatch(string actualTypeName, string shortTypeName)
    content.vb: Public Shared Function IsTypeNameMatch(actualTypeName As String, shortTypeName As String) As Boolean
    parameters:
    - id: actualTypeName
      type: System.String
      description: 
    - id: shortTypeName
      type: System.String
      description: 
    return:
      type: System.Boolean
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DataFactory.Tests.Framework.JsonUtilities.WriteTypeName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  commentId: M:DataFactory.Tests.Framework.JsonUtilities.WriteTypeName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  id: WriteTypeName(Newtonsoft.Json.JsonWriter,System.String,Newtonsoft.Json.JsonSerializer)
  parent: DataFactory.Tests.Framework.JsonUtilities
  langs:
  - csharp
  - vb
  name: WriteTypeName(JsonWriter, String, JsonSerializer)
  fullName: DataFactory.Tests.Framework.JsonUtilities.WriteTypeName(Newtonsoft.Json.JsonWriter, System.String, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: WriteTypeName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/Framework/JsonUtilities.cs
    startLine: 340
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.Framework
  summary: "\nWrites the given type name, prefaced with the long namespace prefix.\n"
  example: []
  syntax:
    content: public static void WriteTypeName(JsonWriter writer, string shortTypeName, JsonSerializer serializer)
    content.vb: Public Shared Sub WriteTypeName(writer As JsonWriter, shortTypeName As String, serializer As JsonSerializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: 
    - id: shortTypeName
      type: System.String
      description: 
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: 
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DataFactory.Tests.Framework
  isExternal: false
  name: DataFactory.Tests.Framework
  fullName: DataFactory.Tests.Framework
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.StringComparison
  parent: System
  isExternal: true
  name: StringComparison
  fullName: System.StringComparison
- uid: System.StringComparer
  parent: System
  isExternal: true
  name: StringComparer
  fullName: System.StringComparer
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Newtonsoft.Json.JsonSerializerSettings
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializerSettings
  fullName: Newtonsoft.Json.JsonSerializerSettings
- uid: Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Newtonsoft.Json.Linq.JObject
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JObject
  fullName: Newtonsoft.Json.Linq.JObject
- uid: System.String[]
  isExternal: true
  name: String[]
  fullName: System.String[]
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: ()
    fullName: ()
- uid: Newtonsoft.Json.Linq
  isExternal: false
  name: Newtonsoft.Json.Linq
  fullName: Newtonsoft.Json.Linq
- uid: Newtonsoft.Json.Linq.JToken
  parent: Newtonsoft.Json.Linq
  isExternal: true
  name: JToken
  fullName: Newtonsoft.Json.Linq.JToken
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System.Collections.Generic.IEnumerable{System.Tuple{System.Reflection.PropertyInfo,System.Runtime.Serialization.DataMemberAttribute}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<Tuple<PropertyInfo, DataMemberAttribute>>
  fullName: System.Collections.Generic.IEnumerable<System.Tuple<System.Reflection.PropertyInfo, System.Runtime.Serialization.DataMemberAttribute>>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.Tuple(Of System.Reflection.PropertyInfo, System.Runtime.Serialization.DataMemberAttribute))
  name.vb: IEnumerable(Of Tuple(Of PropertyInfo, DataMemberAttribute))
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataMemberAttribute
    name: DataMemberAttribute
    fullName: System.Runtime.Serialization.DataMemberAttribute
    isExternal: true
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Tuple`2
    name: Tuple
    fullName: System.Tuple
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Reflection.PropertyInfo
    name: PropertyInfo
    fullName: System.Reflection.PropertyInfo
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Runtime.Serialization.DataMemberAttribute
    name: DataMemberAttribute
    fullName: System.Runtime.Serialization.DataMemberAttribute
    isExternal: true
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  parent: System.Collections.Generic
  isExternal: true
  name: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IEnumerable{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<String>
  fullName: System.Collections.Generic.IEnumerable<System.String>
  fullname.vb: System.Collections.Generic.IEnumerable(Of System.String)
  name.vb: IEnumerable(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
