items:
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  commentId: T:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  id: TypeRegistrationTestBase`2
  parent: DataFactory.Tests.UnitTests
  children:
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  - DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  langs:
  - csharp
  - vb
  name: TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>
  type: Class
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TypeRegistrationTestBase
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 27
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'public abstract class TypeRegistrationTestBase<TRegistered, TGenericTypeProperties> : UnitTestBase where TRegistered : TypeProperties where TGenericTypeProperties : TRegistered, IGenericTypeProperties, new ()'
    content.vb: >-
      Public MustInherit Class TypeRegistrationTestBase(Of TRegistered As TypeProperties, TGenericTypeProperties As {TRegistered, IGenericTypeProperties, New})
          Inherits UnitTestBase
    typeParameters:
    - id: TRegistered
    - id: TGenericTypeProperties
  inheritance:
  - System.Object
  - DataFactory.Tests.UnitTests.UnitTestBase
  inheritedMembers:
  - DataFactory.Tests.UnitTests.UnitTestBase.Client
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
  name.vb: TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties)
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  commentId: M:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterTypeWithReservedName``1
  id: TestCanRegisterTypeWithReservedName``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: TestCanRegisterTypeWithReservedName<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterTypeWithReservedName<T>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TestCanRegisterTypeWithReservedName
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 31
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'protected void TestCanRegisterTypeWithReservedName<T>()where T : TypeProperties'
    content.vb: Protected Sub TestCanRegisterTypeWithReservedName(Of T As TypeProperties)
    typeParameters:
    - id: T
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterTypeWithReservedName(Of T)()
  name.vb: TestCanRegisterTypeWithReservedName(Of T)()
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  commentId: M:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.RegisteringTypeTwiceWithoutForceThrowsException``1
  id: RegisteringTypeTwiceWithoutForceThrowsException``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: RegisteringTypeTwiceWithoutForceThrowsException<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.RegisteringTypeTwiceWithoutForceThrowsException<T>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: RegisteringTypeTwiceWithoutForceThrowsException
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 46
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'protected void RegisteringTypeTwiceWithoutForceThrowsException<T>()where T : TypeProperties'
    content.vb: Protected Sub RegisteringTypeTwiceWithoutForceThrowsException(Of T As TypeProperties)
    typeParameters:
    - id: T
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
  name.vb: RegisteringTypeTwiceWithoutForceThrowsException(Of T)()
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  commentId: M:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestCanRegisterType``1
  id: TestCanRegisterType``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: TestCanRegisterType<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestCanRegisterType<T>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TestCanRegisterType
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 55
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'protected void TestCanRegisterType<T>()where T : TRegistered'
    content.vb: Protected Sub TestCanRegisterType(Of T As TRegistered)
    typeParameters:
    - id: T
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestCanRegisterType(Of T)()
  name.vb: TestCanRegisterType(Of T)()
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  commentId: M:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestReservedTypeIsRegistered``1
  id: TestReservedTypeIsRegistered``1
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: TestReservedTypeIsRegistered<T>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestReservedTypeIsRegistered<T>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TestReservedTypeIsRegistered
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 67
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'protected void TestReservedTypeIsRegistered<T>()where T : TRegistered'
    content.vb: Protected Sub TestReservedTypeIsRegistered(Of T As TRegistered)
    typeParameters:
    - id: T
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestReservedTypeIsRegistered(Of T)()
  name.vb: TestReservedTypeIsRegistered(Of T)()
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  commentId: M:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  id: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive``2
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()
  type: Method
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 74
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: 'protected void TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive<TUserRegistered, TUserRegisteredDifferentCase>()where TUserRegistered : TRegistered where TUserRegisteredDifferentCase : TRegistered'
    content.vb: Protected Sub TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered As TRegistered, TUserRegisteredDifferentCase As TRegistered)
    typeParameters:
    - id: TUserRegistered
    - id: TUserRegisteredDifferentCase
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
  name.vb: TestRegisteringTypeTwiceThrowsExceptionCaseInsensitive(Of TUserRegistered, TUserRegisteredDifferentCase)()
- uid: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  commentId: F:DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2.ReservedTypesList
  id: ReservedTypesList
  parent: DataFactory.Tests.UnitTests.TypeRegistrationTestBase`2
  langs:
  - csharp
  - vb
  name: ReservedTypesList
  fullName: DataFactory.Tests.UnitTests.TypeRegistrationTestBase<TRegistered, TGenericTypeProperties>.ReservedTypesList
  type: Field
  source:
    remote:
      path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
      branch: master
      repo: https://github.com/Azure/azure-sdk-for-net
    id: ReservedTypesList
    path: src/ResourceManagement/DataFactory/DataFactory.Tests/UnitTests/TypeRegistrationTestBase.cs
    startLine: 115
  assemblies:
  - DataFactory.Tests
  namespace: DataFactory.Tests.UnitTests
  syntax:
    content: protected static readonly Lazy<IEnumerable<object[]>> ReservedTypesList
    content.vb: Protected Shared ReadOnly ReservedTypesList As Lazy(Of IEnumerable(Of Object()))
    return:
      type: System.Lazy{System.Collections.Generic.IEnumerable{System.Object[]}}
  modifiers.csharp:
  - protected
  - static
  - readonly
  modifiers.vb:
  - Protected
  - Shared
  - ReadOnly
  fullName.vb: DataFactory.Tests.UnitTests.TypeRegistrationTestBase(Of TRegistered, TGenericTypeProperties).ReservedTypesList
references:
- uid: DataFactory.Tests.UnitTests
  isExternal: false
  name: DataFactory.Tests.UnitTests
  fullName: DataFactory.Tests.UnitTests
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: DataFactory.Tests.UnitTests.UnitTestBase
  parent: DataFactory.Tests.UnitTests
  isExternal: false
  name: UnitTestBase
  fullName: DataFactory.Tests.UnitTests.UnitTestBase
- uid: DataFactory.Tests.UnitTests.UnitTestBase.Client
  parent: DataFactory.Tests.UnitTests.UnitTestBase
  isExternal: false
  name: Client
  fullName: DataFactory.Tests.UnitTests.UnitTestBase.Client
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Lazy{System.Collections.Generic.IEnumerable{System.Object[]}}
  parent: System
  definition: System.Lazy`1
  name: Lazy<IEnumerable<Object[]>>
  fullName: System.Lazy<System.Collections.Generic.IEnumerable<System.Object[]>>
  fullname.vb: System.Lazy(Of System.Collections.Generic.IEnumerable(Of System.Object()))
  name.vb: Lazy(Of IEnumerable(Of Object()))
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: '[]'
    fullName: '[]'
  - name: '>'
    fullName: '>'
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ()
    fullName: ()
  - name: )
    fullName: )
  - name: )
    fullName: )
- uid: System.Lazy`1
  parent: System
  isExternal: true
  name: Lazy<T>
  fullName: System.Lazy<T>
  fullname.vb: System.Lazy(Of T)
  name.vb: Lazy(Of T)
  spec.csharp:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Lazy`1
    name: Lazy
    fullName: System.Lazy
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
