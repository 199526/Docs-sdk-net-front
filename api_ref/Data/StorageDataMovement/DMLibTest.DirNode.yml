items:
- uid: DMLibTest.DirNode
  commentId: T:DMLibTest.DirNode
  id: DirNode
  parent: DMLibTest
  children:
  - DMLibTest.DirNode.#ctor(System.String)
  - DMLibTest.DirNode.AddDirNode(DMLibTest.DirNode)
  - DMLibTest.DirNode.AddFileNode(DMLibTest.FileNode)
  - DMLibTest.DirNode.Clone
  - DMLibTest.DirNode.CompareTo(DMLibTest.DirNode)
  - DMLibTest.DirNode.DeleteDirNode(System.String)
  - DMLibTest.DirNode.DeleteFileNode(System.String)
  - DMLibTest.DirNode.DirNodeCount
  - DMLibTest.DirNode.DirNodes
  - DMLibTest.DirNode.Display(System.Int32)
  - DMLibTest.DirNode.EnumerateDirNodesRecursively
  - DMLibTest.DirNode.EnumerateFileNodesRecursively
  - DMLibTest.DirNode.FileNodeCount
  - DMLibTest.DirNode.FileNodeCountRecursive
  - DMLibTest.DirNode.FileNodes
  - DMLibTest.DirNode.GetDirNode(System.String)
  - DMLibTest.DirNode.GetFileNode(System.String)
  - DMLibTest.DirNode.IsEmpty
  - DMLibTest.DirNode.NonEmptyDirNodeCount
  langs:
  - csharp
  - vb
  name: DirNode
  fullName: DMLibTest.DirNode
  type: Class
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DirNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 206
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: 'public class DirNode : DataInfoNode, IComparable<DirNode>'
    content.vb: >-
      Public Class DirNode
          Inherits DataInfoNode
          Implements IComparable(Of DirNode)
  inheritance:
  - System.Object
  - DMLibTest.DataInfoNode
  implements:
  - IComparable{DMLibTest.DirNode}
  inheritedMembers:
  - DMLibTest.DataInfoNode.Name
  - DMLibTest.DataInfoNode.Parent
  - DMLibTest.DataInfoNode.PathComponents
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DMLibTest.DirNode.#ctor(System.String)
  commentId: M:DMLibTest.DirNode.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: DirNode(String)
  fullName: DMLibTest.DirNode.DirNode(System.String)
  type: Constructor
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: .ctor
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 211
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public DirNode(string name)
    content.vb: Public Sub New(name As String)
    parameters:
    - id: name
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.FileNodeCountRecursive
  commentId: P:DMLibTest.DirNode.FileNodeCountRecursive
  id: FileNodeCountRecursive
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: FileNodeCountRecursive
  fullName: DMLibTest.DirNode.FileNodeCountRecursive
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileNodeCountRecursive
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 218
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public int FileNodeCountRecursive { get; }
    content.vb: Public ReadOnly Property FileNodeCountRecursive As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.FileNodeCount
  commentId: P:DMLibTest.DirNode.FileNodeCount
  id: FileNodeCount
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: FileNodeCount
  fullName: DMLibTest.DirNode.FileNodeCount
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileNodeCount
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 232
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public int FileNodeCount { get; }
    content.vb: Public ReadOnly Property FileNodeCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.DirNodeCount
  commentId: P:DMLibTest.DirNode.DirNodeCount
  id: DirNodeCount
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: DirNodeCount
  fullName: DMLibTest.DirNode.DirNodeCount
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DirNodeCount
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 240
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public int DirNodeCount { get; }
    content.vb: Public ReadOnly Property DirNodeCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.NonEmptyDirNodeCount
  commentId: P:DMLibTest.DirNode.NonEmptyDirNodeCount
  id: NonEmptyDirNodeCount
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: NonEmptyDirNodeCount
  fullName: DMLibTest.DirNode.NonEmptyDirNodeCount
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: NonEmptyDirNodeCount
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 248
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public int NonEmptyDirNodeCount { get; }
    content.vb: Public ReadOnly Property NonEmptyDirNodeCount As Integer
    parameters: []
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.IsEmpty
  commentId: P:DMLibTest.DirNode.IsEmpty
  id: IsEmpty
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: IsEmpty
  fullName: DMLibTest.DirNode.IsEmpty
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: IsEmpty
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 265
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public bool IsEmpty { get; }
    content.vb: Public ReadOnly Property IsEmpty As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.DirNodes
  commentId: P:DMLibTest.DirNode.DirNodes
  id: DirNodes
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: DirNodes
  fullName: DMLibTest.DirNode.DirNodes
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DirNodes
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 286
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public IEnumerable<DirNode> DirNodes { get; }
    content.vb: Public ReadOnly Property DirNodes As IEnumerable(Of DirNode)
    parameters: []
    return:
      type: IEnumerable{DMLibTest.DirNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.FileNodes
  commentId: P:DMLibTest.DirNode.FileNodes
  id: FileNodes
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: FileNodes
  fullName: DMLibTest.DirNode.FileNodes
  type: Property
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: FileNodes
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 294
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public IEnumerable<FileNode> FileNodes { get; }
    content.vb: Public ReadOnly Property FileNodes As IEnumerable(Of FileNode)
    parameters: []
    return:
      type: IEnumerable{DMLibTest.FileNode}
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: DMLibTest.DirNode.CompareTo(DMLibTest.DirNode)
  commentId: M:DMLibTest.DirNode.CompareTo(DMLibTest.DirNode)
  id: CompareTo(DMLibTest.DirNode)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: CompareTo(DirNode)
  fullName: DMLibTest.DirNode.CompareTo(DMLibTest.DirNode)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CompareTo
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 302
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public int CompareTo(DirNode other)
    content.vb: Public Function CompareTo(other As DirNode) As Integer
    parameters:
    - id: other
      type: DMLibTest.DirNode
    return:
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.GetFileNode(System.String)
  commentId: M:DMLibTest.DirNode.GetFileNode(System.String)
  id: GetFileNode(System.String)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: GetFileNode(String)
  fullName: DMLibTest.DirNode.GetFileNode(System.String)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: GetFileNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 307
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public FileNode GetFileNode(string name)
    content.vb: Public Function GetFileNode(name As String) As FileNode
    parameters:
    - id: name
      type: System.String
    return:
      type: DMLibTest.FileNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.GetDirNode(System.String)
  commentId: M:DMLibTest.DirNode.GetDirNode(System.String)
  id: GetDirNode(System.String)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: GetDirNode(String)
  fullName: DMLibTest.DirNode.GetDirNode(System.String)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: GetDirNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 318
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public DirNode GetDirNode(string name)
    content.vb: Public Function GetDirNode(name As String) As DirNode
    parameters:
    - id: name
      type: System.String
    return:
      type: DMLibTest.DirNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.AddDirNode(DMLibTest.DirNode)
  commentId: M:DMLibTest.DirNode.AddDirNode(DMLibTest.DirNode)
  id: AddDirNode(DMLibTest.DirNode)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: AddDirNode(DirNode)
  fullName: DMLibTest.DirNode.AddDirNode(DMLibTest.DirNode)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: AddDirNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 329
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public void AddDirNode(DirNode dirNode)
    content.vb: Public Sub AddDirNode(dirNode As DirNode)
    parameters:
    - id: dirNode
      type: DMLibTest.DirNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.AddFileNode(DMLibTest.FileNode)
  commentId: M:DMLibTest.DirNode.AddFileNode(DMLibTest.FileNode)
  id: AddFileNode(DMLibTest.FileNode)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: AddFileNode(FileNode)
  fullName: DMLibTest.DirNode.AddFileNode(DMLibTest.FileNode)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: AddFileNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 335
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public void AddFileNode(FileNode fileNode)
    content.vb: Public Sub AddFileNode(fileNode As FileNode)
    parameters:
    - id: fileNode
      type: DMLibTest.FileNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.DeleteFileNode(System.String)
  commentId: M:DMLibTest.DirNode.DeleteFileNode(System.String)
  id: DeleteFileNode(System.String)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: DeleteFileNode(String)
  fullName: DMLibTest.DirNode.DeleteFileNode(System.String)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteFileNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 341
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public FileNode DeleteFileNode(string name)
    content.vb: Public Function DeleteFileNode(name As String) As FileNode
    parameters:
    - id: name
      type: System.String
    return:
      type: DMLibTest.FileNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.DeleteDirNode(System.String)
  commentId: M:DMLibTest.DirNode.DeleteDirNode(System.String)
  id: DeleteDirNode(System.String)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: DeleteDirNode(String)
  fullName: DMLibTest.DirNode.DeleteDirNode(System.String)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteDirNode
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 354
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public DirNode DeleteDirNode(string name)
    content.vb: Public Function DeleteDirNode(name As String) As DirNode
    parameters:
    - id: name
      type: System.String
    return:
      type: DMLibTest.DirNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.Clone
  commentId: M:DMLibTest.DirNode.Clone
  id: Clone
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: Clone()
  fullName: DMLibTest.DirNode.Clone()
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Clone
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 366
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public DirNode Clone()
    content.vb: Public Function Clone As DirNode
    return:
      type: DMLibTest.DirNode
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.EnumerateFileNodesRecursively
  commentId: M:DMLibTest.DirNode.EnumerateFileNodesRecursively
  id: EnumerateFileNodesRecursively
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: EnumerateFileNodesRecursively()
  fullName: DMLibTest.DirNode.EnumerateFileNodesRecursively()
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: EnumerateFileNodesRecursively
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 383
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public IEnumerable<FileNode> EnumerateFileNodesRecursively()
    content.vb: Public Function EnumerateFileNodesRecursively As IEnumerable(Of FileNode)
    return:
      type: IEnumerable{DMLibTest.FileNode}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.EnumerateDirNodesRecursively
  commentId: M:DMLibTest.DirNode.EnumerateDirNodesRecursively
  id: EnumerateDirNodesRecursively
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: EnumerateDirNodesRecursively()
  fullName: DMLibTest.DirNode.EnumerateDirNodesRecursively()
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: EnumerateDirNodesRecursively
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 399
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public IEnumerable<DirNode> EnumerateDirNodesRecursively()
    content.vb: Public Function EnumerateDirNodesRecursively As IEnumerable(Of DirNode)
    return:
      type: IEnumerable{DMLibTest.DirNode}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: DMLibTest.DirNode.Display(System.Int32)
  commentId: M:DMLibTest.DirNode.Display(System.Int32)
  id: Display(System.Int32)
  parent: DMLibTest.DirNode
  langs:
  - csharp
  - vb
  name: Display(Int32)
  fullName: DMLibTest.DirNode.Display(System.Int32)
  type: Method
  source:
    remote:
      path: test/DMLibTest/Framework/DMLibDataInfo.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Display
    path: test/DMLibTest/Framework/DMLibDataInfo.cs
    startLine: 415
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  summary: "\nfor debug use, show DataInfo in tree format\n"
  example: []
  syntax:
    content: public void Display(int level)
    content.vb: Public Sub Display(level As Integer)
    parameters:
    - id: level
      type: System.Int32
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: DMLibTest
  isExternal: false
  name: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: DMLibTest.DataInfoNode
  parent: DMLibTest
  isExternal: false
  name: DataInfoNode
  fullName: DMLibTest.DataInfoNode
- uid: IComparable{DMLibTest.DirNode}
  definition: IComparable`1
  name: IComparable<DirNode>
  fullName: IComparable<DMLibTest.DirNode>
  fullname.vb: IComparable(Of DMLibTest.DirNode)
  name.vb: IComparable(Of DirNode)
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    fullName: <
  - uid: DMLibTest.DirNode
    name: DirNode
    fullName: DMLibTest.DirNode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: DMLibTest.DirNode
    name: DirNode
    fullName: DMLibTest.DirNode
  - name: )
    fullName: )
- uid: DMLibTest.DataInfoNode.Name
  parent: DMLibTest.DataInfoNode
  isExternal: false
  name: Name
  fullName: DMLibTest.DataInfoNode.Name
- uid: DMLibTest.DataInfoNode.Parent
  parent: DMLibTest.DataInfoNode
  isExternal: false
  name: Parent
  fullName: DMLibTest.DataInfoNode.Parent
- uid: DMLibTest.DataInfoNode.PathComponents
  parent: DMLibTest.DataInfoNode
  isExternal: false
  name: PathComponents
  fullName: DMLibTest.DataInfoNode.PathComponents
- uid: IComparable`1
  isExternal: true
  name: IComparable<>
  fullName: IComparable<>
  fullname.vb: IComparable(Of )
  name.vb: IComparable(Of )
  spec.csharp:
  - uid: IComparable`1
    name: IComparable
    fullName: IComparable
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IComparable`1
    name: IComparable
    fullName: IComparable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
- uid: System.String
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Int32
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Boolean
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: IEnumerable{DMLibTest.DirNode}
  definition: IEnumerable`1
  name: IEnumerable<DirNode>
  fullName: IEnumerable<DMLibTest.DirNode>
  fullname.vb: IEnumerable(Of DMLibTest.DirNode)
  name.vb: IEnumerable(Of DirNode)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: DMLibTest.DirNode
    name: DirNode
    fullName: DMLibTest.DirNode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: DMLibTest.DirNode
    name: DirNode
    fullName: DMLibTest.DirNode
  - name: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  fullName: IEnumerable<>
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
- uid: IEnumerable{DMLibTest.FileNode}
  definition: IEnumerable`1
  name: IEnumerable<FileNode>
  fullName: IEnumerable<DMLibTest.FileNode>
  fullname.vb: IEnumerable(Of DMLibTest.FileNode)
  name.vb: IEnumerable(Of FileNode)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: DMLibTest.FileNode
    name: FileNode
    fullName: DMLibTest.FileNode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: DMLibTest.FileNode
    name: FileNode
    fullName: DMLibTest.FileNode
  - name: )
    fullName: )
- uid: DMLibTest.DirNode
  parent: DMLibTest
  isExternal: false
  name: DirNode
  fullName: DMLibTest.DirNode
- uid: DMLibTest.FileNode
  parent: DMLibTest
  isExternal: false
  name: FileNode
  fullName: DMLibTest.FileNode
