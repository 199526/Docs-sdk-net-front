items:
- uid: DMLibTest.CloudFileShareExtensions
  commentId: T:DMLibTest.CloudFileShareExtensions
  id: CloudFileShareExtensions
  parent: DMLibTest
  children:
  - DMLibTest.CloudFileShareExtensions.Create(CloudFileShare,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.CreateIfNotExists(CloudFileShare,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.Delete(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.DeleteIfExists(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.Exists(CloudFileShare,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.GetPermissions(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  - DMLibTest.CloudFileShareExtensions.SetPermissions(CloudFileShare,FileSharePermissions,AccessCondition,FileRequestOptions,OperationContext)
  langs:
  - csharp
  - vb
  name: CloudFileShareExtensions
  fullName: DMLibTest.CloudFileShareExtensions
  type: Class
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CloudFileShareExtensions
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 5
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: 'public class CloudFileShareExtensions : object'
    content.vb: >-
      Public Class CloudFileShareExtensions
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: DMLibTest.CloudFileShareExtensions.Create(CloudFileShare,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.Create(CloudFileShare,FileRequestOptions,OperationContext)
  id: Create(CloudFileShare,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: Create(CloudFileShare, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.Create(CloudFileShare, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Create
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 7
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static void Create(this CloudFileShare share, FileRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Create(share As CloudFileShare, requestOptions As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: share
      type: CloudFileShare
    - id: requestOptions
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.CreateIfNotExists(CloudFileShare,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.CreateIfNotExists(CloudFileShare,FileRequestOptions,OperationContext)
  id: CreateIfNotExists(CloudFileShare,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: CreateIfNotExists(CloudFileShare, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.CreateIfNotExists(CloudFileShare, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: CreateIfNotExists
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 12
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static bool CreateIfNotExists(this CloudFileShare share, FileRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function CreateIfNotExists(share As CloudFileShare, requestOptions As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: share
      type: CloudFileShare
    - id: requestOptions
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.Delete(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.Delete(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  id: Delete(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: Delete(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.Delete(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Delete
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 17
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static void Delete(this CloudFileShare share, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub Delete(share As CloudFileShare, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: share
      type: CloudFileShare
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.DeleteIfExists(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.DeleteIfExists(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  id: DeleteIfExists(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: DeleteIfExists(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.DeleteIfExists(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: DeleteIfExists
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 22
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static bool DeleteIfExists(this CloudFileShare share, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function DeleteIfExists(share As CloudFileShare, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: share
      type: CloudFileShare
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.Exists(CloudFileShare,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.Exists(CloudFileShare,FileRequestOptions,OperationContext)
  id: Exists(CloudFileShare,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: Exists(CloudFileShare, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.Exists(CloudFileShare, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: Exists
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 27
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static bool Exists(this CloudFileShare share, FileRequestOptions requestOptions = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function Exists(share As CloudFileShare, requestOptions As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As Boolean
    parameters:
    - id: share
      type: CloudFileShare
    - id: requestOptions
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.GetPermissions(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.GetPermissions(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  id: GetPermissions(CloudFileShare,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: GetPermissions(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.GetPermissions(CloudFileShare, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: GetPermissions
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 32
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static FileSharePermissions GetPermissions(this CloudFileShare share, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Function GetPermissions(share As CloudFileShare, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing) As FileSharePermissions
    parameters:
    - id: share
      type: CloudFileShare
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
    return:
      type: FileSharePermissions
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: DMLibTest.CloudFileShareExtensions.SetPermissions(CloudFileShare,FileSharePermissions,AccessCondition,FileRequestOptions,OperationContext)
  commentId: M:DMLibTest.CloudFileShareExtensions.SetPermissions(CloudFileShare,FileSharePermissions,AccessCondition,FileRequestOptions,OperationContext)
  id: SetPermissions(CloudFileShare,FileSharePermissions,AccessCondition,FileRequestOptions,OperationContext)
  isExtensionMethod: true
  parent: DMLibTest.CloudFileShareExtensions
  langs:
  - csharp
  - vb
  name: SetPermissions(CloudFileShare, FileSharePermissions, AccessCondition, FileRequestOptions, OperationContext)
  fullName: DMLibTest.CloudFileShareExtensions.SetPermissions(CloudFileShare, FileSharePermissions, AccessCondition, FileRequestOptions, OperationContext)
  type: Method
  source:
    remote:
      path: netcore/DMLibTest/CloudFileShareExtensions.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net-data-movement
    id: SetPermissions
    path: netcore/DMLibTest/CloudFileShareExtensions.cs
    startLine: 37
  assemblies:
  - DMLibTest
  packages:
  - DMLibTest(1.0.0)
  namespace: DMLibTest
  syntax:
    content: public static void SetPermissions(this CloudFileShare share, FileSharePermissions permissions, AccessCondition accessCondition = null, FileRequestOptions options = null, OperationContext operationContext = null)
    content.vb: >-
      <ExtensionAttribute>

      Public Shared Sub SetPermissions(share As CloudFileShare, permissions As FileSharePermissions, accessCondition As AccessCondition = Nothing, options As FileRequestOptions = Nothing, operationContext As OperationContext = Nothing)
    parameters:
    - id: share
      type: CloudFileShare
    - id: permissions
      type: FileSharePermissions
    - id: accessCondition
      type: AccessCondition
    - id: options
      type: FileRequestOptions
    - id: operationContext
      type: OperationContext
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: DMLibTest
  isExternal: false
  name: DMLibTest
  fullName: DMLibTest
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: CloudFileShare
  isExternal: true
  name: CloudFileShare
  fullName: CloudFileShare
- uid: FileRequestOptions
  isExternal: true
  name: FileRequestOptions
  fullName: FileRequestOptions
- uid: OperationContext
  isExternal: true
  name: OperationContext
  fullName: OperationContext
- uid: System.Boolean
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: AccessCondition
  isExternal: true
  name: AccessCondition
  fullName: AccessCondition
- uid: FileSharePermissions
  isExternal: true
  name: FileSharePermissions
  fullName: FileSharePermissions
