items:
- uid: Microsoft.Azure.Search.Serialization.ConverterBase
  commentId: T:Microsoft.Azure.Search.Serialization.ConverterBase
  id: ConverterBase
  parent: Microsoft.Azure.Search.Serialization
  children:
  - Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  - Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  langs:
  - csharp
  - vb
  name: ConverterBase
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ConverterBase
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nBase class for custom JsonConverters.\n"
  example: []
  syntax:
    content: 'public abstract class ConverterBase : JsonConverter'
    content.vb: >-
      Public MustInherit Class ConverterBase
          Inherits JsonConverter
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  inheritedMembers:
  - Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  - Newtonsoft.Json.JsonConverter.GetSchema
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  commentId: M:Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  id: ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  langs:
  - csharp
  - vb
  name: ExpectAndAdvance(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ExpectAndAdvance
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nAsserts that the given JSON reader is positioned on a token with the expected type. Optionally asserts\nthat the value of the token matches a given expected value. If any of the assertions fail, this method\nthrows a JsonSerializationException. Otherwise, this method attempts to advance the JSON reader to the\nnext position.\n"
  example: []
  syntax:
    content: protected void ExpectAndAdvance(JsonReader reader, JsonToken expectedToken, object expectedValue = null)
    content.vb: Protected Sub ExpectAndAdvance(reader As JsonReader, expectedToken As JsonToken, expectedValue As Object = Nothing)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader.
    - id: expectedToken
      type: Newtonsoft.Json.JsonToken
      description: The JSON token on which the reader is expected to be positioned.
    - id: expectedValue
      type: System.Object
      description: Optional; The expected value of the current JSON token.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  commentId: M:Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  id: ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  langs:
  - csharp
  - vb
  name: ExpectAndAdvance<TValue>(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance<TValue>(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ExpectAndAdvance
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 42
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nAsserts that the given JSON reader is positioned on a token with the expected type and retrieves the value\nof the token, if any. Optionally asserts that the value of the token matches a given expected value. If\nany of the assertions fail, this method throws a JsonSerializationException. Otherwise, this method\nattempts to advance the JSON reader to the next position.\n"
  example: []
  syntax:
    content: protected TValue ExpectAndAdvance<TValue>(JsonReader reader, JsonToken expectedToken, object expectedValue = null)
    content.vb: Protected Function ExpectAndAdvance(Of TValue)(reader As JsonReader, expectedToken As JsonToken, expectedValue As Object = Nothing) As TValue
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader.
    - id: expectedToken
      type: Newtonsoft.Json.JsonToken
      description: The JSON token on which the reader is expected to be positioned.
    - id: expectedValue
      type: System.Object
      description: Optional; The expected value of the current JSON token.
    typeParameters:
    - id: TValue
      description: The expected type of the value of the current JSON token.
    return:
      type: '{TValue}'
      description: "\nThe value of the JSON token before advancing the reader, or default(TValue) if the token has no value.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Of TValue)(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  name.vb: ExpectAndAdvance(Of TValue)(JsonReader, JsonToken, Object)
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  commentId: M:Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  id: Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  langs:
  - csharp
  - vb
  name: Expect(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Expect
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 57
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nAsserts that the given JSON reader is positioned on a token with the expected type. Optionally asserts\nthat the value of the token matches a given expected value. If any of the assertions fail, this method\nthrows a JsonSerializationException.\n"
  example: []
  syntax:
    content: protected void Expect(JsonReader reader, JsonToken expectedToken, object expectedValue = null)
    content.vb: Protected Sub Expect(reader As JsonReader, expectedToken As JsonToken, expectedValue As Object = Nothing)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader.
    - id: expectedToken
      type: Newtonsoft.Json.JsonToken
      description: The JSON token on which the reader is expected to be positioned.
    - id: expectedValue
      type: System.Object
      description: Optional; The expected value of the current JSON token.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  commentId: M:Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  id: Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  langs:
  - csharp
  - vb
  name: Expect<TValue>(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect<TValue>(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Expect
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 74
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nAsserts that the given JSON reader is positioned on a token with the expected type and retrieves the value\nof the token, if any. Optionally asserts that the value of the token matches a given expected value. If\nany of the assertions fail, this method throws a JsonSerializationException.\n"
  example: []
  syntax:
    content: protected TValue Expect<TValue>(JsonReader reader, JsonToken expectedToken, object expectedValue = null)
    content.vb: Protected Function Expect(Of TValue)(reader As JsonReader, expectedToken As JsonToken, expectedValue As Object = Nothing) As TValue
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader.
    - id: expectedToken
      type: Newtonsoft.Json.JsonToken
      description: The JSON token on which the reader is expected to be positioned.
    - id: expectedValue
      type: System.Object
      description: Optional; The expected value of the current JSON token.
    typeParameters:
    - id: TValue
      description: The expected type of the value of the current JSON token.
    return:
      type: '{TValue}'
      description: "\nThe value of the current JSON token, or default(TValue) if the current token has no value.\n"
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Of TValue)(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  name.vb: Expect(Of TValue)(JsonReader, JsonToken, Object)
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  commentId: M:Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  id: Advance(Newtonsoft.Json.JsonReader)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  langs:
  - csharp
  - vb
  name: Advance(JsonReader)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Advance
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ConverterBase.cs
    startLine: 118
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nAdvances the given JSON reader, or throws a JsonSerializationException if it cannot be advanced.\n"
  example: []
  syntax:
    content: protected void Advance(JsonReader reader)
    content.vb: Protected Sub Advance(reader As JsonReader)
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader to advance.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
references:
- uid: Microsoft.Azure.Search.Serialization
  isExternal: false
  name: Microsoft.Azure.Search.Serialization
  fullName: Microsoft.Azure.Search.Serialization
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.GetSchema
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: GetSchema()
  fullName: Newtonsoft.Json.JsonConverter.GetSchema()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonToken
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonToken
  fullName: Newtonsoft.Json.JsonToken
- uid: '{TValue}'
  isExternal: false
  name: TValue
  fullName: TValue
