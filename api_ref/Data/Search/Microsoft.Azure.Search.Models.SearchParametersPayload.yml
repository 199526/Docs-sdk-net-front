items:
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload
  commentId: T:Microsoft.Azure.Search.Models.SearchParametersPayload
  id: SearchParametersPayload
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor
  - Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor(System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{Microsoft.Azure.Search.Models.QueryType},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Search.Models.SearchMode},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Count
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Facets
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Filter
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Highlight
  - Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPostTag
  - Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPreTag
  - Microsoft.Azure.Search.Models.SearchParametersPayload.MinimumCoverage
  - Microsoft.Azure.Search.Models.SearchParametersPayload.OrderBy
  - Microsoft.Azure.Search.Models.SearchParametersPayload.QueryType
  - Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringParameters
  - Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringProfile
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Search
  - Microsoft.Azure.Search.Models.SearchParametersPayload.SearchFields
  - Microsoft.Azure.Search.Models.SearchParametersPayload.SearchMode
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Select
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Skip
  - Microsoft.Azure.Search.Models.SearchParametersPayload.Top
  langs:
  - csharp
  - vb
  name: SearchParametersPayload
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SearchParametersPayload
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nParameters for filtering, sorting, faceting, paging, and other search\nquery behaviors.\n"
  example: []
  syntax:
    content: public class SearchParametersPayload
    content.vb: Public Class SearchParametersPayload
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor
  commentId: M:Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: SearchParametersPayload()
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchParametersPayload()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the SearchParametersPayload class.\n"
  example: []
  syntax:
    content: public SearchParametersPayload()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor(System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{Microsoft.Azure.Search.Models.QueryType},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Search.Models.SearchMode},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})
  commentId: M:Microsoft.Azure.Search.Models.SearchParametersPayload.#ctor(System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{Microsoft.Azure.Search.Models.QueryType},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Search.Models.SearchMode},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})
  id: '#ctor(System.Nullable{System.Boolean},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.String,System.Nullable{System.Double},System.String,System.Nullable{Microsoft.Azure.Search.Models.QueryType},System.Collections.Generic.IList{System.String},System.String,System.String,System.String,System.Nullable{Microsoft.Azure.Search.Models.SearchMode},System.String,System.Nullable{System.Int32},System.Nullable{System.Int32})'
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: SearchParametersPayload(Nullable<Boolean>, IList<String>, String, String, String, String, Nullable<Double>, String, Nullable<QueryType>, IList<String>, String, String, String, Nullable<SearchMode>, String, Nullable<Int32>, Nullable<Int32>)
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchParametersPayload(System.Nullable<System.Boolean>, System.Collections.Generic.IList<System.String>, System.String, System.String, System.String, System.String, System.Nullable<System.Double>, System.String, System.Nullable<Microsoft.Azure.Search.Models.QueryType>, System.Collections.Generic.IList<System.String>, System.String, System.String, System.String, System.Nullable<Microsoft.Azure.Search.Models.SearchMode>, System.String, System.Nullable<System.Int32>, System.Nullable<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the SearchParametersPayload class.\n"
  example: []
  syntax:
    content: public SearchParametersPayload(bool ? count = null, IList<string> facets = null, string filter = null, string highlight = null, string highlightPostTag = null, string highlightPreTag = null, double ? minimumCoverage = null, string orderBy = null, QueryType? queryType = null, IList<string> scoringParameters = null, string scoringProfile = null, string search = null, string searchFields = null, SearchMode? searchMode = null, string select = null, int ? skip = null, int ? top = null)
    content.vb: Public Sub New(count As Boolean? = Nothing, facets As IList(Of String) = Nothing, filter As String = Nothing, highlight As String = Nothing, highlightPostTag As String = Nothing, highlightPreTag As String = Nothing, minimumCoverage As Double? = Nothing, orderBy As String = Nothing, queryType As QueryType? = Nothing, scoringParameters As IList(Of String) = Nothing, scoringProfile As String = Nothing, search As String = Nothing, searchFields As String = Nothing, searchMode As SearchMode? = Nothing, select As String = Nothing, skip As Integer? = Nothing, top As Integer? = Nothing)
    parameters:
    - id: count
      type: System.Nullable{System.Boolean}
    - id: facets
      type: System.Collections.Generic.IList{System.String}
    - id: filter
      type: System.String
    - id: highlight
      type: System.String
    - id: highlightPostTag
      type: System.String
    - id: highlightPreTag
      type: System.String
    - id: minimumCoverage
      type: System.Nullable{System.Double}
    - id: orderBy
      type: System.String
    - id: queryType
      type: System.Nullable{Microsoft.Azure.Search.Models.QueryType}
    - id: scoringParameters
      type: System.Collections.Generic.IList{System.String}
    - id: scoringProfile
      type: System.String
    - id: search
      type: System.String
    - id: searchFields
      type: System.String
    - id: searchMode
      type: System.Nullable{Microsoft.Azure.Search.Models.SearchMode}
    - id: select
      type: System.String
    - id: skip
      type: System.Nullable{System.Int32}
    - id: top
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchParametersPayload(System.Nullable(Of System.Boolean), System.Collections.Generic.IList(Of System.String), System.String, System.String, System.String, System.String, System.Nullable(Of System.Double), System.String, System.Nullable(Of Microsoft.Azure.Search.Models.QueryType), System.Collections.Generic.IList(Of System.String), System.String, System.String, System.String, System.Nullable(Of Microsoft.Azure.Search.Models.SearchMode), System.String, System.Nullable(Of System.Int32), System.Nullable(Of System.Int32))
  name.vb: SearchParametersPayload(Nullable(Of Boolean), IList(Of String), String, String, String, String, Nullable(Of Double), String, Nullable(Of QueryType), IList(Of String), String, String, String, Nullable(Of SearchMode), String, Nullable(Of Int32), Nullable(Of Int32))
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Count
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Count
  id: Count
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Count
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Count
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Count
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 59
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a value that specifies whether to fetch the total\ncount of results. Default is false. Setting this value to true\nmay have a performance impact. Note that the count returned is an\napproximation.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "count")]

      public bool ? Count { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="count")>

      Public Property Count As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: count
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Facets
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Facets
  id: Facets
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Facets
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Facets
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Facets
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 67
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the list of facet expressions to apply to the search\nquery. Each facet expression contains a field name, optionally\nfollowed by a comma-separated list of name:value pairs.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "facets")]

      public IList<string> Facets { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="facets")>

      Public Property Facets As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: facets
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Filter
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Filter
  id: Filter
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Filter
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Filter
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Filter
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 74
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the OData $filter expression to apply to the search\nquery.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "filter")]

      public string Filter { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="filter")>

      Public Property Filter As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: filter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Highlight
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Highlight
  id: Highlight
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Highlight
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Highlight
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Highlight
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the comma-separated list of field names to use for\nhit highlights. Only searchable fields can be used for hit\nhighlighting.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "highlight")]

      public string Highlight { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="highlight")>

      Public Property Highlight As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: highlight
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPostTag
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPostTag
  id: HighlightPostTag
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: HighlightPostTag
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPostTag
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: HighlightPostTag
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 89
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a string tag that is appended to hit highlights. Must\nbe set with HighlightPreTag. Default is &lt;/em&gt;.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "highlightPostTag")]

      public string HighlightPostTag { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="highlightPostTag")>

      Public Property HighlightPostTag As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: highlightPostTag
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPreTag
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPreTag
  id: HighlightPreTag
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: HighlightPreTag
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.HighlightPreTag
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: HighlightPreTag
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 96
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a string tag that is prepended to hit highlights.\nMust be set with HighlightPostTag. Default is &lt;em&gt;.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "highlightPreTag")]

      public string HighlightPreTag { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="highlightPreTag")>

      Public Property HighlightPreTag As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: highlightPreTag
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.MinimumCoverage
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.MinimumCoverage
  id: MinimumCoverage
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: MinimumCoverage
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.MinimumCoverage
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: MinimumCoverage
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 106
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a number between 0 and 100 indicating the percentage\nof the index that must be covered by a search query in order for\nthe query to be reported as a success. This parameter can be\nuseful for ensuring search availability even for services with\nonly one replica. The default is 100.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "minimumCoverage")]

      public double ? MinimumCoverage { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="minimumCoverage")>

      Public Property MinimumCoverage As Double?
    parameters: []
    return:
      type: System.Nullable{System.Double}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: minimumCoverage
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.OrderBy
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.OrderBy
  id: OrderBy
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: OrderBy
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.OrderBy
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: OrderBy
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 119
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the comma-separated list of OData $orderby\nexpressions by which to sort the results. Each expression can be\neither a field name or a call to the geo.distance() function.\nEach expression can be followed by asc to indicate ascending, and\ndesc to indicate descending. The default is ascending order. Ties\nwill be broken by the match scores of documents. If no OrderBy is\nspecified, the default sort order is descending by document match\nscore. There can be at most 32 Orderby clauses.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "orderby")]

      public string OrderBy { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="orderby")>

      Public Property OrderBy As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: orderby
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.QueryType
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.QueryType
  id: QueryType
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: QueryType
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.QueryType
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: QueryType
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 128
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets gets or sets a value that specifies the syntax of the\nsearch query. The default is 'simple'. Use 'full' if your query\nuses the Lucene query syntax. Possible values include: 'simple',\n'full'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "queryType")]

      public QueryType? QueryType { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="queryType")>

      Public Property QueryType As QueryType?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Search.Models.QueryType}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: queryType
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringParameters
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringParameters
  id: ScoringParameters
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: ScoringParameters
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringParameters
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ScoringParameters
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 138
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the list of parameter values to be used in scoring\nfunctions (for example, referencePointParameter) using the format\nname:value. For example, if the scoring profile defines a\nfunction with a parameter called 'mylocation' the parameter\nstring would be \"mylocation:-122.2,44.8\"(without the quotes).\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "scoringParameters")]

      public IList<string> ScoringParameters { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="scoringParameters")>

      Public Property ScoringParameters As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: scoringParameters
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringProfile
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringProfile
  id: ScoringProfile
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: ScoringProfile
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.ScoringProfile
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ScoringProfile
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 145
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the name of a scoring profile to evaluate match\nscores for matching documents in order to sort the results.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "scoringProfile")]

      public string ScoringProfile { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="scoringProfile")>

      Public Property ScoringProfile As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: scoringProfile
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Search
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Search
  id: Search
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Search
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Search
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Search
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 152
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a full-text search query expression; Use null or \"*\"\nto match all documents.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "search")]

      public string Search { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="search")>

      Public Property Search As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: search
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchFields
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.SearchFields
  id: SearchFields
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: SearchFields
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchFields
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SearchFields
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 159
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the comma-separated list of field names to include in\nthe full-text search.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "searchFields")]

      public string SearchFields { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="searchFields")>

      Public Property SearchFields As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: searchFields
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchMode
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.SearchMode
  id: SearchMode
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: SearchMode
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.SearchMode
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SearchMode
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 167
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a value that specifies whether any or all of the\nsearch terms must be matched in order to count the document as a\nmatch. Possible values include: 'any', 'all'\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "searchMode")]

      public SearchMode? SearchMode { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="searchMode")>

      Public Property SearchMode As SearchMode?
    parameters: []
    return:
      type: System.Nullable{Microsoft.Azure.Search.Models.SearchMode}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: searchMode
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Select
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Select
  id: Select
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Select
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Select
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Select
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 175
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the comma-separated list of fields to retrieve. If\nunspecified, all fields marked as retrievable in the schema are\nincluded.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "select")]

      public string Select { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="select")>

      Public Property Select As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: select
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Skip
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Skip
  id: Skip
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Skip
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Skip
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Skip
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 185
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the number of search results to skip. This value\ncannot be greater than 100,000. If you need to scan documents in\nsequence, but cannot use Skip due to this limitation, consider\nusing OrderBy on a totally-ordered key and Filter with a range\nquery instead.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "skip")]

      public int ? Skip { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="skip")>

      Public Property Skip As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: skip
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.SearchParametersPayload.Top
  commentId: P:Microsoft.Azure.Search.Models.SearchParametersPayload.Top
  id: Top
  parent: Microsoft.Azure.Search.Models.SearchParametersPayload
  langs:
  - csharp
  - vb
  name: Top
  fullName: Microsoft.Azure.Search.Models.SearchParametersPayload.Top
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Top
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchIndex/Models/SearchParametersPayload.cs
    startLine: 196
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the number of search results to retrieve. This can be\nused in conjunction with Skip to implement client-side paging of\nsearch results. If results are truncated due to server-side\npaging, the response will include a continuation token that can\nbe passed to ContinueSearch to retrieve the next page of results.\nSee DocumentSearchResponse.ContinuationToken for more information.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "top")]

      public int ? Top { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="top")>

      Public Property Top As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: top
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    fullName: System.String
    isExternal: true
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{Microsoft.Azure.Search.Models.QueryType}
  parent: System
  definition: System.Nullable`1
  name: Nullable<QueryType>
  fullName: System.Nullable<Microsoft.Azure.Search.Models.QueryType>
  fullname.vb: System.Nullable(Of Microsoft.Azure.Search.Models.QueryType)
  name.vb: Nullable(Of QueryType)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.QueryType
    name: QueryType
    fullName: Microsoft.Azure.Search.Models.QueryType
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.QueryType
    name: QueryType
    fullName: Microsoft.Azure.Search.Models.QueryType
  - name: )
    fullName: )
- uid: System.Nullable{Microsoft.Azure.Search.Models.SearchMode}
  parent: System
  definition: System.Nullable`1
  name: Nullable<SearchMode>
  fullName: System.Nullable<Microsoft.Azure.Search.Models.SearchMode>
  fullname.vb: System.Nullable(Of Microsoft.Azure.Search.Models.SearchMode)
  name.vb: Nullable(Of SearchMode)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.SearchMode
    name: SearchMode
    fullName: Microsoft.Azure.Search.Models.SearchMode
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.SearchMode
    name: SearchMode
    fullName: Microsoft.Azure.Search.Models.SearchMode
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
