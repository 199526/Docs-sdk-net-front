items:
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  commentId: T:Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  id: PathHierarchyTokenizer
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.BufferSize
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Delimiter
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.NumberOfTokensToSkip
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Replacement
  - Microsoft.Azure.Search.Models.PathHierarchyTokenizer.ReverseTokenOrder
  langs:
  - csharp
  - vb
  name: PathHierarchyTokenizer
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: PathHierarchyTokenizer
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 13
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nTokenizer for path-like hierarchies. This tokenizer is implemented\nusing Apache Lucene.\n<see href=\"http://lucene.apache.org/core/4_10_3/analyzers-common/org/apache/lucene/analysis/path/PathHierarchyTokenizer.html\"></see>\n"
  example: []
  syntax:
    content: >-
      [JsonObject("#Microsoft.Azure.Search.PathHierarchyTokenizer")]

      public class PathHierarchyTokenizer : Tokenizer
    content.vb: >-
      <JsonObject("#Microsoft.Azure.Search.PathHierarchyTokenizer")>

      Public Class PathHierarchyTokenizer
          Inherits Tokenizer
  inheritance:
  - System.Object
  - Microsoft.Azure.Search.Models.Tokenizer
  inheritedMembers:
  - Microsoft.Azure.Search.Models.Tokenizer.Name
  - Microsoft.Azure.Search.Models.Tokenizer.Validate
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  attributes:
  - type: Newtonsoft.Json.JsonObjectAttribute
    ctor: Newtonsoft.Json.JsonObjectAttribute.#ctor(System.String)
    arguments:
    - type: System.String
      value: '#Microsoft.Azure.Search.PathHierarchyTokenizer'
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor
  commentId: M:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: PathHierarchyTokenizer()
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.PathHierarchyTokenizer()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 19
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the PathHierarchyTokenizer class.\n"
  example: []
  syntax:
    content: public PathHierarchyTokenizer()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})
  commentId: M:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})
  id: '#ctor(System.String,System.Nullable{System.Char},System.Nullable{System.Char},System.Nullable{System.Int32},System.Nullable{System.Boolean},System.Nullable{System.Int32})'
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: PathHierarchyTokenizer(String, Nullable<Char>, Nullable<Char>, Nullable<Int32>, Nullable<Boolean>, Nullable<Int32>)
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.PathHierarchyTokenizer(System.String, System.Nullable<System.Char>, System.Nullable<System.Char>, System.Nullable<System.Int32>, System.Nullable<System.Boolean>, System.Nullable<System.Int32>)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the PathHierarchyTokenizer class.\n"
  example: []
  syntax:
    content: public PathHierarchyTokenizer(string name, char ? delimiter = null, char ? replacement = null, int ? bufferSize = null, bool ? reverseTokenOrder = null, int ? numberOfTokensToSkip = null)
    content.vb: Public Sub New(name As String, delimiter As Char? = Nothing, replacement As Char? = Nothing, bufferSize As Integer? = Nothing, reverseTokenOrder As Boolean? = Nothing, numberOfTokensToSkip As Integer? = Nothing)
    parameters:
    - id: name
      type: System.String
    - id: delimiter
      type: System.Nullable{System.Char}
    - id: replacement
      type: System.Nullable{System.Char}
    - id: bufferSize
      type: System.Nullable{System.Int32}
    - id: reverseTokenOrder
      type: System.Nullable{System.Boolean}
    - id: numberOfTokensToSkip
      type: System.Nullable{System.Int32}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.PathHierarchyTokenizer(System.String, System.Nullable(Of System.Char), System.Nullable(Of System.Char), System.Nullable(Of System.Int32), System.Nullable(Of System.Boolean), System.Nullable(Of System.Int32))
  name.vb: PathHierarchyTokenizer(String, Nullable(Of Char), Nullable(Of Char), Nullable(Of Int32), Nullable(Of Boolean), Nullable(Of Int32))
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Delimiter
  commentId: P:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Delimiter
  id: Delimiter
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: Delimiter
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Delimiter
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Delimiter
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the delimiter character to use. Default is \"/\".\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "delimiter")]

      public char ? Delimiter { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="delimiter")>

      Public Property Delimiter As Char?
    parameters: []
    return:
      type: System.Nullable{System.Char}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: delimiter
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Replacement
  commentId: P:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Replacement
  id: Replacement
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: Replacement
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.Replacement
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Replacement
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a value that, if set, replaces the delimiter\ncharacter. Default is \"/\".\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "replacement")]

      public char ? Replacement { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="replacement")>

      Public Property Replacement As Char?
    parameters: []
    return:
      type: System.Nullable{System.Char}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: replacement
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.BufferSize
  commentId: P:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.BufferSize
  id: BufferSize
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: BufferSize
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.BufferSize
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: BufferSize
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the buffer size. Default is 1024.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "bufferSize")]

      public int ? BufferSize { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="bufferSize")>

      Public Property BufferSize As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: bufferSize
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.ReverseTokenOrder
  commentId: P:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.ReverseTokenOrder
  id: ReverseTokenOrder
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: ReverseTokenOrder
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.ReverseTokenOrder
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ReverseTokenOrder
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 57
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets a value indicating whether to generate tokens in\nreverse order. Default is false.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "reverse")]

      public bool ? ReverseTokenOrder { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="reverse")>

      Public Property ReverseTokenOrder As Boolean?
    parameters: []
    return:
      type: System.Nullable{System.Boolean}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: reverse
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.NumberOfTokensToSkip
  commentId: P:Microsoft.Azure.Search.Models.PathHierarchyTokenizer.NumberOfTokensToSkip
  id: NumberOfTokensToSkip
  parent: Microsoft.Azure.Search.Models.PathHierarchyTokenizer
  langs:
  - csharp
  - vb
  name: NumberOfTokensToSkip
  fullName: Microsoft.Azure.Search.Models.PathHierarchyTokenizer.NumberOfTokensToSkip
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: NumberOfTokensToSkip
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/PathHierarchyTokenizer.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the number of initial tokens to skip. Default is 0.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "skip")]

      public int ? NumberOfTokensToSkip { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="skip")>

      Public Property NumberOfTokensToSkip As Integer?
    parameters: []
    return:
      type: System.Nullable{System.Int32}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: skip
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: Microsoft.Azure.Search.Models.Tokenizer
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: Tokenizer
  fullName: Microsoft.Azure.Search.Models.Tokenizer
- uid: Microsoft.Azure.Search.Models.Tokenizer.Name
  parent: Microsoft.Azure.Search.Models.Tokenizer
  isExternal: false
  name: Name
  fullName: Microsoft.Azure.Search.Models.Tokenizer.Name
- uid: Microsoft.Azure.Search.Models.Tokenizer.Validate
  parent: Microsoft.Azure.Search.Models.Tokenizer
  isExternal: false
  name: Validate()
  fullName: Microsoft.Azure.Search.Models.Tokenizer.Validate()
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.Tokenizer.Validate
    name: Validate
    fullName: Microsoft.Azure.Search.Models.Tokenizer.Validate
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.Tokenizer.Validate
    name: Validate
    fullName: Microsoft.Azure.Search.Models.Tokenizer.Validate
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: System.Nullable{System.Char}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Char>
  fullName: System.Nullable<System.Char>
  fullname.vb: System.Nullable(Of System.Char)
  name.vb: Nullable(Of Char)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Char
    name: Char
    fullName: System.Char
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Int32}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int32>
  fullName: System.Nullable<System.Int32>
  fullname.vb: System.Nullable(Of System.Int32)
  name.vb: Nullable(Of Int32)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable{System.Boolean}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Boolean>
  fullName: System.Nullable<System.Boolean>
  fullname.vb: System.Nullable(Of System.Boolean)
  name.vb: Nullable(Of Boolean)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
