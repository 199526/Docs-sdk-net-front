items:
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  commentId: T:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  id: ExtensibleEnumConverter`1
  parent: Microsoft.Azure.Search.Serialization
  children:
  - Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor
  - Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor(System.String)
  - Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.CanConvert(System.Type)
  - Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  - Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  langs:
  - csharp
  - vb
  name: ExtensibleEnumConverter<T>
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ExtensibleEnumConverter
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 24
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nSerializes and deserializes \"extensible enums\" to and from JSON. Extensible enums are like enumerations in\nthat they have well-known values, but they are extensible with new values and the values are based on strings\ninstead of integers.\n"
  example: []
  syntax:
    content: 'public class ExtensibleEnumConverter<T> : ConverterBase where T : ExtensibleEnum<T>'
    content.vb: >-
      Public Class ExtensibleEnumConverter(Of T As ExtensibleEnum(Of T))
          Inherits ConverterBase
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  - Newtonsoft.Json.JsonConverter
  - Microsoft.Azure.Search.Serialization.ConverterBase
  inheritedMembers:
  - Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  - Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  - Newtonsoft.Json.JsonConverter.GetSchema
  - Newtonsoft.Json.JsonConverter.CanRead
  - Newtonsoft.Json.JsonConverter.CanWrite
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T)
  name.vb: ExtensibleEnumConverter(Of T)
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor
  commentId: M:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  langs:
  - csharp
  - vb
  name: ExtensibleEnumConverter()
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>.ExtensibleEnumConverter()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nInitializes a new instance of the ExtensibleEnumConverter class.\n"
  example: []
  syntax:
    content: public ExtensibleEnumConverter()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T).ExtensibleEnumConverter()
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor(System.String)
  commentId: M:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  langs:
  - csharp
  - vb
  name: ExtensibleEnumConverter(String)
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>.ExtensibleEnumConverter(System.String)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 40
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nInitializes a new instance of the ExtensibleEnumConverter class.\n"
  example: []
  syntax:
    content: public ExtensibleEnumConverter(string factoryMethodName)
    content.vb: Public Sub New(factoryMethodName As String)
    parameters:
    - id: factoryMethodName
      type: System.String
      description: "\nThe name of a public static method that creates an instance of type T given a string value; Default is\n\"Create\".\n"
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T).ExtensibleEnumConverter(System.String)
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.CanConvert(System.Type)
  commentId: M:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.CanConvert(System.Type)
  id: CanConvert(System.Type)
  parent: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  langs:
  - csharp
  - vb
  name: CanConvert(Type)
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>.CanConvert(System.Type)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CanConvert
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nIndicates whether this converter can serialize or deserialize objects of the given type.\n"
  example: []
  syntax:
    content: public override bool CanConvert(Type objectType)
    content.vb: Public Overrides Function CanConvert(objectType As Type) As Boolean
    parameters:
    - id: objectType
      type: System.Type
      description: The type to test against.
    return:
      type: System.Boolean
      description: true if objectType derives from ExtensibleEnum, false otherwise.
  overridden: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T).CanConvert(System.Type)
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  id: ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  langs:
  - csharp
  - vb
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ReadJson
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 76
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nDeserializes a string into an ExtensibleEnum.\n"
  example: []
  syntax:
    content: public override object ReadJson(JsonReader reader, Type objectType, object existingValue, JsonSerializer serializer)
    content.vb: Public Overrides Function ReadJson(reader As JsonReader, objectType As Type, existingValue As Object, serializer As JsonSerializer) As Object
    parameters:
    - id: reader
      type: Newtonsoft.Json.JsonReader
      description: The JSON reader.
    - id: objectType
      type: System.Type
      description: Ignored by this method.
    - id: existingValue
      type: System.Object
      description: Ignored by this method.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: Ignored by this method.
    return:
      type: System.Object
      description: An instance of type T, or null if the current JSON token is null.
  overridden: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T).ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
- uid: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  commentId: M:Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  id: WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter`1
  langs:
  - csharp
  - vb
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter<T>.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: WriteJson
    path: src/Search/Microsoft.Azure.Search/Customizations/Serialization/ExtensibleEnumConverter.cs
    startLine: 97
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Serialization
  summary: "\nSerializes an ExtensibleEnum to a JSON string.\n"
  example: []
  syntax:
    content: public override void WriteJson(JsonWriter writer, object value, JsonSerializer serializer)
    content.vb: Public Overrides Sub WriteJson(writer As JsonWriter, value As Object, serializer As JsonSerializer)
    parameters:
    - id: writer
      type: Newtonsoft.Json.JsonWriter
      description: The JSON writer.
    - id: value
      type: System.Object
      description: The value to serialize.
    - id: serializer
      type: Newtonsoft.Json.JsonSerializer
      description: Ignored by this method.
  overridden: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Serialization.ExtensibleEnumConverter(Of T).WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
references:
- uid: Microsoft.Azure.Search.Serialization
  isExternal: false
  name: Microsoft.Azure.Search.Serialization
  fullName: Microsoft.Azure.Search.Serialization
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: Newtonsoft.Json.JsonConverter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonConverter
  fullName: Newtonsoft.Json.JsonConverter
- uid: Microsoft.Azure.Search.Serialization.ConverterBase
  parent: Microsoft.Azure.Search.Serialization
  isExternal: false
  name: ConverterBase
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  isExternal: true
  name: ExpectAndAdvance(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: ExpectAndAdvance
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: ExpectAndAdvance
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  isExternal: true
  name: ExpectAndAdvance<TValue>(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance<TValue>(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  fullname.vb: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Of TValue)(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  name.vb: ExpectAndAdvance(Of TValue)(JsonReader, JsonToken, Object)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: ExpectAndAdvance<TValue>
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance<TValue>
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: ExpectAndAdvance(Of TValue)
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.ExpectAndAdvance(Of TValue)
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  isExternal: true
  name: Expect(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: Expect
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: Expect
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  isExternal: true
  name: Expect<TValue>(JsonReader, JsonToken, Object)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect<TValue>(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  fullname.vb: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Of TValue)(Newtonsoft.Json.JsonReader, Newtonsoft.Json.JsonToken, System.Object)
  name.vb: Expect(Of TValue)(JsonReader, JsonToken, Object)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: Expect<TValue>
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect<TValue>
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Expect``1(Newtonsoft.Json.JsonReader,Newtonsoft.Json.JsonToken,System.Object)
    name: Expect(Of TValue)
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Expect(Of TValue)
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonToken
    name: JsonToken
    fullName: Newtonsoft.Json.JsonToken
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  parent: Microsoft.Azure.Search.Serialization.ConverterBase
  isExternal: true
  name: Advance(JsonReader)
  fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
    name: Advance
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Advance
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Microsoft.Azure.Search.Serialization.ConverterBase.Advance(Newtonsoft.Json.JsonReader)
    name: Advance
    fullName: Microsoft.Azure.Search.Serialization.ConverterBase.Advance
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.GetSchema
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: GetSchema()
  fullName: Newtonsoft.Json.JsonConverter.GetSchema()
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.GetSchema
    name: GetSchema
    fullName: Newtonsoft.Json.JsonConverter.GetSchema
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonConverter.CanRead
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanRead
  fullName: Newtonsoft.Json.JsonConverter.CanRead
- uid: Newtonsoft.Json.JsonConverter.CanWrite
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanWrite
  fullName: Newtonsoft.Json.JsonConverter.CanWrite
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Newtonsoft.Json
  isExternal: false
  name: Newtonsoft.Json
  fullName: Newtonsoft.Json
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: CanConvert(Type)
  fullName: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.CanConvert(System.Type)
    name: CanConvert
    fullName: Newtonsoft.Json.JsonConverter.CanConvert
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: )
    fullName: )
- uid: System.Type
  parent: System
  isExternal: true
  name: Type
  fullName: System.Type
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: ReadJson(JsonReader, Type, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader, System.Type, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.ReadJson(Newtonsoft.Json.JsonReader,System.Type,System.Object,Newtonsoft.Json.JsonSerializer)
    name: ReadJson
    fullName: Newtonsoft.Json.JsonConverter.ReadJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonReader
    name: JsonReader
    fullName: Newtonsoft.Json.JsonReader
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Type
    name: Type
    fullName: System.Type
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonReader
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonReader
  fullName: Newtonsoft.Json.JsonReader
- uid: Newtonsoft.Json.JsonSerializer
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonSerializer
  fullName: Newtonsoft.Json.JsonSerializer
- uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
  parent: Newtonsoft.Json.JsonConverter
  isExternal: true
  name: WriteJson(JsonWriter, Object, JsonSerializer)
  fullName: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter, System.Object, Newtonsoft.Json.JsonSerializer)
  spec.csharp:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: Newtonsoft.Json.JsonConverter.WriteJson(Newtonsoft.Json.JsonWriter,System.Object,Newtonsoft.Json.JsonSerializer)
    name: WriteJson
    fullName: Newtonsoft.Json.JsonConverter.WriteJson
    isExternal: true
  - name: (
    fullName: (
  - uid: Newtonsoft.Json.JsonWriter
    name: JsonWriter
    fullName: Newtonsoft.Json.JsonWriter
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: Newtonsoft.Json.JsonSerializer
    name: JsonSerializer
    fullName: Newtonsoft.Json.JsonSerializer
    isExternal: true
  - name: )
    fullName: )
- uid: Newtonsoft.Json.JsonWriter
  parent: Newtonsoft.Json
  isExternal: true
  name: JsonWriter
  fullName: Newtonsoft.Json.JsonWriter
