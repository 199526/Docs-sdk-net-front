items:
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  commentId: T:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  id: DocumentSearchResultBase`2
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.ContinuationToken
  - Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Count
  - Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Coverage
  - Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Facets
  - Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Results
  langs:
  - csharp
  - vb
  name: DocumentSearchResultBase<TResult, TDoc>
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DocumentSearchResultBase
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 18
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nResponse containing search results from an Azure Search index.\n"
  example: []
  syntax:
    content: >-
      public class DocumentSearchResultBase<TResult, TDoc>
          where TResult : SearchResultBase<TDoc> where TDoc : class
    content.vb: Public Class DocumentSearchResultBase(Of TResult As SearchResultBase(Of TDoc), TDoc As Class)
    typeParameters:
    - id: TResult
      description: "\nType of the model class that encapsulates documents in a search response.\n"
    - id: TDoc
      description: "\nThe CLR type that maps to the index schema. Instances of this type can be retrieved as documents\nfrom the index.\n"
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc)
  name.vb: DocumentSearchResultBase(Of TResult, TDoc)
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Count
  commentId: P:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Count
  id: Count
  parent: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  langs:
  - csharp
  - vb
  name: Count
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>.Count
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Count
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 30
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the total count of results found by the search operation, or null if the count was not requested.\n"
  remarks: "\nIf present, the count may be greater than the number of results in this response. This can happen if you\nuse the <code>Top</code> or <code>Skip</code> parameters, or\nif Azure Search can't return all the requested documents in a single Search response.\n"
  example: []
  syntax:
    content: public long ? Count { get; set; }
    content.vb: Public Property Count As Long?
    parameters: []
    return:
      type: System.Nullable{System.Int64}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc).Count
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Coverage
  commentId: P:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Coverage
  id: Coverage
  parent: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  langs:
  - csharp
  - vb
  name: Coverage
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>.Coverage
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Coverage
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a value indicating the percentage of the index that was included in the query, or null if\nMinimumCoverage was not set in the <code>SearchParameters</code>.\n"
  example: []
  syntax:
    content: public double ? Coverage { get; set; }
    content.vb: Public Property Coverage As Double?
    parameters: []
    return:
      type: System.Nullable{System.Double}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc).Coverage
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Facets
  commentId: P:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Facets
  id: Facets
  parent: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  langs:
  - csharp
  - vb
  name: Facets
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>.Facets
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Facets
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 42
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the facet query results for the search operation, or null if the query did not include any facet\nexpressions.\n"
  example: []
  syntax:
    content: public FacetResults Facets { get; set; }
    content.vb: Public Property Facets As FacetResults
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.FacetResults
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc).Facets
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Results
  commentId: P:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.Results
  id: Results
  parent: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  langs:
  - csharp
  - vb
  name: Results
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>.Results
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Results
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 47
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets the sequence of results returned by the query.\n"
  example: []
  syntax:
    content: public IList<TResult> Results { get; set; }
    content.vb: Public Property Results As IList(Of TResult)
    parameters: []
    return:
      type: System.Collections.Generic.IList{{TResult}}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc).Results
- uid: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.ContinuationToken
  commentId: P:Microsoft.Azure.Search.Models.DocumentSearchResultBase`2.ContinuationToken
  id: ContinuationToken
  parent: Microsoft.Azure.Search.Models.DocumentSearchResultBase`2
  langs:
  - csharp
  - vb
  name: ContinuationToken
  fullName: Microsoft.Azure.Search.Models.DocumentSearchResultBase<TResult, TDoc>.ContinuationToken
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ContinuationToken
    path: src/Search/Microsoft.Azure.Search/Customizations/Documents/Models/DocumentSearchResultBase.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets a continuation token that is used to continue fetching search results. This is necessary when Azure\nSearch cannot fulfill a search request with a single response.\n"
  remarks: "\n<p>\nThis property will be null unless Azure Search can't return all the requested documents in a single Search\nresponse. That can happen for different reasons which are implementation-specific and subject to change.\nRobust clients should always be ready to handle cases where fewer documents than expected are returned and\na continuation token is included to continue retrieving documents. If this property is not null, you can\npass its value to the\n<code>ContinueSearchAsync</code>\nmethod to retrieve more search results.\n</p>\n<p>\nNote that this property is not meant to help you implement paging of search results. You can implement\npaging using the <code>Top</code> and <code>Skip</code>\nsearch parameters.\n</p>\n"
  example: []
  syntax:
    content: public SearchContinuationToken ContinuationToken { get; set; }
    content.vb: Public Property ContinuationToken As SearchContinuationToken
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.SearchContinuationToken
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.DocumentSearchResultBase(Of TResult, TDoc).ContinuationToken
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.Nullable{System.Int64}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Int64>
  fullName: System.Nullable<System.Int64>
  fullname.vb: System.Nullable(Of System.Int64)
  name.vb: Nullable(Of Int64)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Int64
    name: Int64
    fullName: System.Int64
    isExternal: true
  - name: )
    fullName: )
- uid: System.Nullable`1
  parent: System
  isExternal: true
  name: Nullable<T>
  fullName: System.Nullable<T>
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Nullable{System.Double}
  parent: System
  definition: System.Nullable`1
  name: Nullable<Double>
  fullName: System.Nullable<System.Double>
  fullname.vb: System.Nullable(Of System.Double)
  name.vb: Nullable(Of Double)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    fullName: <
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: System.Double
    name: Double
    fullName: System.Double
    isExternal: true
  - name: )
    fullName: )
- uid: Microsoft.Azure.Search.Models.FacetResults
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: FacetResults
  fullName: Microsoft.Azure.Search.Models.FacetResults
- uid: System.Collections.Generic.IList{{TResult}}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TResult>
  fullName: System.Collections.Generic.IList<TResult>
  fullname.vb: System.Collections.Generic.IList(Of TResult)
  name.vb: IList(Of TResult)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: TResult
    fullName: TResult
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: TResult
    fullName: TResult
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Search.Models.SearchContinuationToken
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: SearchContinuationToken
  fullName: Microsoft.Azure.Search.Models.SearchContinuationToken
