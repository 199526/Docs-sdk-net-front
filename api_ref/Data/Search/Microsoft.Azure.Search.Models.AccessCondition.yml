items:
- uid: Microsoft.Azure.Search.Models.AccessCondition
  commentId: T:Microsoft.Azure.Search.Models.AccessCondition
  id: AccessCondition
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.AccessCondition.#ctor
  - Microsoft.Azure.Search.Models.AccessCondition.#ctor(System.String,System.String)
  - Microsoft.Azure.Search.Models.AccessCondition.GenerateEmptyCondition
  - Microsoft.Azure.Search.Models.AccessCondition.GenerateIfExistsCondition
  - Microsoft.Azure.Search.Models.AccessCondition.GenerateIfMatchCondition(System.String)
  - Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  - Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNotExistsCondition
  - Microsoft.Azure.Search.Models.AccessCondition.IfMatch
  - Microsoft.Azure.Search.Models.AccessCondition.IfNoneMatch
  - Microsoft.Azure.Search.Models.AccessCondition.IfNotChanged(Microsoft.Azure.Search.Models.IResourceWithETag)
  langs:
  - csharp
  - vb
  name: AccessCondition
  fullName: Microsoft.Azure.Search.Models.AccessCondition
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AccessCondition
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
    startLine: 21
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nAdditional parameters for a set of operations.\n"
  example: []
  syntax:
    content: public class AccessCondition
    content.vb: Public Class AccessCondition
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.AccessCondition.IfNotChanged(Microsoft.Azure.Search.Models.IResourceWithETag)
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.IfNotChanged(Microsoft.Azure.Search.Models.IResourceWithETag)
  id: IfNotChanged(Microsoft.Azure.Search.Models.IResourceWithETag)
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: IfNotChanged(IResourceWithETag)
  fullName: Microsoft.Azure.Search.Models.AccessCondition.IfNotChanged(Microsoft.Azure.Search.Models.IResourceWithETag)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: IfNotChanged
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource's current ETag value\nmatches the specified resource's ETag value.\n"
  example: []
  syntax:
    content: public static AccessCondition IfNotChanged(IResourceWithETag resource)
    content.vb: Public Shared Function IfNotChanged(resource As IResourceWithETag) As AccessCondition
    parameters:
    - id: resource
      type: Microsoft.Azure.Search.Models.IResourceWithETag
      description: A resource with an ETag value to check against the resource's ETag.
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Match condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.GenerateEmptyCondition
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.GenerateEmptyCondition
  id: GenerateEmptyCondition
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateEmptyCondition()
  fullName: Microsoft.Azure.Search.Models.AccessCondition.GenerateEmptyCondition()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GenerateEmptyCondition
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an empty access condition.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateEmptyCondition()
    content.vb: Public Shared Function GenerateEmptyCondition As AccessCondition
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An empty <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfExistsCondition
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.GenerateIfExistsCondition
  id: GenerateIfExistsCondition
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfExistsCondition()
  fullName: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfExistsCondition()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GenerateIfExistsCondition
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 36
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource exists.\n"
  remarks: Setting this access condition modifies the request to include the HTTP <em>If-Match</em> conditional header set to <code>"*"</code>.
  example: []
  syntax:
    content: public static AccessCondition GenerateIfExistsCondition()
    content.vb: Public Shared Function GenerateIfExistsCondition As AccessCondition
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents a condition where a resource exists.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfMatchCondition(System.String)
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.GenerateIfMatchCondition(System.String)
  id: GenerateIfMatchCondition(System.String)
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfMatchCondition(String)
  fullName: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfMatchCondition(System.String)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GenerateIfMatchCondition
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 47
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource's current ETag value\nmatches the specified ETag value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfMatchCondition(string eTag)
    content.vb: Public Shared Function GenerateIfMatchCondition(eTag As String) As AccessCondition
    parameters:
    - id: eTag
      type: System.String
      description: The ETag value to check against the resource's ETag.
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-Match condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNotExistsCondition
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNotExistsCondition
  id: GenerateIfNotExistsCondition
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfNotExistsCondition()
  fullName: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNotExistsCondition()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GenerateIfNotExistsCondition
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 59
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource does not exist.\n"
  remarks: Setting this access condition modifies the request to include the HTTP <em>If-None-Match</em> conditional header set to <code>"*"</code>.
  example: []
  syntax:
    content: public static AccessCondition GenerateIfNotExistsCondition()
    content.vb: Public Shared Function GenerateIfNotExistsCondition As AccessCondition
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents a condition where a resource does not exist.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  id: GenerateIfNoneMatchCondition(System.String)
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: GenerateIfNoneMatchCondition(String)
  fullName: Microsoft.Azure.Search.Models.AccessCondition.GenerateIfNoneMatchCondition(System.String)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GenerateIfNoneMatchCondition
    path: src/Search/Microsoft.Azure.Search/Customizations/Models/AccessCondition.Customization.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nConstructs an access condition such that an operation will be performed only if the resource's current ETag value\ndoes not match the specified ETag value.\n"
  example: []
  syntax:
    content: public static AccessCondition GenerateIfNoneMatchCondition(string eTag)
    content.vb: Public Shared Function GenerateIfNoneMatchCondition(eTag As String) As AccessCondition
    parameters:
    - id: eTag
      type: System.String
      description: The ETag value to check against the resource's ETag.
    return:
      type: Microsoft.Azure.Search.Models.AccessCondition
      description: An <xref href="Microsoft.Azure.Search.Models.AccessCondition" data-throw-if-not-resolved="false"></xref> object that represents the If-None-Match condition.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Search.Models.AccessCondition.#ctor
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: AccessCondition()
  fullName: Microsoft.Azure.Search.Models.AccessCondition.AccessCondition()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
    startLine: 26
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the AccessCondition class.\n"
  example: []
  syntax:
    content: public AccessCondition()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AccessCondition.#ctor(System.String,System.String)
  commentId: M:Microsoft.Azure.Search.Models.AccessCondition.#ctor(System.String,System.String)
  id: '#ctor(System.String,System.String)'
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: AccessCondition(String, String)
  fullName: Microsoft.Azure.Search.Models.AccessCondition.AccessCondition(System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
    startLine: 31
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the AccessCondition class.\n"
  example: []
  syntax:
    content: public AccessCondition(string ifMatch = null, string ifNoneMatch = null)
    content.vb: Public Sub New(ifMatch As String = Nothing, ifNoneMatch As String = Nothing)
    parameters:
    - id: ifMatch
      type: System.String
    - id: ifNoneMatch
      type: System.String
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AccessCondition.IfMatch
  commentId: P:Microsoft.Azure.Search.Models.AccessCondition.IfMatch
  id: IfMatch
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: IfMatch
  fullName: Microsoft.Azure.Search.Models.AccessCondition.IfMatch
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: IfMatch
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
    startLine: 41
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets defines the If-Match condition. The operation will be\nperformed only if the ETag on the server matches this value.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "")]

      public string IfMatch { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="")>

      Public Property IfMatch As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: 
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AccessCondition.IfNoneMatch
  commentId: P:Microsoft.Azure.Search.Models.AccessCondition.IfNoneMatch
  id: IfNoneMatch
  parent: Microsoft.Azure.Search.Models.AccessCondition
  langs:
  - csharp
  - vb
  name: IfNoneMatch
  fullName: Microsoft.Azure.Search.Models.AccessCondition.IfNoneMatch
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: IfNoneMatch
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AccessCondition.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets defines the If-None-Match condition. The operation\nwill be performed only if the ETag on the server does not match\nthis value.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "")]

      public string IfNoneMatch { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="")>

      Public Property IfNoneMatch As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: 
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: Microsoft.Azure.Search.Models.AccessCondition
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: AccessCondition
  fullName: Microsoft.Azure.Search.Models.AccessCondition
- uid: Microsoft.Azure.Search.Models.IResourceWithETag
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: IResourceWithETag
  fullName: Microsoft.Azure.Search.Models.IResourceWithETag
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
