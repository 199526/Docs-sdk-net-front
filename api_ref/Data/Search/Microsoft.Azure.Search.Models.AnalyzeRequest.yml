items:
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest
  commentId: T:Microsoft.Azure.Search.Models.AnalyzeRequest
  id: AnalyzeRequest
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor
  - Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor(System.String,Microsoft.Azure.Search.Models.AnalyzerName,Microsoft.Azure.Search.Models.TokenizerName,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName},System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName})
  - Microsoft.Azure.Search.Models.AnalyzeRequest.Analyzer
  - Microsoft.Azure.Search.Models.AnalyzeRequest.CharFilters
  - Microsoft.Azure.Search.Models.AnalyzeRequest.Text
  - Microsoft.Azure.Search.Models.AnalyzeRequest.TokenFilters
  - Microsoft.Azure.Search.Models.AnalyzeRequest.Tokenizer
  - Microsoft.Azure.Search.Models.AnalyzeRequest.Validate
  langs:
  - csharp
  - vb
  name: AnalyzeRequest
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AnalyzeRequest
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 22
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nSpecifies some text and analysis components used to break that text\ninto tokens.\n"
  example: []
  syntax:
    content: public class AnalyzeRequest
    content.vb: Public Class AnalyzeRequest
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor
  commentId: M:Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor
  id: '#ctor'
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: AnalyzeRequest()
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.AnalyzeRequest()
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the AnalyzeRequest class.\n"
  example: []
  syntax:
    content: public AnalyzeRequest()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor(System.String,Microsoft.Azure.Search.Models.AnalyzerName,Microsoft.Azure.Search.Models.TokenizerName,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName},System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName})
  commentId: M:Microsoft.Azure.Search.Models.AnalyzeRequest.#ctor(System.String,Microsoft.Azure.Search.Models.AnalyzerName,Microsoft.Azure.Search.Models.TokenizerName,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName},System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName})
  id: '#ctor(System.String,Microsoft.Azure.Search.Models.AnalyzerName,Microsoft.Azure.Search.Models.TokenizerName,System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName},System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName})'
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: AnalyzeRequest(String, AnalyzerName, TokenizerName, IList<TokenFilterName>, IList<CharFilterName>)
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.AnalyzeRequest(System.String, Microsoft.Azure.Search.Models.AnalyzerName, Microsoft.Azure.Search.Models.TokenizerName, System.Collections.Generic.IList<Microsoft.Azure.Search.Models.TokenFilterName>, System.Collections.Generic.IList<Microsoft.Azure.Search.Models.CharFilterName>)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 32
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the AnalyzeRequest class.\n"
  example: []
  syntax:
    content: public AnalyzeRequest(string text, AnalyzerName analyzer = null, TokenizerName tokenizer = null, IList<TokenFilterName> tokenFilters = null, IList<CharFilterName> charFilters = null)
    content.vb: Public Sub New(text As String, analyzer As AnalyzerName = Nothing, tokenizer As TokenizerName = Nothing, tokenFilters As IList(Of TokenFilterName) = Nothing, charFilters As IList(Of CharFilterName) = Nothing)
    parameters:
    - id: text
      type: System.String
    - id: analyzer
      type: Microsoft.Azure.Search.Models.AnalyzerName
    - id: tokenizer
      type: Microsoft.Azure.Search.Models.TokenizerName
    - id: tokenFilters
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName}
    - id: charFilters
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.AnalyzeRequest.AnalyzeRequest(System.String, Microsoft.Azure.Search.Models.AnalyzerName, Microsoft.Azure.Search.Models.TokenizerName, System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.TokenFilterName), System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.CharFilterName))
  name.vb: AnalyzeRequest(String, AnalyzerName, TokenizerName, IList(Of TokenFilterName), IList(Of CharFilterName))
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.Text
  commentId: P:Microsoft.Azure.Search.Models.AnalyzeRequest.Text
  id: Text
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: Text
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.Text
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Text
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the text to break into tokens.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "text")]

      public string Text { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="text")>

      Public Property Text As String
    parameters: []
    return:
      type: System.String
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: text
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.Analyzer
  commentId: P:Microsoft.Azure.Search.Models.AnalyzeRequest.Analyzer
  id: Analyzer
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: Analyzer
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.Analyzer
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Analyzer
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 53
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the name of the analyzer to use to break the given\ntext. If this parameter is not specified, you must specify a\ntokenizer instead. The tokenizer and analyzer parameters are\nmutually exclusive.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "analyzer")]

      public AnalyzerName Analyzer { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="analyzer")>

      Public Property Analyzer As AnalyzerName
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.AnalyzerName
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: analyzer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.Tokenizer
  commentId: P:Microsoft.Azure.Search.Models.AnalyzeRequest.Tokenizer
  id: Tokenizer
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: Tokenizer
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.Tokenizer
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Tokenizer
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 62
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets the name of the tokenizer to use to break the given\ntext. If this parameter is not specified, you must specify an\nanalyzer instead. The tokenizer and analyzer parameters are\nmutually exclusive.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tokenizer")]

      public TokenizerName Tokenizer { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tokenizer")>

      Public Property Tokenizer As TokenizerName
    parameters: []
    return:
      type: Microsoft.Azure.Search.Models.TokenizerName
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tokenizer
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.TokenFilters
  commentId: P:Microsoft.Azure.Search.Models.AnalyzeRequest.TokenFilters
  id: TokenFilters
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: TokenFilters
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.TokenFilters
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TokenFilters
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 70
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets an optional list of token filters to use when\nbreaking the given text. This parameter can only be set when\nusing the tokenizer parameter.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "tokenFilters")]

      public IList<TokenFilterName> TokenFilters { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="tokenFilters")>

      Public Property TokenFilters As IList(Of TokenFilterName)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: tokenFilters
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.CharFilters
  commentId: P:Microsoft.Azure.Search.Models.AnalyzeRequest.CharFilters
  id: CharFilters
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: CharFilters
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.CharFilters
  type: Property
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CharFilters
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nGets or sets an optional list of character filters to use when\nbreaking the given text. This parameter can only be set when\nusing the tokenizer parameter.\n"
  example: []
  syntax:
    content: >-
      [JsonProperty(PropertyName = "charFilters")]

      public IList<CharFilterName> CharFilters { get; set; }
    content.vb: >-
      <JsonProperty(PropertyName:="charFilters")>

      Public Property CharFilters As IList(Of CharFilterName)
    parameters: []
    return:
      type: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName}
  attributes:
  - type: Newtonsoft.Json.JsonPropertyAttribute
    ctor: Newtonsoft.Json.JsonPropertyAttribute.#ctor
    arguments: []
    namedArguments:
    - name: PropertyName
      type: System.String
      value: charFilters
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Search.Models.AnalyzeRequest.Validate
  commentId: M:Microsoft.Azure.Search.Models.AnalyzeRequest.Validate
  id: Validate
  parent: Microsoft.Azure.Search.Models.AnalyzeRequest
  langs:
  - csharp
  - vb
  name: Validate()
  fullName: Microsoft.Azure.Search.Models.AnalyzeRequest.Validate()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Validate
    path: src/Search/Microsoft.Azure.Search/GeneratedSearchService/Models/AnalyzeRequest.cs
    startLine: 87
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nValidate the object.\n"
  example: []
  syntax:
    content: public virtual void Validate()
    content.vb: Public Overridable Sub Validate
  exceptions:
  - type: Microsoft.Rest.ValidationException
    commentId: T:Microsoft.Rest.ValidationException
    description: "\nThrown if validation fails\n"
  modifiers.csharp:
  - public
  - virtual
  modifiers.vb:
  - Public
  - Overridable
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.Search.Models.AnalyzerName
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: AnalyzerName
  fullName: Microsoft.Azure.Search.Models.AnalyzerName
- uid: Microsoft.Azure.Search.Models.TokenizerName
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: TokenizerName
  fullName: Microsoft.Azure.Search.Models.TokenizerName
- uid: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.TokenFilterName}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<TokenFilterName>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Search.Models.TokenFilterName>
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.TokenFilterName)
  name.vb: IList(Of TokenFilterName)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.TokenFilterName
    name: TokenFilterName
    fullName: Microsoft.Azure.Search.Models.TokenFilterName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.TokenFilterName
    name: TokenFilterName
    fullName: Microsoft.Azure.Search.Models.TokenFilterName
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList{Microsoft.Azure.Search.Models.CharFilterName}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<CharFilterName>
  fullName: System.Collections.Generic.IList<Microsoft.Azure.Search.Models.CharFilterName>
  fullname.vb: System.Collections.Generic.IList(Of Microsoft.Azure.Search.Models.CharFilterName)
  name.vb: IList(Of CharFilterName)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - uid: Microsoft.Azure.Search.Models.CharFilterName
    name: CharFilterName
    fullName: Microsoft.Azure.Search.Models.CharFilterName
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Search.Models.CharFilterName
    name: CharFilterName
    fullName: Microsoft.Azure.Search.Models.CharFilterName
  - name: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  parent: System.Collections.Generic
  isExternal: true
  name: IList<T>
  fullName: System.Collections.Generic.IList<T>
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Rest.ValidationException
