items:
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  commentId: T:Microsoft.Azure.Search.Models.ExtensibleEnum`1
  id: ExtensibleEnum`1
  parent: Microsoft.Azure.Search.Models
  children:
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.#ctor(System.String)
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(`0)
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(System.Object)
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.GetHashCode
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.Lookup(System.String)
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.op_Implicit(Microsoft.Azure.Search.Models.ExtensibleEnum{`0})~System.String
  - Microsoft.Azure.Search.Models.ExtensibleEnum`1.ToString
  langs:
  - csharp
  - vb
  name: ExtensibleEnum<T>
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>
  type: Class
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ExtensibleEnum
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 14
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nAbstract base class for types that act like enums, but can be extended with arbitrary string values.\n"
  example: []
  syntax:
    content: 'public abstract class ExtensibleEnum<T> : IEquatable<T> where T : ExtensibleEnum<T>'
    content.vb: >-
      Public MustInherit Class ExtensibleEnum(Of T As ExtensibleEnum(Of T))
          Implements IEquatable(Of T)
    typeParameters:
    - id: T
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{{T}}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T)
  name.vb: ExtensibleEnum(Of T)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.#ctor(System.String)
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.#ctor(System.String)
  id: '#ctor(System.String)'
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: ExtensibleEnum(String)
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.ExtensibleEnum(System.String)
  type: Constructor
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 25
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nInitializes a new instance of the ExtensibleEnum class.\n"
  example: []
  syntax:
    content: protected ExtensibleEnum(string name)
    content.vb: Protected Sub New(name As String)
    parameters:
    - id: name
      type: System.String
      description: The value for this instance of the extensible enumeration.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).ExtensibleEnum(System.String)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.op_Implicit(Microsoft.Azure.Search.Models.ExtensibleEnum{`0})~System.String
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.op_Implicit(Microsoft.Azure.Search.Models.ExtensibleEnum{`0})~System.String
  id: op_Implicit(Microsoft.Azure.Search.Models.ExtensibleEnum{`0})~System.String
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: Implicit(ExtensibleEnum<T> to String)
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.Implicit(Microsoft.Azure.Search.Models.ExtensibleEnum<T> to System.String)
  type: Operator
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: op_Implicit
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 35
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nDefines implicit conversion from ExtensibleEnum to string.\n"
  example: []
  syntax:
    content: public static implicit operator string (ExtensibleEnum<T> name)
    content.vb: Public Shared Widening Operator CType(name As ExtensibleEnum(Of T)) As String
    parameters:
    - id: name
      type: Microsoft.Azure.Search.Models.ExtensibleEnum`1
      description: ExtensibleEnum to convert.
    return:
      type: System.String
      description: The ExtensibleEnum as a string.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).Widening(Microsoft.Azure.Search.Models.ExtensibleEnum(Of T) to System.String)
  name.vb: Widening(ExtensibleEnum(Of T) to String)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.Lookup(System.String)
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.Lookup(System.String)
  id: Lookup(System.String)
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: Lookup(String)
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.Lookup(System.String)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Lookup
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nLooks up an ExtensibleEnum instance by name, or returns null if the given name does not match one of the\nknown values of this ExtensibleEnum.\n"
  example: []
  syntax:
    content: protected static T Lookup(string name)
    content.vb: Protected Shared Function Lookup(name As String) As T
    parameters:
    - id: name
      type: System.String
      description: Name of the ExtensibleEnum value.
    return:
      type: '{T}'
      description: An instance of type T with the given name, or null if no such instance could be found.
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).Lookup(System.String)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(`0)
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(`0)
  id: Equals(`0)
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: Equals(T)
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.Equals(T)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Equals
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nCompares the ExtensibleEnum for equality with another ExtensibleEnum.\n"
  example: []
  syntax:
    content: public bool Equals(T other)
    content.vb: Public Function Equals(other As T) As Boolean
    parameters:
    - id: other
      type: '{T}'
      description: The ExtensibleEnum with which to compare.
    return:
      type: System.Boolean
      description: true if the ExtensibleEnum objects are equal; false otherwise.
  implements:
  - System.IEquatable{{T}}.Equals({T})
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).Equals(T)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(System.Object)
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: Equals(Object)
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Equals
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 77
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
    return:
      type: System.Boolean
  overridden: System.Object.Equals(System.Object)
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).Equals(System.Object)
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.GetHashCode
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.GetHashCode
  id: GetHashCode
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: GetHashCode()
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetHashCode
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 83
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
  overridden: System.Object.GetHashCode
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).GetHashCode()
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1.ToString
  commentId: M:Microsoft.Azure.Search.Models.ExtensibleEnum`1.ToString
  id: ToString
  parent: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  langs:
  - csharp
  - vb
  name: ToString()
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>.ToString()
  type: Method
  source:
    remote:
      path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ToString
    path: src/Search/Microsoft.Azure.Search/Customizations/Indexes/Models/ExtensibleEnum.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Search
  packages:
  - Microsoft.Azure.Search(2.0.4-preview)
  namespace: Microsoft.Azure.Search.Models
  summary: "\nReturns a string representation of the ExtensibleEnum.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: The ExtensibleEnum as a string.
  overridden: System.Object.ToString
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
  fullName.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T).ToString()
references:
- uid: Microsoft.Azure.Search.Models
  isExternal: false
  name: Microsoft.Azure.Search.Models
  fullName: Microsoft.Azure.Search.Models
- uid: System.Object
  parent: System
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.IEquatable{{T}}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System
  isExternal: false
  name: System
  fullName: System
- uid: System.IEquatable`1
  parent: System
  isExternal: true
  name: IEquatable<T>
  fullName: System.IEquatable<T>
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.String
  parent: System
  isExternal: true
  name: String
  fullName: System.String
- uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1
  parent: Microsoft.Azure.Search.Models
  isExternal: false
  name: ExtensibleEnum<T>
  fullName: Microsoft.Azure.Search.Models.ExtensibleEnum<T>
  fullname.vb: Microsoft.Azure.Search.Models.ExtensibleEnum(Of T)
  name.vb: ExtensibleEnum(Of T)
  spec.csharp:
  - uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1
    name: ExtensibleEnum
    fullName: Microsoft.Azure.Search.Models.ExtensibleEnum
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.Azure.Search.Models.ExtensibleEnum`1
    name: ExtensibleEnum
    fullName: Microsoft.Azure.Search.Models.ExtensibleEnum
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: '{T}'
  isExternal: false
  name: T
  fullName: T
- uid: System.IEquatable{{T}}.Equals({T})
  parent: System.IEquatable{{T}}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  parent: System.IEquatable`1
  isExternal: true
  name: Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    fullName: (
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    fullName: (
  - uid: System.Object
    name: Object
    fullName: System.Object
    isExternal: true
  - name: )
    fullName: )
- uid: System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
- uid: System.Int32
  parent: System
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    fullName: (
  - name: )
    fullName: )
