items:
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  commentId: T:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  id: ResponseParsingBase`1
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol
  children:
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.#ctor(Stream)
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.allObjectsParsed
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose(System.Boolean)
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ObjectsToParse
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.outstandingObjectsToParse
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ParseXml
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.reader
  - Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Variable(System.Boolean@)
  langs:
  - csharp
  - vb
  name: ResponseParsingBase<T>
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>
  type: Class
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ResponseParsingBase
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 31
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nProvides a base class that is used internally to parse XML streams from storage service operations.\n"
  example: []
  syntax:
    content: 'public abstract class ResponseParsingBase<T> : IDisposable'
    content.vb: >-
      Public MustInherit Class ResponseParsingBase(Of T)
          Inherits IDisposable
    typeParameters:
    - id: T
      description: The type to be parsed.
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T)
  name.vb: ResponseParsingBase(Of T)
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.allObjectsParsed
  commentId: F:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.allObjectsParsed
  id: allObjectsParsed
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: allObjectsParsed
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.allObjectsParsed
  type: Field
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: allObjectsParsed
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 46
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nIndicates that all parsable objects have been consumed. This field is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected bool allObjectsParsed
    content.vb: Protected allObjectsParsed As Boolean
    return:
      type: System.Boolean
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).allObjectsParsed
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.outstandingObjectsToParse
  commentId: F:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.outstandingObjectsToParse
  id: outstandingObjectsToParse
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: outstandingObjectsToParse
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.outstandingObjectsToParse
  type: Field
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: outstandingObjectsToParse
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 55
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nStores any objects that have not yet been parsed. This field is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected IList<T> outstandingObjectsToParse
    content.vb: Protected outstandingObjectsToParse As IList(Of T)
    return:
      type: IList{{T}}
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).outstandingObjectsToParse
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.reader
  commentId: F:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.reader
  id: reader
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: reader
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.reader
  type: Field
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: reader
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 64
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nThe reader used for parsing. This field is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected XmlReader reader
    content.vb: Protected reader As XmlReader
    return:
      type: XmlReader
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).reader
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.#ctor(Stream)
  commentId: M:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.#ctor(Stream)
  id: '#ctor(Stream)'
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: ResponseParsingBase(Stream)
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.ResponseParsingBase(Stream)
  type: Constructor
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 80
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nInitializes a new instance of the ResponseParsingBase class.\n"
  example: []
  syntax:
    content: protected ResponseParsingBase(Stream stream)
    content.vb: Protected Sub New(stream As Stream)
    parameters:
    - id: stream
      type: Stream
      description: The stream to be parsed.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).ResponseParsingBase(Stream)
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ObjectsToParse
  commentId: P:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ObjectsToParse
  id: ObjectsToParse
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: ObjectsToParse
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.ObjectsToParse
  type: Property
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ObjectsToParse
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 92
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nGets the parsable objects. This method is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected IEnumerable<T> ObjectsToParse { get; }
    content.vb: Protected ReadOnly Property ObjectsToParse As IEnumerable(Of T)
    parameters: []
    return:
      type: IEnumerable{{T}}
      description: The objects to parse.
  modifiers.csharp:
  - protected
  - get
  modifiers.vb:
  - Protected
  - ReadOnly
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).ObjectsToParse
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose
  commentId: M:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose
  id: Dispose
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.Dispose()
  type: Method
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Dispose
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 123
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources. \n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).Dispose()
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ParseXml
  commentId: M:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.ParseXml
  id: ParseXml
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: ParseXml()
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.ParseXml()
  type: Method
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ParseXml
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 134
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nParses the XML response. This method is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected abstract IEnumerable<T> ParseXml()
    content.vb: Protected MustOverride Function ParseXml As IEnumerable(Of T)
    return:
      type: IEnumerable{{T}}
      description: A collection of enumerable objects.
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).ParseXml()
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose(System.Boolean)
  commentId: M:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Dispose(System.Boolean)
  id: Dispose(System.Boolean)
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: Dispose(Boolean)
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.Dispose(System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Dispose
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 141
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nPerforms application-defined tasks associated with freeing, releasing, or resetting unmanaged resources, and optional\nmanaged resources.\n"
  example: []
  syntax:
    content: protected virtual void Dispose(bool disposing)
    content.vb: Protected Overridable Sub Dispose(disposing As Boolean)
    parameters:
    - id: disposing
      type: System.Boolean
      description: <code>True</code> to release both managed and unmanaged resources; otherwise, <code>false</code>.
  modifiers.csharp:
  - protected
  - virtual
  modifiers.vb:
  - Protected
  - Overridable
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).Dispose(System.Boolean)
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Variable(System.Boolean@)
  commentId: M:Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1.Variable(System.Boolean@)
  id: Variable(System.Boolean@)
  parent: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase`1
  langs:
  - csharp
  - vb
  name: Variable(ref Boolean)
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase<T>.Variable(ref System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Variable
    path: Lib/Common/Shared/Protocol/ResponseParsingBase.cs
    startLine: 162
  assemblies:
  - Microsoft.WindowsAzure.Storage
  packages:
  - Microsoft.WindowsAzure.Storage(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Shared.Protocol
  summary: "\nThis method is reserved and should not be used.\n"
  example: []
  syntax:
    content: protected void Variable(ref bool consumable)
    content.vb: Protected Sub Variable(ByRef consumable As Boolean)
    parameters:
    - id: consumable
      type: System.Boolean
      description: <code>True</code> when the object is consumable.
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: Microsoft.WindowsAzure.Storage.Shared.Protocol.ResponseParsingBase(Of T).Variable(ByRef System.Boolean)
  name.vb: Variable(ByRef Boolean)
references:
- uid: Microsoft.WindowsAzure.Storage.Shared.Protocol
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Shared.Protocol
  fullName: Microsoft.WindowsAzure.Storage.Shared.Protocol
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: System.Boolean
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: IList{{T}}
  definition: IList`1
  name: IList<T>
  fullName: IList<T>
  fullname.vb: IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: IList`1
    name: IList
    fullName: IList
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: IList`1
  isExternal: true
  name: IList<>
  fullName: IList<>
  fullname.vb: IList(Of )
  name.vb: IList(Of )
  spec.csharp:
  - uid: IList`1
    name: IList
    fullName: IList
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IList`1
    name: IList
    fullName: IList
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
- uid: XmlReader
  isExternal: true
  name: XmlReader
  fullName: XmlReader
- uid: Stream
  isExternal: true
  name: Stream
  fullName: Stream
- uid: IEnumerable{{T}}
  definition: IEnumerable`1
  name: IEnumerable<T>
  fullName: IEnumerable<T>
  fullname.vb: IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: T
    fullName: T
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: T
    fullName: T
  - name: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  fullName: IEnumerable<>
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
