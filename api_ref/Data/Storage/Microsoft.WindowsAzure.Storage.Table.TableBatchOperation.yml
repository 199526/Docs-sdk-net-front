### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  id: TableBatchOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  children:
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation[],System.Int32)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(System.Int32,Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item(System.Int32)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt(System.Int32)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(System.String,System.String)
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,List{System.String})
  - Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},List{System.String})
  langs:
  - csharp
  - vb
  name: TableBatchOperation
  nameWithType: TableBatchOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  type: Class
  source:
    remote:
      path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: TableBatchOperation
    path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
    startLine: 38
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRepresents a batch operation on a table.\n"
  remarks: "<p>A batch operation is a collection of table operations which are executed by the Storage Service REST API as a single atomic operation, by invoking an \n<a href=\"http://msdn.microsoft.com/en-us/library/windowsazure/dd894038.aspx\">Entity Group Transaction</a>.</p>\n<p>A batch operation may contain up to 100 individual \n    table operations, with the requirement that each operation entity must have same partition key. A batch with a retrieve operation cannot contain any other operations. \n    Note that the total payload of a batch operation is limited to 4MB.</p>"
  example: []
  syntax:
    content: 'public sealed class TableBatchOperation : IList<TableOperation>, IList<TableOperation>'
    content.vb: >-
      Public NotInheritable Class TableBatchOperation
          Inherits IList(Of TableOperation)
          Implements IList(Of TableOperation)
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: TableBatchOperation()
  nameWithType: TableBatchOperation.TableBatchOperation()
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.TableBatchOperation()
  type: Constructor
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 42
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> class.\n"
  example: []
  syntax:
    content: public TableBatchOperation()
    content.vb: Public Sub New
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Delete(ITableEntity)
  nameWithType: TableBatchOperation.Delete(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Delete
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 52
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that deletes the specified entity from a table.\n"
  example: []
  syntax:
    content: public void Delete(ITableEntity entity)
    content.vb: Public Sub Delete(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity to be deleted from the table.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Insert(ITableEntity)
  nameWithType: TableBatchOperation.Insert(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Insert
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 71
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that inserts the specified entity into a table.\n"
  example: []
  syntax:
    content: public void Insert(ITableEntity entity)
    content.vb: Public Sub Insert(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity to be inserted into the table.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  id: Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity,System.Boolean)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Insert(ITableEntity, Boolean)
  nameWithType: TableBatchOperation.Insert(ITableEntity, Boolean)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(Microsoft.WindowsAzure.Storage.Table.ITableEntity, System.Boolean)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Insert
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 81
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> object that inserts the specified entity into the table as part of the batch operation.\n"
  example: []
  syntax:
    content: public void Insert(ITableEntity entity, bool echoContent)
    content.vb: Public Sub Insert(entity As ITableEntity, echoContent As Boolean)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity to be inserted into the table.
    - id: echoContent
      type: System.Boolean
      description: <code>true</code> if the message payload should be returned in the response to the insert operation;otherwise, <code>false</code>.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: InsertOrMerge(ITableEntity)
  nameWithType: TableBatchOperation.InsertOrMerge(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: InsertOrMerge
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 94
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that inserts the specified entity into a table if the entity does not exist; if the entity does exist then its contents are merged with the provided entity.\n"
  example: []
  syntax:
    content: public void InsertOrMerge(ITableEntity entity)
    content.vb: Public Sub InsertOrMerge(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity whose contents are being inserted or merged.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: InsertOrReplace(ITableEntity)
  nameWithType: TableBatchOperation.InsertOrReplace(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: InsertOrReplace
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 107
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that inserts the specified entity into a table if the entity does not exist; if the entity does exist then its contents are replaced with the provided entity.\n"
  example: []
  syntax:
    content: public void InsertOrReplace(ITableEntity entity)
    content.vb: Public Sub InsertOrReplace(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity whose contents are being inserted or replaced.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Merge(ITableEntity)
  nameWithType: TableBatchOperation.Merge(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Merge
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 120
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that merges the contents of the specified entity with the existing entity in a table.\n"
  example: []
  syntax:
    content: public void Merge(ITableEntity entity)
    content.vb: Public Sub Merge(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity whose contents are being merged.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  id: Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Replace(ITableEntity)
  nameWithType: TableBatchOperation.Replace(ITableEntity)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace(Microsoft.WindowsAzure.Storage.Table.ITableEntity)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Replace
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 139
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that replaces the contents of the specified entity in a table.\n"
  example: []
  syntax:
    content: public void Replace(ITableEntity entity)
    content.vb: Public Sub Replace(entity As ITableEntity)
    parameters:
    - id: entity
      type: Microsoft.WindowsAzure.Storage.Table.ITableEntity
      description: The entity whose contents are being replaced.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(System.String,System.String)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(System.String,System.String)
  id: Retrieve(System.String,System.String)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Retrieve(String, String)
  nameWithType: TableBatchOperation.Retrieve(String, String)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(System.String, System.String)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 159
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> that retrieves an entity with the specified partition key and row key.\n"
  example: []
  syntax:
    content: public void Retrieve(string partitionKey, string rowKey)
    content.vb: Public Sub Retrieve(partitionKey As String, rowKey As String)
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to retrieve.
    - id: rowKey
      type: System.String
      description: A string containing the row key of the entity to retrieve.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: IndexOf(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: IndexOf(TableOperation)
  nameWithType: TableBatchOperation.IndexOf(TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IndexOf
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 176
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReturns the zero-based index of the first occurrence of the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> item, or -1 if the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> does not contain the item.\n"
  example: []
  syntax:
    content: public int IndexOf(TableOperation item)
    content.vb: Public Function IndexOf(item As TableOperation) As Integer
    parameters:
    - id: item
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item to search for.
    return:
      type: System.Int32
      description: The zero-based index of the first occurrence of item within the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>, if found; otherwise, –1.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(System.Int32,Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(System.Int32,Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: Insert(System.Int32,Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Insert(Int32, TableOperation)
  nameWithType: TableBatchOperation.Insert(Int32, TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert(System.Int32, Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Insert
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 186
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nInserts a <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> into the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> at the specified index.\n"
  example: []
  syntax:
    content: public void Insert(int index, TableOperation item)
    content.vb: Public Sub Insert(index As Integer, item As TableOperation)
    parameters:
    - id: index
      type: System.Int32
      description: The index at which to insert the <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref>.
    - id: item
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item to insert.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt(System.Int32)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt(System.Int32)
  id: RemoveAt(System.Int32)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: RemoveAt(Int32)
  nameWithType: TableBatchOperation.RemoveAt(Int32)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt(System.Int32)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: RemoveAt
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 200
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRemoves the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> at the specified index from the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void RemoveAt(int index)
    content.vb: Public Sub RemoveAt(index As Integer)
    parameters:
    - id: index
      type: System.Int32
      description: The index of the <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> to remove from the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item(System.Int32)
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item(System.Int32)
  id: Item(System.Int32)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Item[Int32]
  nameWithType: TableBatchOperation.Item[Int32]
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item[System.Int32]
  type: Property
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: this[]
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 216
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets or sets the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> item at the specified index.\n"
  example: []
  syntax:
    content: public TableOperation this[int index] { get; set; }
    content.vb: Public Property Item(index As Integer) As TableOperation
    parameters:
    - id: index
      type: System.Int32
      description: The index at which to get or set the <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item.
    return:
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item at the specified index.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item*
  nameWithType.vb: TableBatchOperation.Item(Int32)
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item(System.Int32)
  name.vb: Item(Int32)
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: Add(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Add(TableOperation)
  nameWithType: TableBatchOperation.Add(TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Add
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 233
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> to the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Add(TableOperation item)
    content.vb: Public Sub Add(item As TableOperation)
    parameters:
    - id: item
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item to add to the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear
  id: Clear
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Clear()
  nameWithType: TableBatchOperation.Clear()
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear()
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Clear
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 246
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nClears all <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> objects from the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public void Clear()
    content.vb: Public Sub Clear
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: Contains(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Contains(TableOperation)
  nameWithType: TableBatchOperation.Contains(TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Contains
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 258
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReturns <code>true</code> if this <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> contains the specified element.\n"
  example: []
  syntax:
    content: public bool Contains(TableOperation item)
    content.vb: Public Function Contains(item As TableOperation) As Boolean
    parameters:
    - id: item
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item to search for.
    return:
      type: System.Boolean
      description: <code>true</code> if the item is contained in the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>; <code>false</code>, otherwise.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation[],System.Int32)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation[],System.Int32)
  id: CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation[],System.Int32)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: CopyTo(TableOperation[], Int32)
  nameWithType: TableBatchOperation.CopyTo(TableOperation[], Int32)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation[], System.Int32)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: CopyTo
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 268
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nCopies all the elements of the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> to the specified one-dimensional array starting at the specified destination array index. \n"
  example: []
  syntax:
    content: public void CopyTo(TableOperation[] array, int arrayIndex)
    content.vb: Public Sub CopyTo(array As TableOperation(), arrayIndex As Integer)
    parameters:
    - id: array
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation[]
      description: A one-dimensional array that serves as the destination for the elements copied from the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>.
    - id: arrayIndex
      type: System.Int32
      description: The index in the destination array at which copying begins.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo*
  nameWithType.vb: TableBatchOperation.CopyTo(TableOperation(), Int32)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo(Microsoft.WindowsAzure.Storage.Table.TableOperation(), System.Int32)
  name.vb: CopyTo(TableOperation(), Int32)
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
  id: Count
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Count
  nameWithType: TableBatchOperation.Count
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
  type: Property
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Count
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 277
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets the number of operations in this <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public int Count { get; }
    content.vb: Public ReadOnly Property Count As Integer
    parameters: []
    return:
      type: System.Int32
      description: The number of operations in the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref>.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
  commentId: P:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
  id: IsReadOnly
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: IsReadOnly
  nameWithType: TableBatchOperation.IsReadOnly
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
  type: Property
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: IsReadOnly
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 286
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nGets a value indicating whether the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref> is read-only.\n"
  example: []
  syntax:
    content: public bool IsReadOnly { get; }
    content.vb: Public ReadOnly Property IsReadOnly As Boolean
    parameters: []
    return:
      type: System.Boolean
      description: <code>true</code> if the <xref href="Microsoft.WindowsAzure.Storage.Table.TableBatchOperation" data-throw-if-not-resolved="false"></xref> is read-only; <code>false</code>, otherwise.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  id: Remove(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Remove(TableOperation)
  nameWithType: TableBatchOperation.Remove(TableOperation)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove(Microsoft.WindowsAzure.Storage.Table.TableOperation)
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Remove
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 296
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nRemoves the specified <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableOperation\" data-throw-if-not-resolved=\"false\"></xref> item from the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public bool Remove(TableOperation item)
    content.vb: Public Function Remove(item As TableOperation) As Boolean
    parameters:
    - id: item
      type: Microsoft.WindowsAzure.Storage.Table.TableOperation
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> item to remove.
    return:
      type: System.Boolean
      description: <code>true</code> if the item was successfully removed; <code>false</code>, otherwise.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator
  id: GetEnumerator
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: GetEnumerator()
  nameWithType: TableBatchOperation.GetEnumerator()
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator()
  type: Method
  source:
    remote:
      path: Lib/Common/Table/TableBatchOperation.Common.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: GetEnumerator
    path: Lib/Common/Table/TableBatchOperation.Common.cs
    startLine: 315
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nReturns an <see cref=\"!:System.Collections.Generic.IEnumerator&lt;T&gt;\"></see> for the <xref href=\"Microsoft.WindowsAzure.Storage.Table.TableBatchOperation\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public IEnumerator<TableOperation> GetEnumerator()
    content.vb: Public Function GetEnumerator As IEnumerator(Of TableOperation)
    return:
      type: IEnumerator{Microsoft.WindowsAzure.Storage.Table.TableOperation}
      description: An <see cref="!:System.Collections.IEnumerator"></see> for <xref href="Microsoft.WindowsAzure.Storage.Table.TableOperation" data-throw-if-not-resolved="false"></xref> items.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,List{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,List{System.String})
  id: Retrieve``1(System.String,System.String,List{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Retrieve<TElement>(String, String, List<String>)
  nameWithType: TableBatchOperation.Retrieve<TElement>(String, String, List<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve<TElement>(System.String, System.String, List<System.String>)
  type: Method
  source:
    remote:
      path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
    startLine: 91
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a table operation that retrieves an entity with the specified partition key and row key to the batch operation.  The entity will be deserialized into the specified class type which extends <xref href=\"Microsoft.WindowsAzure.Storage.Table.ITableEntity\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: 'public void Retrieve<TElement>(string partitionKey, string rowkey, List<string> selectedColumns = null)where TElement : ITableEntity'
    content.vb: Public Sub Retrieve(Of TElement As ITableEntity)(partitionKey As String, rowkey As String, selectedColumns As List(Of String) = Nothing)
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to be retrieved.
    - id: rowkey
      type: System.String
      description: A string containing the row key of the entity to be retrieved.
    - id: selectedColumns
      type: List{System.String}
      description: List of column names for projection.
    typeParameters:
    - id: TElement
      description: The class of type for the entity to retrieve.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve*
  nameWithType.vb: TableBatchOperation.Retrieve(Of TElement)(String, String, List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(Of TElement)(System.String, System.String, List(Of System.String))
  name.vb: Retrieve(Of TElement)(String, String, List(Of String))
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},List{System.String})
  commentId: M:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},List{System.String})
  id: Retrieve``1(System.String,System.String,Microsoft.WindowsAzure.Storage.Table.EntityResolver{``0},List{System.String})
  parent: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  langs:
  - csharp
  - vb
  name: Retrieve<TResult>(String, String, EntityResolver<TResult>, List<String>)
  nameWithType: TableBatchOperation.Retrieve<TResult>(String, String, EntityResolver<TResult>, List<String>)
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve<TResult>(System.String, System.String, Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>, List<System.String>)
  type: Method
  source:
    remote:
      path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Retrieve
    path: Lib/WindowsRuntime/Table/TableBatchOperation.cs
    startLine: 109
  assemblies:
  - Microsoft.WindowsAzure.Storage
  namespace: Microsoft.WindowsAzure.Storage.Table
  summary: "\nAdds a table operation that retrieves an entity with the specified partition key and row key to the batch operation.\n"
  example: []
  syntax:
    content: public void Retrieve<TResult>(string partitionKey, string rowkey, EntityResolver<TResult> resolver, List<string> selectedColumns = null)
    content.vb: Public Sub Retrieve(Of TResult)(partitionKey As String, rowkey As String, resolver As EntityResolver(Of TResult), selectedColumns As List(Of String) = Nothing)
    parameters:
    - id: partitionKey
      type: System.String
      description: A string containing the partition key of the entity to be retrieved.
    - id: rowkey
      type: System.String
      description: A string containing the row key of the entity to be retrieved.
    - id: resolver
      type: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
      description: The <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver%601" data-throw-if-not-resolved="false"></xref> implementation to project the entity to retrieve as a particular type in the result.
    - id: selectedColumns
      type: List{System.String}
      description: List of column names for projection.
    typeParameters:
    - id: TResult
      description: The return type which the specified <xref href="Microsoft.WindowsAzure.Storage.Table.EntityResolver%601" data-throw-if-not-resolved="false"></xref> will resolve the given entity to.
  overload: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve*
  nameWithType.vb: TableBatchOperation.Retrieve(Of TResult)(String, String, EntityResolver(Of TResult), List(Of String))
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve(Of TResult)(System.String, System.String, Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult), List(Of System.String))
  name.vb: Retrieve(Of TResult)(String, String, EntityResolver(Of TResult), List(Of String))
references:
- uid: Microsoft.WindowsAzure.Storage.Table
  commentId: N:Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Table
  nameWithType: Microsoft.WindowsAzure.Storage.Table
  fullName: Microsoft.WindowsAzure.Storage.Table
- uid: System.Object
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableBatchOperation
  nameWithType: TableBatchOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.#ctor
  isExternal: false
  name: TableBatchOperation
  nameWithType: TableBatchOperation.TableBatchOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.TableBatchOperation
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
  commentId: T:Microsoft.WindowsAzure.Storage.Table.TableOperation
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: TableOperation
  nameWithType: TableOperation
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete
  isExternal: false
  name: Delete
  nameWithType: TableBatchOperation.Delete
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Delete
- uid: Microsoft.WindowsAzure.Storage.Table.ITableEntity
  commentId: T:Microsoft.WindowsAzure.Storage.Table.ITableEntity
  parent: Microsoft.WindowsAzure.Storage.Table
  isExternal: false
  name: ITableEntity
  nameWithType: ITableEntity
  fullName: Microsoft.WindowsAzure.Storage.Table.ITableEntity
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert
  isExternal: false
  name: Insert
  nameWithType: TableBatchOperation.Insert
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Insert
- uid: System.Boolean
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge
  isExternal: false
  name: InsertOrMerge
  nameWithType: TableBatchOperation.InsertOrMerge
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrMerge
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace
  isExternal: false
  name: InsertOrReplace
  nameWithType: TableBatchOperation.InsertOrReplace
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.InsertOrReplace
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge
  isExternal: false
  name: Merge
  nameWithType: TableBatchOperation.Merge
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Merge
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace
  isExternal: false
  name: Replace
  nameWithType: TableBatchOperation.Replace
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Replace
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve
  isExternal: false
  name: Retrieve
  nameWithType: TableBatchOperation.Retrieve
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Retrieve
- uid: System.String
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf
  isExternal: false
  name: IndexOf
  nameWithType: TableBatchOperation.IndexOf
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IndexOf
- uid: System.Int32
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt
  isExternal: false
  name: RemoveAt
  nameWithType: TableBatchOperation.RemoveAt
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.RemoveAt
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item
  isExternal: false
  name: Item
  nameWithType: TableBatchOperation.Item
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Item
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add
  isExternal: false
  name: Add
  nameWithType: TableBatchOperation.Add
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Add
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear
  isExternal: false
  name: Clear
  nameWithType: TableBatchOperation.Clear
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Clear
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains
  isExternal: false
  name: Contains
  nameWithType: TableBatchOperation.Contains
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Contains
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo
  isExternal: false
  name: CopyTo
  nameWithType: TableBatchOperation.CopyTo
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.CopyTo
- uid: Microsoft.WindowsAzure.Storage.Table.TableOperation[]
  name: TableOperation[]
  nameWithType: TableOperation[]
  fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation[]
  nameWithType.vb: TableOperation()
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.TableOperation()
  name.vb: TableOperation()
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
    name: TableOperation
    nameWithType: TableOperation
    fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
    name: TableOperation
    nameWithType: TableOperation
    fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
  isExternal: false
  name: Count
  nameWithType: TableBatchOperation.Count
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Count
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
  isExternal: false
  name: IsReadOnly
  nameWithType: TableBatchOperation.IsReadOnly
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.IsReadOnly
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove
  isExternal: false
  name: Remove
  nameWithType: TableBatchOperation.Remove
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.Remove
- uid: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator*
  commentId: Overload:Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator
  isExternal: false
  name: GetEnumerator
  nameWithType: TableBatchOperation.GetEnumerator
  fullName: Microsoft.WindowsAzure.Storage.Table.TableBatchOperation.GetEnumerator
- uid: IEnumerator{Microsoft.WindowsAzure.Storage.Table.TableOperation}
  commentId: '!:IEnumerator{Microsoft.WindowsAzure.Storage.Table.TableOperation}'
  definition: IEnumerator`1
  name: IEnumerator<TableOperation>
  nameWithType: IEnumerator<TableOperation>
  fullName: IEnumerator<Microsoft.WindowsAzure.Storage.Table.TableOperation>
  nameWithType.vb: IEnumerator(Of TableOperation)
  fullname.vb: IEnumerator(Of Microsoft.WindowsAzure.Storage.Table.TableOperation)
  name.vb: IEnumerator(Of TableOperation)
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
    name: TableOperation
    nameWithType: TableOperation
    fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.WindowsAzure.Storage.Table.TableOperation
    name: TableOperation
    nameWithType: TableOperation
    fullName: Microsoft.WindowsAzure.Storage.Table.TableOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerator`1
  isExternal: true
  name: IEnumerator<>
  nameWithType: IEnumerator<>
  fullName: IEnumerator<>
  nameWithType.vb: IEnumerator(Of )
  fullname.vb: IEnumerator(Of )
  name.vb: IEnumerator(Of )
  spec.csharp:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerator`1
    name: IEnumerator
    nameWithType: IEnumerator
    fullName: IEnumerator
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: List{System.String}
  commentId: '!:List{System.String}'
  definition: List`1
  name: List<String>
  nameWithType: List<String>
  fullName: List<System.String>
  nameWithType.vb: List(Of String)
  fullname.vb: List(Of System.String)
  name.vb: List(Of String)
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: List`1
  isExternal: true
  name: List<>
  nameWithType: List<>
  fullName: List<>
  nameWithType.vb: List(Of )
  fullname.vb: List(Of )
  name.vb: List(Of )
  spec.csharp:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: List`1
    name: List
    nameWithType: List
    fullName: List
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  isExternal: false
  name: EntityResolver<T>
  nameWithType: EntityResolver<T>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<T>
  nameWithType.vb: EntityResolver(Of T)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of T)
  name.vb: EntityResolver(Of T)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver{{TResult}}
  commentId: T:Microsoft.WindowsAzure.Storage.Table.EntityResolver{``1}
  parent: Microsoft.WindowsAzure.Storage.Table
  definition: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
  name: EntityResolver<TResult>
  nameWithType: EntityResolver<TResult>
  fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver<TResult>
  nameWithType.vb: EntityResolver(Of TResult)
  fullname.vb: Microsoft.WindowsAzure.Storage.Table.EntityResolver(Of TResult)
  name.vb: EntityResolver(Of TResult)
  spec.csharp:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Microsoft.WindowsAzure.Storage.Table.EntityResolver`1
    name: EntityResolver
    nameWithType: EntityResolver
    fullName: Microsoft.WindowsAzure.Storage.Table.EntityResolver
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
