items:
- uid: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  commentId: T:Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  id: AlwaysRetry
  parent: Microsoft.WindowsAzure.Storage.Core
  children:
  - Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.#ctor(IEnumerable{RetryContext},IEnumerable{RetryInfo})
  - Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.CreateInstance
  - Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.Evaluate(RetryContext,OperationContext)
  - Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.ShouldRetry(System.Int32,System.Int32,Exception,TimeSpan@,OperationContext)
  langs:
  - csharp
  - vb
  name: AlwaysRetry
  fullName: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  type: Class
  source:
    remote:
      path: Test/Common/Core/AlwaysRetry.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: AlwaysRetry
    path: Test/Common/Core/AlwaysRetry.cs
    startLine: 29
  assemblies:
  - Microsoft.WindowsAzure.Storage.Test
  packages:
  - Microsoft.WindowsAzure.Storage.Test(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Core
  syntax:
    content: 'public class AlwaysRetry : IExtendedRetryPolicy'
    content.vb: >-
      Public Class AlwaysRetry
          Inherits IExtendedRetryPolicy
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.#ctor(IEnumerable{RetryContext},IEnumerable{RetryInfo})
  commentId: M:Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.#ctor(IEnumerable{RetryContext},IEnumerable{RetryInfo})
  id: '#ctor(IEnumerable{RetryContext},IEnumerable{RetryInfo})'
  parent: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  langs:
  - csharp
  - vb
  name: AlwaysRetry(IEnumerable<RetryContext>, IEnumerable<RetryInfo>)
  fullName: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.AlwaysRetry(IEnumerable<RetryContext>, IEnumerable<RetryInfo>)
  type: Constructor
  source:
    remote:
      path: Test/Common/Core/AlwaysRetry.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: .ctor
    path: Test/Common/Core/AlwaysRetry.cs
    startLine: 35
  assemblies:
  - Microsoft.WindowsAzure.Storage.Test
  packages:
  - Microsoft.WindowsAzure.Storage.Test(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Core
  syntax:
    content: public AlwaysRetry(IEnumerable<RetryContext> retryContextList, IEnumerable<RetryInfo> retryInfoList)
    content.vb: Public Sub New(retryContextList As IEnumerable(Of RetryContext), retryInfoList As IEnumerable(Of RetryInfo))
    parameters:
    - id: retryContextList
      type: IEnumerable{RetryContext}
    - id: retryInfoList
      type: IEnumerable{RetryInfo}
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.AlwaysRetry(IEnumerable(Of RetryContext), IEnumerable(Of RetryInfo))
  name.vb: AlwaysRetry(IEnumerable(Of RetryContext), IEnumerable(Of RetryInfo))
- uid: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.ShouldRetry(System.Int32,System.Int32,Exception,TimeSpan@,OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.ShouldRetry(System.Int32,System.Int32,Exception,TimeSpan@,OperationContext)
  id: ShouldRetry(System.Int32,System.Int32,Exception,TimeSpan@,OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  langs:
  - csharp
  - vb
  name: ShouldRetry(Int32, Int32, Exception, out TimeSpan, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.ShouldRetry(System.Int32, System.Int32, Exception, out TimeSpan, OperationContext)
  type: Method
  source:
    remote:
      path: Test/Common/Core/AlwaysRetry.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: ShouldRetry
    path: Test/Common/Core/AlwaysRetry.cs
    startLine: 42
  assemblies:
  - Microsoft.WindowsAzure.Storage.Test
  packages:
  - Microsoft.WindowsAzure.Storage.Test(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Core
  syntax:
    content: public bool ShouldRetry(int currentRetryCount, int statusCode, Exception lastException, out TimeSpan retryInterval, OperationContext operationContext)
    content.vb: Public Function ShouldRetry(currentRetryCount As Integer, statusCode As Integer, lastException As Exception, ByRef retryInterval As TimeSpan, operationContext As OperationContext) As Boolean
    parameters:
    - id: currentRetryCount
      type: System.Int32
    - id: statusCode
      type: System.Int32
    - id: lastException
      type: Exception
    - id: retryInterval
      type: TimeSpan
    - id: operationContext
      type: OperationContext
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.ShouldRetry(System.Int32, System.Int32, Exception, ByRef TimeSpan, OperationContext)
  name.vb: ShouldRetry(Int32, Int32, Exception, ByRef TimeSpan, OperationContext)
- uid: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.Evaluate(RetryContext,OperationContext)
  commentId: M:Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.Evaluate(RetryContext,OperationContext)
  id: Evaluate(RetryContext,OperationContext)
  parent: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  langs:
  - csharp
  - vb
  name: Evaluate(RetryContext, OperationContext)
  fullName: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.Evaluate(RetryContext, OperationContext)
  type: Method
  source:
    remote:
      path: Test/Common/Core/AlwaysRetry.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: Evaluate
    path: Test/Common/Core/AlwaysRetry.cs
    startLine: 58
  assemblies:
  - Microsoft.WindowsAzure.Storage.Test
  packages:
  - Microsoft.WindowsAzure.Storage.Test(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Core
  syntax:
    content: public RetryInfo Evaluate(RetryContext retryContext, OperationContext operationContext)
    content.vb: Public Function Evaluate(retryContext As RetryContext, operationContext As OperationContext) As RetryInfo
    parameters:
    - id: retryContext
      type: RetryContext
    - id: operationContext
      type: OperationContext
    return:
      type: RetryInfo
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.CreateInstance
  commentId: M:Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.CreateInstance
  id: CreateInstance
  parent: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry
  langs:
  - csharp
  - vb
  name: CreateInstance()
  fullName: Microsoft.WindowsAzure.Storage.Core.AlwaysRetry.CreateInstance()
  type: Method
  source:
    remote:
      path: Test/Common/Core/AlwaysRetry.cs
      branch: master
      repo: https://github.com/Azure/azure-storage-net
    id: CreateInstance
    path: Test/Common/Core/AlwaysRetry.cs
    startLine: 74
  assemblies:
  - Microsoft.WindowsAzure.Storage.Test
  packages:
  - Microsoft.WindowsAzure.Storage.Test(7.2.1.0)
  namespace: Microsoft.WindowsAzure.Storage.Core
  syntax:
    content: public IRetryPolicy CreateInstance()
    content.vb: Public Function CreateInstance As IRetryPolicy
    return:
      type: IRetryPolicy
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Storage.Core
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Core
  fullName: Microsoft.WindowsAzure.Storage.Core
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: IEnumerable{RetryContext}
  definition: IEnumerable`1
  name: IEnumerable<RetryContext>
  fullName: IEnumerable<RetryContext>
  fullname.vb: IEnumerable(Of RetryContext)
  name.vb: IEnumerable(Of RetryContext)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: RetryContext
    name: RetryContext
    fullName: RetryContext
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: RetryContext
    name: RetryContext
    fullName: RetryContext
    isExternal: true
  - name: )
    fullName: )
- uid: IEnumerable{RetryInfo}
  definition: IEnumerable`1
  name: IEnumerable<RetryInfo>
  fullName: IEnumerable<RetryInfo>
  fullname.vb: IEnumerable(Of RetryInfo)
  name.vb: IEnumerable(Of RetryInfo)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - uid: RetryInfo
    name: RetryInfo
    fullName: RetryInfo
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: RetryInfo
    name: RetryInfo
    fullName: RetryInfo
    isExternal: true
  - name: )
    fullName: )
- uid: IEnumerable`1
  isExternal: true
  name: IEnumerable<>
  fullName: IEnumerable<>
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
- uid: System.Int32
  isExternal: true
  name: Int32
  fullName: System.Int32
- uid: Exception
  isExternal: true
  name: Exception
  fullName: Exception
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  fullName: TimeSpan
- uid: OperationContext
  isExternal: true
  name: OperationContext
  fullName: OperationContext
- uid: System.Boolean
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: RetryContext
  isExternal: true
  name: RetryContext
  fullName: RetryContext
- uid: RetryInfo
  isExternal: true
  name: RetryInfo
  fullName: RetryInfo
- uid: IRetryPolicy
  isExternal: true
  name: IRetryPolicy
  fullName: IRetryPolicy
