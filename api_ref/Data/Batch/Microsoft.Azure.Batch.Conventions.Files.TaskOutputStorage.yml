### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  id: TaskOutputStorage
  parent: Microsoft.Azure.Batch.Conventions.Files
  children:
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(System.String)
  langs:
  - csharp
  - vb
  name: TaskOutputStorage
  nameWithType: TaskOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  type: Class
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskOutputStorage
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRepresents persistent storage for the outputs of an Azure Batch task.\n"
  remarks: "\nTask outputs refer to output data logically associated with a specific task, rather than\nthe job as a whole. For example, in a movie rendering job, if a task rendered a single frame,\nthat frame would be a task output.  Logs and other diagnostic information such as intermediate\nfiles may also be persisted as task outputs (see <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> for a way to\ncategorise these so that clients can distinguish between the main output and auxiliary data).\n"
  example: []
  syntax:
    content: public class TaskOutputStorage
    content.vb: Public Class TaskOutputStorage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String)
  id: '#ctor(System.Uri,System.String)'
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: TaskOutputStorage(Uri, String)
  nameWithType: TaskOutputStorage.TaskOutputStorage(Uri, String)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.TaskOutputStorage(System.Uri, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 52
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a task id and\na URL representing the job output container.\n"
  remarks: >-
    The container must already exist; the TaskOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public TaskOutputStorage(Uri jobOutputContainerUri, string taskId)
    content.vb: Public Sub New(jobOutputContainerUri As Uri, taskId As String)
    parameters:
    - id: jobOutputContainerUri
      type: System.Uri
      description: >-
        The URL in Azure storage of the blob container to

        use for outputs associated with this job. This URL must contain a SAS (Shared Access

        Signature) granting access to the container, or the container must be public.
    - id: taskId
      type: System.String
      description: The id of the Azure Batch task.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String)
  id: '#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String)'
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: TaskOutputStorage(CloudStorageAccount, String, String)
  nameWithType: TaskOutputStorage.TaskOutputStorage(CloudStorageAccount, String, String)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.TaskOutputStorage(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 66
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a storage account,\njob id, and task id.\n"
  remarks: >-
    The job output container must already exist; the TaskOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public TaskOutputStorage(CloudStorageAccount storageAccount, string jobId, string taskId)
    content.vb: Public Sub New(storageAccount As CloudStorageAccount, jobId As String, taskId As String)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account linked to the Azure Batch account.
    - id: jobId
      type: System.String
      description: The id of the Azure Batch job containing the task.
    - id: taskId
      type: System.String
      description: The id of the Azure Batch task.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(System.Uri,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  id: '#ctor(System.Uri,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)'
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: TaskOutputStorage(Uri, String, IRetryPolicy)
  nameWithType: TaskOutputStorage.TaskOutputStorage(Uri, String, IRetryPolicy)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.TaskOutputStorage(System.Uri, System.String, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 82
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a task id and\na URL representing the job output container.\n"
  remarks: >-
    The container must already exist; the TaskOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public TaskOutputStorage(Uri jobOutputContainerUri, string taskId, IRetryPolicy storageRetryPolicy)
    content.vb: Public Sub New(jobOutputContainerUri As Uri, taskId As String, storageRetryPolicy As IRetryPolicy)
    parameters:
    - id: jobOutputContainerUri
      type: System.Uri
      description: >-
        The URL in Azure storage of the blob container to

        use for outputs associated with this job. This URL must contain a SAS (Shared Access

        Signature) granting access to the container, or the container must be public.
    - id: taskId
      type: System.String
      description: The id of the Azure Batch task.
    - id: storageRetryPolicy
      type: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
      description: The retry policy for storage requests.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  id: '#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)'
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: TaskOutputStorage(CloudStorageAccount, String, String, IRetryPolicy)
  nameWithType: TaskOutputStorage.TaskOutputStorage(CloudStorageAccount, String, String, IRetryPolicy)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.TaskOutputStorage(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, System.String, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 97
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a storage account,\njob id, and task id.\n"
  remarks: >-
    The job output container must already exist; the TaskOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public TaskOutputStorage(CloudStorageAccount storageAccount, string jobId, string taskId, IRetryPolicy storageRetryPolicy)
    content.vb: Public Sub New(storageAccount As CloudStorageAccount, jobId As String, taskId As String, storageRetryPolicy As IRetryPolicy)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account linked to the Azure Batch account.
    - id: jobId
      type: System.String
      description: The id of the Azure Batch job containing the task.
    - id: taskId
      type: System.String
      description: The id of the Azure Batch task.
    - id: storageRetryPolicy
      type: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
      description: The retry policy for storage requests.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  id: SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: SaveAsync(TaskOutputKind, String, CancellationToken)
  nameWithType: TaskOutputStorage.SaveAsync(TaskOutputKind, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 134
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage.\n"
  remarks: >-
    If the file is outside the current directory, traversals up the directory tree are removed.

    For example, a <em>relativePath</em> of "..\ProcessEnv.cmd" would be treated as "ProcessEnv.cmd"

    for the purposes of creating a blob name.
  example: []
  syntax:
    content: public Task SaveAsync(TaskOutputKind kind, string relativePath, CancellationToken cancellationToken = null)
    content.vb: Public Function SaveAsync(kind As TaskOutputKind, relativePath As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this file, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    - id: relativePath
      type: System.String
      description: >-
        The path of the file to save, relative to the current directory.

        If the file is in a subdirectory of the current directory, the relative path will be preserved

        in blob storage.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em> or <em>relativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>relativePath</em> argument is an absolute path, or is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  id: SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: SaveAsync(TaskOutputKind, String, String, CancellationToken)
  nameWithType: TaskOutputStorage.SaveAsync(TaskOutputKind, String, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 161
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage.\n"
  example: []
  syntax:
    content: public Task SaveAsync(TaskOutputKind kind, string sourcePath, string destinationRelativePath, CancellationToken cancellationToken = null)
    content.vb: Public Function SaveAsync(kind As TaskOutputKind, sourcePath As String, destinationRelativePath As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this file, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    - id: sourcePath
      type: System.String
      description: The path of the file to save.
    - id: destinationRelativePath
      type: System.String
      description: >-
        The blob name under which to save the file. This may include a

        relative component, such as "pointclouds/pointcloud_0001.txt".
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em>, <em>sourcePath</em>, or <em>destinationRelativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>sourcePath</em> or <em>destinationRelativePath</em> argument is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  id: SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: SaveTextAsync(TaskOutputKind, String, String, CancellationToken)
  nameWithType: TaskOutputStorage.SaveTextAsync(TaskOutputKind, String, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveTextAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 181
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified text to persistent storage, without requiring you to create a local file.\n"
  example: []
  syntax:
    content: public Task SaveTextAsync(TaskOutputKind kind, string text, string destinationRelativePath, CancellationToken cancellationToken = null)
    content.vb: Public Function SaveTextAsync(kind As TaskOutputKind, text As String, destinationRelativePath As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this data, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    - id: text
      type: System.String
      description: The text to save.
    - id: destinationRelativePath
      type: System.String
      description: >-
        The blob name under which to save the text. This may include a

        relative component, such as "records/widget42.json".
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em>, <em>text</em>, or <em>destinationRelativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>destinationRelativePath</em> argument is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  id: ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: ListOutputs(TaskOutputKind)
  nameWithType: TaskOutputStorage.ListOutputs(TaskOutputKind)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ListOutputs
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 196
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nLists the task outputs of the specified kind.\n"
  remarks: The list is retrieved lazily from Azure blob storage when it is enumerated.
  example: []
  syntax:
    content: public IEnumerable<OutputFileReference> ListOutputs(TaskOutputKind kind)
    content.vb: Public Function ListOutputs(kind As TaskOutputKind) As IEnumerable(Of OutputFileReference)
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category of outputs to

        list, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
      description: A list of persisted task outputs of the specified kind.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  id: GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: GetOutputAsync(TaskOutputKind, String, CancellationToken)
  nameWithType: TaskOutputStorage.GetOutputAsync(TaskOutputKind, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetOutputAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 207
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRetrieves a task output from Azure blob storage by kind and path.\n"
  example: []
  syntax:
    content: public Task<OutputFileReference> GetOutputAsync(TaskOutputKind kind, string filePath, CancellationToken cancellationToken = null)
    content.vb: Public Function GetOutputAsync(kind As TaskOutputKind, filePath As String, cancellationToken As CancellationToken = Nothing) As Task(Of OutputFileReference)
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category of the output to

        retrieve, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    - id: filePath
      type: System.String
      description: The path under which the output was persisted in blob storage.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
      description: A reference to the requested file in Azure blob storage.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(System.String)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(System.String)
  id: SaveTrackedAsync(System.String)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: SaveTrackedAsync(String)
  nameWithType: TaskOutputStorage.SaveTrackedAsync(String)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(System.String)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveTrackedAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 237
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage as a <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog\" data-throw-if-not-resolved=\"false\"></xref>,\nand tracks subsequent appends to the file and appends them to the persistent copy too.\n"
  remarks: "\n<p>Tracking supports only appends. That is, while a file is being tracked, any data added\nat the end is appended to the persistent storage. Changes to data that has already been uploaded\nwill not be reflected to the persistent store. This method is therefore intended for use only\nwith files such as (non-rotating) log files where data is only added at the end of the file.\nIf the entire contents of a file can change, use <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind%2cSystem.String%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>\nand call it periodically or after each change.</p>\n<p>If the file is outside the current directory, traversals up the directory tree are removed.\nFor example, a <em>relativePath</em> of \"..\\ProcessEnv.cmd\" would be treated as \"ProcessEnv.cmd\"\nfor the purposes of creating a blob name.</p>\n"
  example: []
  syntax:
    content: public Task<ITrackedSaveOperation> SaveTrackedAsync(string relativePath)
    content.vb: Public Function SaveTrackedAsync(relativePath As String) As Task(Of ITrackedSaveOperation)
    parameters:
    - id: relativePath
      type: System.String
      description: >-
        The path of the file to save, relative to the current directory.

        If the file is in a subdirectory of the current directory, the relative path will be preserved

        in blob storage.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation}
      description: >-
        An <xref href="Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation" data-throw-if-not-resolved="false"></xref> which will save a file to blob storage and will periodically flush file

        appends to the blob until disposed.  When disposed, all remaining appends are flushed to

        blob storage, and further tracking of file appends is stopped.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>relativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>relativePath</em> argument is an absolute path, or is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  id: SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage
  langs:
  - csharp
  - vb
  name: SaveTrackedAsync(TaskOutputKind, String, String, TimeSpan)
  nameWithType: TaskOutputStorage.SaveTrackedAsync(TaskOutputKind, String, String, TimeSpan)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, System.String, System.String, System.TimeSpan)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveTrackedAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputStorage.cs
    startLine: 263
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage, and tracks subsequent appends to the file\nand appends them to the persistent copy too.\n"
  remarks: "\n<p>Tracking supports only appends. That is, while a file is being tracked, any data added\nat the end is appended to the persistent storage. Changes to data that has already been uploaded\nwill not be reflected to the persistent store. This method is therefore intended for use only\nwith files such as (non-rotating) log files where data is only added at the end of the file.\nIf the entire contents of a file can change, use <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind%2cSystem.String%2cSystem.String%2cSystem.Threading.CancellationToken)\" data-throw-if-not-resolved=\"false\"></xref>\nand call it periodically or after each change.</p>\n"
  example: []
  syntax:
    content: public Task<ITrackedSaveOperation> SaveTrackedAsync(TaskOutputKind kind, string sourcePath, string destinationRelativePath, TimeSpan flushInterval)
    content.vb: Public Function SaveTrackedAsync(kind As TaskOutputKind, sourcePath As String, destinationRelativePath As String, flushInterval As TimeSpan) As Task(Of ITrackedSaveOperation)
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this file, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog" data-throw-if-not-resolved="false"></xref>.
    - id: sourcePath
      type: System.String
      description: The path of the file to save.
    - id: destinationRelativePath
      type: System.String
      description: >-
        The blob name under which to save the file. This may include a

        relative component, such as "pointclouds/pointcloud_0001.txt".
    - id: flushInterval
      type: System.TimeSpan
      description: The interval at which to flush appends to persistent storage.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation}
      description: >-
        An <xref href="Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation" data-throw-if-not-resolved="false"></xref> which will save a file to blob storage and will periodically flush file

        appends to the blob until disposed.  When disposed, all remaining appends are flushed to

        blob storage, and further tracking of file appends is stopped.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em>, <em>sourcePath</em>, or <em>destinationRelativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>sourcePath</em> or <em>destinationRelativePath</em> argument is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  parent: Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: TaskOutputKind
  nameWithType: TaskOutputKind
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
- uid: Microsoft.Azure.Batch.Conventions.Files
  commentId: N:Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: Microsoft.Azure.Batch.Conventions.Files
  nameWithType: Microsoft.Azure.Batch.Conventions.Files
  fullName: Microsoft.Azure.Batch.Conventions.Files
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  parent: Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: JobOutputStorage
  nameWithType: JobOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.#ctor
  isExternal: false
  name: TaskOutputStorage
  nameWithType: TaskOutputStorage.TaskOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.TaskOutputStorage
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
  commentId: T:Microsoft.WindowsAzure.Storage.CloudStorageAccount
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: CloudStorageAccount
  nameWithType: CloudStorageAccount
  fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
  parent: Microsoft.WindowsAzure.Storage.RetryPolicies
  isExternal: true
  name: IRetryPolicy
  nameWithType: IRetryPolicy
  fullName: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
- uid: Microsoft.WindowsAzure.Storage.RetryPolicies
  commentId: N:Microsoft.WindowsAzure.Storage.RetryPolicies
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.RetryPolicies
  nameWithType: Microsoft.WindowsAzure.Storage.RetryPolicies
  fullName: Microsoft.WindowsAzure.Storage.RetryPolicies
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync
  isExternal: false
  name: SaveAsync
  nameWithType: TaskOutputStorage.SaveAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync
  isExternal: false
  name: SaveTextAsync
  nameWithType: TaskOutputStorage.SaveTextAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTextAsync
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs
  isExternal: false
  name: ListOutputs
  nameWithType: TaskOutputStorage.ListOutputs
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.ListOutputs
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OutputFileReference>
  nameWithType: IEnumerable<OutputFileReference>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Conventions.Files.OutputFileReference>
  nameWithType.vb: IEnumerable(Of OutputFileReference)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Conventions.Files.OutputFileReference)
  name.vb: IEnumerable(Of OutputFileReference)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync
  isExternal: false
  name: GetOutputAsync
  nameWithType: TaskOutputStorage.GetOutputAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.GetOutputAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OutputFileReference>
  nameWithType: Task<OutputFileReference>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.Conventions.Files.OutputFileReference>
  nameWithType.vb: Task(Of OutputFileReference)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.Conventions.Files.OutputFileReference)
  name.vb: Task(Of OutputFileReference)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  isExternal: false
  name: ITrackedSaveOperation
  nameWithType: ITrackedSaveOperation
  fullName: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync
  isExternal: false
  name: SaveTrackedAsync
  nameWithType: TaskOutputStorage.SaveTrackedAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<ITrackedSaveOperation>
  nameWithType: Task<ITrackedSaveOperation>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation>
  nameWithType.vb: Task(Of ITrackedSaveOperation)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation)
  name.vb: Task(Of ITrackedSaveOperation)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
    name: ITrackedSaveOperation
    nameWithType: ITrackedSaveOperation
    fullName: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
    name: ITrackedSaveOperation
    nameWithType: ITrackedSaveOperation
    fullName: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.Threading.CancellationToken)
- uid: System.TimeSpan
  commentId: T:System.TimeSpan
  parent: System
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: System.TimeSpan
