### YamlMime:ManagedReference
items:
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  commentId: T:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  id: TestUtilities
  parent: BatchClientIntegrationTests.IntegrationTestUtilities
  children:
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception,System.String,ITestOutputHelper)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows``1(Action)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync``1(Func{Task})
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync``1(Func{Task},TimeSpan)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String,System.String)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor(Microsoft.Azure.Batch.CertificateOperations,ITestOutputHelper,System.String,System.String)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong(ITestOutputHelper,Microsoft.Azure.Batch.CloudJobSchedule)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools(ITestOutputHelper,IEnumerable{Microsoft.Azure.Batch.CloudPool})
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient(Microsoft.Azure.Batch.BatchClient)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld(Microsoft.Azure.Batch.BatchClient,ITestOutputHelper,Microsoft.Azure.Batch.CloudPool,System.String@,System.String@,System.Boolean,System.Boolean)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync(Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials,System.Boolean)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable,Func{Task{System.Boolean}},TimeSpan)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations,System.String,System.String,System.Nullable{TimeSpan})
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync(Microsoft.Azure.Batch.CloudJob,TimeSpan,Microsoft.Azure.Batch.Common.JobState)
  - BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync(Microsoft.Azure.Batch.BatchClient,System.String,Microsoft.Azure.Batch.Common.AllocationState,TimeSpan)
  langs:
  - csharp
  - vb
  name: TestUtilities
  nameWithType: TestUtilities
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  type: Class
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TestUtilities
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 38
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: 'public static class TestUtilities : object'
    content.vb: >-
      Public Module TestUtilities
          Inherits Object
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment
  id: GetCredentialsFromEnvironment
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: GetCredentialsFromEnvironment()
  nameWithType: TestUtilities.GetCredentialsFromEnvironment()
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetCredentialsFromEnvironment
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 42
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static BatchSharedKeyCredentials GetCredentialsFromEnvironment()
    content.vb: Public Shared Function GetCredentialsFromEnvironment As BatchSharedKeyCredentials
    return:
      type: Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync(Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials,System.Boolean)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync(Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials,System.Boolean)
  id: OpenBatchClientAsync(Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials,System.Boolean)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: OpenBatchClientAsync(BatchSharedKeyCredentials, Boolean)
  nameWithType: TestUtilities.OpenBatchClientAsync(BatchSharedKeyCredentials, Boolean)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync(Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: OpenBatchClientAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 50
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task<BatchClient> OpenBatchClientAsync(BatchSharedKeyCredentials sharedKeyCredentials, bool addDefaultRetryPolicy = true)
    content.vb: Public Shared Function OpenBatchClientAsync(sharedKeyCredentials As BatchSharedKeyCredentials, addDefaultRetryPolicy As Boolean = True) As Task(Of BatchClient)
    parameters:
    - id: sharedKeyCredentials
      type: Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials
    - id: addDefaultRetryPolicy
      type: System.Boolean
    return:
      type: Task{Microsoft.Azure.Batch.BatchClient}
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync
  id: OpenBatchClientFromEnvironmentAsync
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: OpenBatchClientFromEnvironmentAsync()
  nameWithType: TestUtilities.OpenBatchClientFromEnvironmentAsync()
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: OpenBatchClientFromEnvironmentAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 70
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task<BatchClient> OpenBatchClientFromEnvironmentAsync()
    content.vb: Public Shared Function OpenBatchClientFromEnvironmentAsync As Task(Of BatchClient)
    return:
      type: Task{Microsoft.Azure.Batch.BatchClient}
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment
  id: GetStorageCredentialsFromEnvironment
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: GetStorageCredentialsFromEnvironment()
  nameWithType: TestUtilities.GetStorageCredentialsFromEnvironment()
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetStorageCredentialsFromEnvironment
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 77
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static StagingStorageAccount GetStorageCredentialsFromEnvironment()
    content.vb: Public Shared Function GetStorageCredentialsFromEnvironment As StagingStorageAccount
    return:
      type: Microsoft.Azure.Batch.FileStaging.StagingStorageAccount
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows``1(Action)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows``1(Action)
  id: AssertThrows``1(Action)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: AssertThrows<T>(Action)
  nameWithType: TestUtilities.AssertThrows<T>(Action)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows<T>(Action)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AssertThrows
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 92
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: 'public static T AssertThrows<T>(Action codeUnderTest)where T : Exception'
    content.vb: Public Shared Function AssertThrows(Of T As Exception)(codeUnderTest As Action) As T
    parameters:
    - id: codeUnderTest
      type: Action
    typeParameters:
    - id: T
    return:
      type: '{T}'
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows*
  nameWithType.vb: TestUtilities.AssertThrows(Of T)(Action)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows(Of T)(Action)
  name.vb: AssertThrows(Of T)(Action)
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync``1(Func{Task})
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync``1(Func{Task})
  id: AssertThrowsAsync``1(Func{Task})
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: AssertThrowsAsync<T>(Func<Task>)
  nameWithType: TestUtilities.AssertThrowsAsync<T>(Func<Task>)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync<T>(Func<Task>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AssertThrowsAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 104
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: 'public static Task<T> AssertThrowsAsync<T>(Func<Task> codeUnderTest)where T : Exception'
    content.vb: Public Shared Function AssertThrowsAsync(Of T As Exception)(codeUnderTest As Func(Of Task)) As Task(Of T)
    parameters:
    - id: codeUnderTest
      type: Func{Task}
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync*
  nameWithType.vb: TestUtilities.AssertThrowsAsync(Of T)(Func(Of Task))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync(Of T)(Func(Of Task))
  name.vb: AssertThrowsAsync(Of T)(Func(Of Task))
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync``1(Func{Task},TimeSpan)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync``1(Func{Task},TimeSpan)
  id: AssertThrowsEventuallyAsync``1(Func{Task},TimeSpan)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: AssertThrowsEventuallyAsync<T>(Func<Task>, TimeSpan)
  nameWithType: TestUtilities.AssertThrowsEventuallyAsync<T>(Func<Task>, TimeSpan)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync<T>(Func<Task>, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AssertThrowsEventuallyAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 114
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: 'public static Task<T> AssertThrowsEventuallyAsync<T>(Func<Task> codeUnderTest, TimeSpan timeout)where T : Exception'
    content.vb: Public Shared Function AssertThrowsEventuallyAsync(Of T As Exception)(codeUnderTest As Func(Of Task), timeout As TimeSpan) As Task(Of T)
    parameters:
    - id: codeUnderTest
      type: Func{Task}
    - id: timeout
      type: TimeSpan
    typeParameters:
    - id: T
    return:
      type: Task{{T}}
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync*
  nameWithType.vb: TestUtilities.AssertThrowsEventuallyAsync(Of T)(Func(Of Task), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync(Of T)(Func(Of Task), TimeSpan)
  name.vb: AssertThrowsEventuallyAsync(Of T)(Func(Of Task), TimeSpan)
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception,System.String,ITestOutputHelper)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception,System.String,ITestOutputHelper)
  id: AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception,System.String,ITestOutputHelper)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception, String, ITestOutputHelper)
  nameWithType: TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception, String, ITestOutputHelper)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception, System.String, ITestOutputHelper)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: AssertIsBatchExceptionAndHasCorrectAzureErrorCode
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 165
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  summary: "\nWorks with AggregateException or \"Exception\" just pass it in :)\n"
  example: []
  syntax:
    content: public static void AssertIsBatchExceptionAndHasCorrectAzureErrorCode(Exception ex, string correctCode, ITestOutputHelper outputHelper)
    content.vb: Public Shared Sub AssertIsBatchExceptionAndHasCorrectAzureErrorCode(ex As Exception, correctCode As String, outputHelper As ITestOutputHelper)
    parameters:
    - id: ex
      type: Exception
      description: ''
    - id: correctCode
      type: System.String
      description: ''
    - id: outputHelper
      type: ITestOutputHelper
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName
  id: GetMyName
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: GetMyName()
  nameWithType: TestUtilities.GetMyName()
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetMyName
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 199
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static string GetMyName()
    content.vb: Public Shared Function GetMyName As String
    return:
      type: System.String
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp
  id: GetTimeStamp
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: GetTimeStamp()
  nameWithType: TestUtilities.GetTimeStamp()
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetTimeStamp
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 206
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static string GetTimeStamp()
    content.vb: Public Shared Function GetTimeStamp As String
    return:
      type: System.String
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  id: DeleteJobIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DeleteJobIfExistsAsync(BatchClient, String)
  nameWithType: TestUtilities.DeleteJobIfExistsAsync(BatchClient, String)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync(Microsoft.Azure.Batch.BatchClient, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeleteJobIfExistsAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 215
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task DeleteJobIfExistsAsync(BatchClient client, string jobId)
    content.vb: Public Shared Function DeleteJobIfExistsAsync(client As BatchClient, jobId As String) As Task
    parameters:
    - id: client
      type: Microsoft.Azure.Batch.BatchClient
    - id: jobId
      type: System.String
    return:
      type: Task
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  id: DeleteJobScheduleIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DeleteJobScheduleIfExistsAsync(BatchClient, String)
  nameWithType: TestUtilities.DeleteJobScheduleIfExistsAsync(BatchClient, String)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync(Microsoft.Azure.Batch.BatchClient, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeleteJobScheduleIfExistsAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 230
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task DeleteJobScheduleIfExistsAsync(BatchClient client, string jobScheduleId)
    content.vb: Public Shared Function DeleteJobScheduleIfExistsAsync(client As BatchClient, jobScheduleId As String) As Task
    parameters:
    - id: client
      type: Microsoft.Azure.Batch.BatchClient
    - id: jobScheduleId
      type: System.String
    return:
      type: Task
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  id: DeletePoolIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DeletePoolIfExistsAsync(BatchClient, String)
  nameWithType: TestUtilities.DeletePoolIfExistsAsync(BatchClient, String)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync(Microsoft.Azure.Batch.BatchClient, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeletePoolIfExistsAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 245
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task DeletePoolIfExistsAsync(BatchClient client, string poolId)
    content.vb: Public Shared Function DeletePoolIfExistsAsync(client As BatchClient, poolId As String) As Task
    parameters:
    - id: client
      type: Microsoft.Azure.Batch.BatchClient
    - id: poolId
      type: System.String
    return:
      type: Task
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String,System.String)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String,System.String)
  id: DeleteCertificateIfExistsAsync(Microsoft.Azure.Batch.BatchClient,System.String,System.String)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DeleteCertificateIfExistsAsync(BatchClient, String, String)
  nameWithType: TestUtilities.DeleteCertificateIfExistsAsync(BatchClient, String, String)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync(Microsoft.Azure.Batch.BatchClient, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeleteCertificateIfExistsAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 260
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task DeleteCertificateIfExistsAsync(BatchClient client, string thumbprintAlgorithm, string thumbprint)
    content.vb: Public Shared Function DeleteCertificateIfExistsAsync(client As BatchClient, thumbprintAlgorithm As String, thumbprint As String) As Task
    parameters:
    - id: client
      type: Microsoft.Azure.Batch.BatchClient
    - id: thumbprintAlgorithm
      type: System.String
    - id: thumbprint
      type: System.String
    return:
      type: Task
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools(ITestOutputHelper,IEnumerable{Microsoft.Azure.Batch.CloudPool})
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools(ITestOutputHelper,IEnumerable{Microsoft.Azure.Batch.CloudPool})
  id: DisplayPools(ITestOutputHelper,IEnumerable{Microsoft.Azure.Batch.CloudPool})
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DisplayPools(ITestOutputHelper, IEnumerable<CloudPool>)
  nameWithType: TestUtilities.DisplayPools(ITestOutputHelper, IEnumerable<CloudPool>)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools(ITestOutputHelper, IEnumerable<Microsoft.Azure.Batch.CloudPool>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DisplayPools
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 279
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static void DisplayPools(ITestOutputHelper testOutputHelper, IEnumerable<CloudPool> poolsEnumerable)
    content.vb: Public Shared Sub DisplayPools(testOutputHelper As ITestOutputHelper, poolsEnumerable As IEnumerable(Of CloudPool))
    parameters:
    - id: testOutputHelper
      type: ITestOutputHelper
    - id: poolsEnumerable
      type: IEnumerable{Microsoft.Azure.Batch.CloudPool}
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools*
  nameWithType.vb: TestUtilities.DisplayPools(ITestOutputHelper, IEnumerable(Of CloudPool))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools(ITestOutputHelper, IEnumerable(Of Microsoft.Azure.Batch.CloudPool))
  name.vb: DisplayPools(ITestOutputHelper, IEnumerable(Of CloudPool))
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong(ITestOutputHelper,Microsoft.Azure.Batch.CloudJobSchedule)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong(ITestOutputHelper,Microsoft.Azure.Batch.CloudJobSchedule)
  id: DisplayJobScheduleLong(ITestOutputHelper,Microsoft.Azure.Batch.CloudJobSchedule)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DisplayJobScheduleLong(ITestOutputHelper, CloudJobSchedule)
  nameWithType: TestUtilities.DisplayJobScheduleLong(ITestOutputHelper, CloudJobSchedule)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong(ITestOutputHelper, Microsoft.Azure.Batch.CloudJobSchedule)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DisplayJobScheduleLong
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 319
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static void DisplayJobScheduleLong(ITestOutputHelper testOutputHelper, CloudJobSchedule curWI)
    content.vb: Public Shared Sub DisplayJobScheduleLong(testOutputHelper As ITestOutputHelper, curWI As CloudJobSchedule)
    parameters:
    - id: testOutputHelper
      type: ITestOutputHelper
    - id: curWI
      type: Microsoft.Azure.Batch.CloudJobSchedule
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync(Microsoft.Azure.Batch.BatchClient,System.String,Microsoft.Azure.Batch.Common.AllocationState,TimeSpan)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync(Microsoft.Azure.Batch.BatchClient,System.String,Microsoft.Azure.Batch.Common.AllocationState,TimeSpan)
  id: WaitForPoolToReachStateAsync(Microsoft.Azure.Batch.BatchClient,System.String,Microsoft.Azure.Batch.Common.AllocationState,TimeSpan)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: WaitForPoolToReachStateAsync(BatchClient, String, AllocationState, TimeSpan)
  nameWithType: TestUtilities.WaitForPoolToReachStateAsync(BatchClient, String, AllocationState, TimeSpan)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync(Microsoft.Azure.Batch.BatchClient, System.String, Microsoft.Azure.Batch.Common.AllocationState, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: WaitForPoolToReachStateAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 501
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static Task WaitForPoolToReachStateAsync(BatchClient client, string poolId, AllocationState targetAllocationState, TimeSpan timeout)
    content.vb: Public Shared Function WaitForPoolToReachStateAsync(client As BatchClient, poolId As String, targetAllocationState As AllocationState, timeout As TimeSpan) As Task
    parameters:
    - id: client
      type: Microsoft.Azure.Batch.BatchClient
    - id: poolId
      type: System.String
    - id: targetAllocationState
      type: Microsoft.Azure.Batch.Common.AllocationState
    - id: timeout
      type: TimeSpan
    return:
      type: Task
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync(Microsoft.Azure.Batch.CloudJob,TimeSpan,Microsoft.Azure.Batch.Common.JobState)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync(Microsoft.Azure.Batch.CloudJob,TimeSpan,Microsoft.Azure.Batch.Common.JobState)
  id: WaitForJobStateAsync(Microsoft.Azure.Batch.CloudJob,TimeSpan,Microsoft.Azure.Batch.Common.JobState)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: WaitForJobStateAsync(CloudJob, TimeSpan, JobState)
  nameWithType: TestUtilities.WaitForJobStateAsync(CloudJob, TimeSpan, JobState)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync(Microsoft.Azure.Batch.CloudJob, TimeSpan, Microsoft.Azure.Batch.Common.JobState)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: WaitForJobStateAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 518
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  summary: "\nWaits for the job to enter a its expected state within the given time.\n"
  example: []
  syntax:
    content: public static Task WaitForJobStateAsync(CloudJob cloudJob, TimeSpan waitFor, JobState expected)
    content.vb: Public Shared Function WaitForJobStateAsync(cloudJob As CloudJob, waitFor As TimeSpan, expected As JobState) As Task
    parameters:
    - id: cloudJob
      type: Microsoft.Azure.Batch.CloudJob
      description: The job whose state to monitor.
    - id: waitFor
      type: TimeSpan
      description: How long to wait for the job to reach the target state.
    - id: expected
      type: Microsoft.Azure.Batch.Common.JobState
      description: The target job state to wait for.
    return:
      type: Task
      description: ''
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable,Func{Task{System.Boolean}},TimeSpan)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable,Func{Task{System.Boolean}},TimeSpan)
  id: RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable,Func{Task{System.Boolean}},TimeSpan)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: RefreshBasedPollingWithTimeoutAsync(IRefreshable, Func<Task<Boolean>>, TimeSpan)
  nameWithType: TestUtilities.RefreshBasedPollingWithTimeoutAsync(IRefreshable, Func<Task<Boolean>>, TimeSpan)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable, Func<Task<System.Boolean>>, TimeSpan)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: RefreshBasedPollingWithTimeoutAsync
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 542
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  summary: "\nWill throw if timeout is exceeded.\n"
  example: []
  syntax:
    content: public static Task RefreshBasedPollingWithTimeoutAsync(IRefreshable refreshing, Func<Task<bool>> condition, TimeSpan timeout)
    content.vb: Public Shared Function RefreshBasedPollingWithTimeoutAsync(refreshing As IRefreshable, condition As Func(Of Task(Of Boolean)), timeout As TimeSpan) As Task
    parameters:
    - id: refreshing
      type: Microsoft.Azure.Batch.IRefreshable
      description: ''
    - id: condition
      type: Func{Task{System.Boolean}}
      description: ''
    - id: timeout
      type: TimeSpan
      description: ''
    return:
      type: Task
      description: ''
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync*
  nameWithType.vb: TestUtilities.RefreshBasedPollingWithTimeoutAsync(IRefreshable, Func(Of Task(Of Boolean)), TimeSpan)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync(Microsoft.Azure.Batch.IRefreshable, Func(Of Task(Of System.Boolean)), TimeSpan)
  name.vb: RefreshBasedPollingWithTimeoutAsync(IRefreshable, Func(Of Task(Of Boolean)), TimeSpan)
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor(Microsoft.Azure.Batch.CertificateOperations,ITestOutputHelper,System.String,System.String)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor(Microsoft.Azure.Batch.CertificateOperations,ITestOutputHelper,System.String,System.String)
  id: DeleteCertMonitor(Microsoft.Azure.Batch.CertificateOperations,ITestOutputHelper,System.String,System.String)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: DeleteCertMonitor(CertificateOperations, ITestOutputHelper, String, String)
  nameWithType: TestUtilities.DeleteCertMonitor(CertificateOperations, ITestOutputHelper, String, String)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor(Microsoft.Azure.Batch.CertificateOperations, ITestOutputHelper, System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeleteCertMonitor
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 559
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static void DeleteCertMonitor(CertificateOperations certOps, ITestOutputHelper testOutputHelper, string thumbAlgo, string thumb)
    content.vb: Public Shared Sub DeleteCertMonitor(certOps As CertificateOperations, testOutputHelper As ITestOutputHelper, thumbAlgo As String, thumb As String)
    parameters:
    - id: certOps
      type: Microsoft.Azure.Batch.CertificateOperations
    - id: testOutputHelper
      type: ITestOutputHelper
    - id: thumbAlgo
      type: System.String
    - id: thumb
      type: System.String
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld(Microsoft.Azure.Batch.BatchClient,ITestOutputHelper,Microsoft.Azure.Batch.CloudPool,System.String@,System.String@,System.Boolean,System.Boolean)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld(Microsoft.Azure.Batch.BatchClient,ITestOutputHelper,Microsoft.Azure.Batch.CloudPool,System.String@,System.String@,System.Boolean,System.Boolean)
  id: HelloWorld(Microsoft.Azure.Batch.BatchClient,ITestOutputHelper,Microsoft.Azure.Batch.CloudPool,System.String@,System.String@,System.Boolean,System.Boolean)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: HelloWorld(BatchClient, ITestOutputHelper, CloudPool, out String, out String, Boolean, Boolean)
  nameWithType: TestUtilities.HelloWorld(BatchClient, ITestOutputHelper, CloudPool, out String, out String, Boolean, Boolean)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld(Microsoft.Azure.Batch.BatchClient, ITestOutputHelper, Microsoft.Azure.Batch.CloudPool, out System.String, out System.String, System.Boolean, System.Boolean)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: HelloWorld
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 593
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static void HelloWorld(BatchClient batchCli, ITestOutputHelper testOutputHelper, CloudPool sharedPool, out string jobId, out string taskId, bool deleteJob = true, bool isLinux = false)
    content.vb: Public Shared Sub HelloWorld(batchCli As BatchClient, testOutputHelper As ITestOutputHelper, sharedPool As CloudPool, ByRef jobId As String, ByRef taskId As String, deleteJob As Boolean = True, isLinux As Boolean = False)
    parameters:
    - id: batchCli
      type: Microsoft.Azure.Batch.BatchClient
    - id: testOutputHelper
      type: ITestOutputHelper
    - id: sharedPool
      type: Microsoft.Azure.Batch.CloudPool
    - id: jobId
      type: System.String
    - id: taskId
      type: System.String
    - id: deleteJob
      type: System.Boolean
    - id: isLinux
      type: System.Boolean
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld*
  nameWithType.vb: TestUtilities.HelloWorld(BatchClient, ITestOutputHelper, CloudPool, ByRef String, ByRef String, Boolean, Boolean)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld(Microsoft.Azure.Batch.BatchClient, ITestOutputHelper, Microsoft.Azure.Batch.CloudPool, ByRef System.String, ByRef System.String, System.Boolean, System.Boolean)
  name.vb: HelloWorld(BatchClient, ITestOutputHelper, CloudPool, ByRef String, ByRef String, Boolean, Boolean)
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations,System.String,System.String,System.Nullable{TimeSpan})
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations,System.String,System.String,System.Nullable{TimeSpan})
  id: WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations,System.String,System.String,System.Nullable{TimeSpan})
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: WaitForJobOnJobSchedule(JobScheduleOperations, String, String, Nullable<TimeSpan>)
  nameWithType: TestUtilities.WaitForJobOnJobSchedule(JobScheduleOperations, String, String, Nullable<TimeSpan>)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations, System.String, System.String, System.Nullable<TimeSpan>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: WaitForJobOnJobSchedule
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 669
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  summary: "\nWaits for a job to be created -- This should be removed when we have a Utilities helper which does this\n"
  example: []
  syntax:
    content: public static CloudJobSchedule WaitForJobOnJobSchedule(JobScheduleOperations jobScheduleOperations, string jobScheduleId, string expectedJobId = null, TimeSpan? timeout = null)
    content.vb: Public Shared Function WaitForJobOnJobSchedule(jobScheduleOperations As JobScheduleOperations, jobScheduleId As String, expectedJobId As String = Nothing, timeout As TimeSpan? = Nothing) As CloudJobSchedule
    parameters:
    - id: jobScheduleOperations
      type: Microsoft.Azure.Batch.JobScheduleOperations
    - id: jobScheduleId
      type: System.String
    - id: expectedJobId
      type: System.String
    - id: timeout
      type: System.Nullable{TimeSpan}
    return:
      type: Microsoft.Azure.Batch.CloudJobSchedule
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule*
  nameWithType.vb: TestUtilities.WaitForJobOnJobSchedule(JobScheduleOperations, String, String, Nullable(Of TimeSpan))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule(Microsoft.Azure.Batch.JobScheduleOperations, System.String, System.String, System.Nullable(Of TimeSpan))
  name.vb: WaitForJobOnJobSchedule(JobScheduleOperations, String, String, Nullable(Of TimeSpan))
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient(Microsoft.Azure.Batch.BatchClient)
  commentId: M:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient(Microsoft.Azure.Batch.BatchClient)
  id: GetServiceClient(Microsoft.Azure.Batch.BatchClient)
  parent: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities
  langs:
  - csharp
  - vb
  name: GetServiceClient(BatchClient)
  nameWithType: TestUtilities.GetServiceClient(BatchClient)
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient(Microsoft.Azure.Batch.BatchClient)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetServiceClient
    path: src/Batch/Client/Tests/ObjectModel/BatchClientIntegrationTests/IntegrationTestUtilities/TestUtilities.cs
    startLine: 690
  assemblies:
  - BatchClientIntegrationTests
  namespace: BatchClientIntegrationTests.IntegrationTestUtilities
  syntax:
    content: public static BatchServiceClient GetServiceClient(BatchClient batchClient)
    content.vb: Public Shared Function GetServiceClient(batchClient As BatchClient) As BatchServiceClient
    parameters:
    - id: batchClient
      type: Microsoft.Azure.Batch.BatchClient
    return:
      type: Microsoft.Azure.Batch.Protocol.BatchServiceClient
  overload: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: BatchClientIntegrationTests.IntegrationTestUtilities
  commentId: N:BatchClientIntegrationTests.IntegrationTestUtilities
  isExternal: false
  name: BatchClientIntegrationTests.IntegrationTestUtilities
  nameWithType: BatchClientIntegrationTests.IntegrationTestUtilities
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment
  isExternal: false
  name: GetCredentialsFromEnvironment
  nameWithType: TestUtilities.GetCredentialsFromEnvironment
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetCredentialsFromEnvironment
- uid: Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials
  commentId: T:Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials
  parent: Microsoft.Azure.Batch.Auth
  isExternal: false
  name: BatchSharedKeyCredentials
  nameWithType: BatchSharedKeyCredentials
  fullName: Microsoft.Azure.Batch.Auth.BatchSharedKeyCredentials
- uid: Microsoft.Azure.Batch.Auth
  commentId: N:Microsoft.Azure.Batch.Auth
  isExternal: false
  name: Microsoft.Azure.Batch.Auth
  nameWithType: Microsoft.Azure.Batch.Auth
  fullName: Microsoft.Azure.Batch.Auth
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync
  isExternal: false
  name: OpenBatchClientAsync
  nameWithType: TestUtilities.OpenBatchClientAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientAsync
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: Task{Microsoft.Azure.Batch.BatchClient}
  commentId: '!:Task{Microsoft.Azure.Batch.BatchClient}'
  definition: Task`1
  name: Task<BatchClient>
  nameWithType: Task<BatchClient>
  fullName: Task<Microsoft.Azure.Batch.BatchClient>
  nameWithType.vb: Task(Of BatchClient)
  fullname.vb: Task(Of Microsoft.Azure.Batch.BatchClient)
  name.vb: Task(Of BatchClient)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.BatchClient
    name: BatchClient
    nameWithType: BatchClient
    fullName: Microsoft.Azure.Batch.BatchClient
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.BatchClient
    name: BatchClient
    nameWithType: BatchClient
    fullName: Microsoft.Azure.Batch.BatchClient
  - name: )
    nameWithType: )
    fullName: )
- uid: Task`1
  isExternal: true
  name: Task<>
  nameWithType: Task<>
  fullName: Task<>
  nameWithType.vb: Task(Of )
  fullname.vb: Task(Of )
  name.vb: Task(Of )
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync
  isExternal: false
  name: OpenBatchClientFromEnvironmentAsync
  nameWithType: TestUtilities.OpenBatchClientFromEnvironmentAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.OpenBatchClientFromEnvironmentAsync
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment
  isExternal: false
  name: GetStorageCredentialsFromEnvironment
  nameWithType: TestUtilities.GetStorageCredentialsFromEnvironment
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetStorageCredentialsFromEnvironment
- uid: Microsoft.Azure.Batch.FileStaging.StagingStorageAccount
  commentId: T:Microsoft.Azure.Batch.FileStaging.StagingStorageAccount
  parent: Microsoft.Azure.Batch.FileStaging
  isExternal: false
  name: StagingStorageAccount
  nameWithType: StagingStorageAccount
  fullName: Microsoft.Azure.Batch.FileStaging.StagingStorageAccount
- uid: Microsoft.Azure.Batch.FileStaging
  commentId: N:Microsoft.Azure.Batch.FileStaging
  isExternal: false
  name: Microsoft.Azure.Batch.FileStaging
  nameWithType: Microsoft.Azure.Batch.FileStaging
  fullName: Microsoft.Azure.Batch.FileStaging
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows
  isExternal: false
  name: AssertThrows<T>
  nameWithType: TestUtilities.AssertThrows<T>
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows<T>
  nameWithType.vb: TestUtilities.AssertThrows(Of T)
  fullname.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrows(Of T)
  name.vb: AssertThrows(Of T)
- uid: Action
  isExternal: true
  name: Action
  nameWithType: Action
  fullName: Action
- uid: '{T}'
  commentId: '!:T'
  definition: T
  name: T
  nameWithType: T
  fullName: T
- uid: T
  isExternal: false
  name: T
  nameWithType: T
  fullName: T
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync
  isExternal: false
  name: AssertThrowsAsync<T>
  nameWithType: TestUtilities.AssertThrowsAsync<T>
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync<T>
  nameWithType.vb: TestUtilities.AssertThrowsAsync(Of T)
  fullname.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsAsync(Of T)
  name.vb: AssertThrowsAsync(Of T)
- uid: Func{Task}
  commentId: '!:Func{Task}'
  definition: Func`1
  name: Func<Task>
  nameWithType: Func<Task>
  fullName: Func<Task>
  nameWithType.vb: Func(Of Task)
  fullname.vb: Func(Of Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: Task{{T}}
  commentId: '!:Task{``0}'
  definition: Task`1
  name: Task<T>
  nameWithType: Task<T>
  fullName: Task<T>
  nameWithType.vb: Task(Of T)
  fullname.vb: Task(Of T)
  name.vb: Task(Of T)
  spec.csharp:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  nameWithType: Func<>
  fullName: Func<>
  nameWithType.vb: Func(Of )
  fullname.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync
  isExternal: false
  name: AssertThrowsEventuallyAsync<T>
  nameWithType: TestUtilities.AssertThrowsEventuallyAsync<T>
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync<T>
  nameWithType.vb: TestUtilities.AssertThrowsEventuallyAsync(Of T)
  fullname.vb: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertThrowsEventuallyAsync(Of T)
  name.vb: AssertThrowsEventuallyAsync(Of T)
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  nameWithType: TimeSpan
  fullName: TimeSpan
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode
  isExternal: false
  name: AssertIsBatchExceptionAndHasCorrectAzureErrorCode
  nameWithType: TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.AssertIsBatchExceptionAndHasCorrectAzureErrorCode
- uid: Exception
  commentId: '!:Exception'
  isExternal: true
  name: Exception
  nameWithType: Exception
  fullName: Exception
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ITestOutputHelper
  isExternal: true
  name: ITestOutputHelper
  nameWithType: ITestOutputHelper
  fullName: ITestOutputHelper
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName
  isExternal: false
  name: GetMyName
  nameWithType: TestUtilities.GetMyName
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetMyName
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp
  isExternal: false
  name: GetTimeStamp
  nameWithType: TestUtilities.GetTimeStamp
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetTimeStamp
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync
  isExternal: false
  name: DeleteJobIfExistsAsync
  nameWithType: TestUtilities.DeleteJobIfExistsAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobIfExistsAsync
- uid: Microsoft.Azure.Batch.BatchClient
  commentId: T:Microsoft.Azure.Batch.BatchClient
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: BatchClient
  nameWithType: BatchClient
  fullName: Microsoft.Azure.Batch.BatchClient
- uid: Task
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: Task
- uid: Microsoft.Azure.Batch
  commentId: N:Microsoft.Azure.Batch
  isExternal: false
  name: Microsoft.Azure.Batch
  nameWithType: Microsoft.Azure.Batch
  fullName: Microsoft.Azure.Batch
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync
  isExternal: false
  name: DeleteJobScheduleIfExistsAsync
  nameWithType: TestUtilities.DeleteJobScheduleIfExistsAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteJobScheduleIfExistsAsync
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync
  isExternal: false
  name: DeletePoolIfExistsAsync
  nameWithType: TestUtilities.DeletePoolIfExistsAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeletePoolIfExistsAsync
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync
  isExternal: false
  name: DeleteCertificateIfExistsAsync
  nameWithType: TestUtilities.DeleteCertificateIfExistsAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertificateIfExistsAsync
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools
  isExternal: false
  name: DisplayPools
  nameWithType: TestUtilities.DisplayPools
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayPools
- uid: IEnumerable{Microsoft.Azure.Batch.CloudPool}
  commentId: '!:IEnumerable{Microsoft.Azure.Batch.CloudPool}'
  definition: IEnumerable`1
  name: IEnumerable<CloudPool>
  nameWithType: IEnumerable<CloudPool>
  fullName: IEnumerable<Microsoft.Azure.Batch.CloudPool>
  nameWithType.vb: IEnumerable(Of CloudPool)
  fullname.vb: IEnumerable(Of Microsoft.Azure.Batch.CloudPool)
  name.vb: IEnumerable(Of CloudPool)
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.CloudPool
    name: CloudPool
    nameWithType: CloudPool
    fullName: Microsoft.Azure.Batch.CloudPool
  - name: )
    nameWithType: )
    fullName: )
- uid: IEnumerable`1
  commentId: '!:IEnumerable`1'
  isExternal: true
  name: IEnumerable<>
  nameWithType: IEnumerable<>
  fullName: IEnumerable<>
  nameWithType.vb: IEnumerable(Of )
  fullname.vb: IEnumerable(Of )
  name.vb: IEnumerable(Of )
  spec.csharp:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: ''
    nameWithType: ''
    fullName: ''
  - name: )
    nameWithType: )
    fullName: )
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong
  isExternal: false
  name: DisplayJobScheduleLong
  nameWithType: TestUtilities.DisplayJobScheduleLong
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DisplayJobScheduleLong
- uid: Microsoft.Azure.Batch.CloudJobSchedule
  commentId: T:Microsoft.Azure.Batch.CloudJobSchedule
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudJobSchedule
  nameWithType: CloudJobSchedule
  fullName: Microsoft.Azure.Batch.CloudJobSchedule
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync
  isExternal: false
  name: WaitForPoolToReachStateAsync
  nameWithType: TestUtilities.WaitForPoolToReachStateAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForPoolToReachStateAsync
- uid: Microsoft.Azure.Batch.Common.AllocationState
  commentId: T:Microsoft.Azure.Batch.Common.AllocationState
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: AllocationState
  nameWithType: AllocationState
  fullName: Microsoft.Azure.Batch.Common.AllocationState
- uid: Microsoft.Azure.Batch.Common
  commentId: N:Microsoft.Azure.Batch.Common
  isExternal: false
  name: Microsoft.Azure.Batch.Common
  nameWithType: Microsoft.Azure.Batch.Common
  fullName: Microsoft.Azure.Batch.Common
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync
  isExternal: false
  name: WaitForJobStateAsync
  nameWithType: TestUtilities.WaitForJobStateAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobStateAsync
- uid: Microsoft.Azure.Batch.CloudJob
  commentId: T:Microsoft.Azure.Batch.CloudJob
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudJob
  nameWithType: CloudJob
  fullName: Microsoft.Azure.Batch.CloudJob
- uid: Microsoft.Azure.Batch.Common.JobState
  commentId: T:Microsoft.Azure.Batch.Common.JobState
  parent: Microsoft.Azure.Batch.Common
  isExternal: false
  name: JobState
  nameWithType: JobState
  fullName: Microsoft.Azure.Batch.Common.JobState
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync
  isExternal: false
  name: RefreshBasedPollingWithTimeoutAsync
  nameWithType: TestUtilities.RefreshBasedPollingWithTimeoutAsync
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.RefreshBasedPollingWithTimeoutAsync
- uid: Microsoft.Azure.Batch.IRefreshable
  commentId: T:Microsoft.Azure.Batch.IRefreshable
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: IRefreshable
  nameWithType: IRefreshable
  fullName: Microsoft.Azure.Batch.IRefreshable
- uid: Func{Task{System.Boolean}}
  commentId: '!:Func{Task{System.Boolean}}'
  definition: Func`1
  name: Func<Task<Boolean>>
  nameWithType: Func<Task<Boolean>>
  fullName: Func<Task<System.Boolean>>
  nameWithType.vb: Func(Of Task(Of Boolean))
  fullname.vb: Func(Of Task(Of System.Boolean))
  name.vb: Func(Of Task(Of Boolean))
  spec.csharp:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    nameWithType: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Task`1
    name: Task
    nameWithType: Task
    fullName: Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Boolean
    name: Boolean
    nameWithType: Boolean
    fullName: System.Boolean
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  - name: )
    nameWithType: )
    fullName: )
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor
  isExternal: false
  name: DeleteCertMonitor
  nameWithType: TestUtilities.DeleteCertMonitor
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.DeleteCertMonitor
- uid: Microsoft.Azure.Batch.CertificateOperations
  commentId: T:Microsoft.Azure.Batch.CertificateOperations
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CertificateOperations
  nameWithType: CertificateOperations
  fullName: Microsoft.Azure.Batch.CertificateOperations
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld
  isExternal: false
  name: HelloWorld
  nameWithType: TestUtilities.HelloWorld
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.HelloWorld
- uid: Microsoft.Azure.Batch.CloudPool
  commentId: T:Microsoft.Azure.Batch.CloudPool
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: CloudPool
  nameWithType: CloudPool
  fullName: Microsoft.Azure.Batch.CloudPool
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule
  isExternal: false
  name: WaitForJobOnJobSchedule
  nameWithType: TestUtilities.WaitForJobOnJobSchedule
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.WaitForJobOnJobSchedule
- uid: Microsoft.Azure.Batch.JobScheduleOperations
  commentId: T:Microsoft.Azure.Batch.JobScheduleOperations
  parent: Microsoft.Azure.Batch
  isExternal: false
  name: JobScheduleOperations
  nameWithType: JobScheduleOperations
  fullName: Microsoft.Azure.Batch.JobScheduleOperations
- uid: System.Nullable{TimeSpan}
  commentId: '!:System.Nullable{TimeSpan}'
  definition: System.Nullable`1
  name: Nullable<TimeSpan>
  nameWithType: Nullable<TimeSpan>
  fullName: System.Nullable<TimeSpan>
  nameWithType.vb: Nullable(Of TimeSpan)
  fullname.vb: System.Nullable(Of TimeSpan)
  name.vb: Nullable(Of TimeSpan)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: TimeSpan
    name: TimeSpan
    nameWithType: TimeSpan
    fullName: TimeSpan
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Nullable`1
  commentId: T:System.Nullable`1
  isExternal: true
  name: Nullable<T>
  nameWithType: Nullable<T>
  fullName: System.Nullable<T>
  nameWithType.vb: Nullable(Of T)
  fullname.vb: System.Nullable(Of T)
  name.vb: Nullable(Of T)
  spec.csharp:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Nullable`1
    name: Nullable
    nameWithType: Nullable
    fullName: System.Nullable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient*
  commentId: Overload:BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient
  isExternal: false
  name: GetServiceClient
  nameWithType: TestUtilities.GetServiceClient
  fullName: BatchClientIntegrationTests.IntegrationTestUtilities.TestUtilities.GetServiceClient
- uid: Microsoft.Azure.Batch.Protocol.BatchServiceClient
  commentId: T:Microsoft.Azure.Batch.Protocol.BatchServiceClient
  parent: Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: BatchServiceClient
  nameWithType: BatchServiceClient
  fullName: Microsoft.Azure.Batch.Protocol.BatchServiceClient
- uid: Microsoft.Azure.Batch.Protocol
  commentId: N:Microsoft.Azure.Batch.Protocol
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol
  nameWithType: Microsoft.Azure.Batch.Protocol
  fullName: Microsoft.Azure.Batch.Protocol
