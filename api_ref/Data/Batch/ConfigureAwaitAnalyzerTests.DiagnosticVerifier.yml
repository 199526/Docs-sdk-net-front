### YamlMime:ManagedReference
items:
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  commentId: T:ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  id: DiagnosticVerifier
  parent: ConfigureAwaitAnalyzerTests
  children:
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument(System.String,System.String)
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Document[])
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String,ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  - ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String[],ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  langs:
  - csharp
  - vb
  name: DiagnosticVerifier
  nameWithType: DiagnosticVerifier
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  type: Class
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DiagnosticVerifier
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
    startLine: 29
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nSuperclass of all Unit Tests for DiagnosticAnalyzers\n"
  example: []
  syntax:
    content: public abstract class DiagnosticVerifier
    content.vb: Public MustInherit Class DiagnosticVerifier
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - abstract
  - class
  modifiers.vb:
  - Public
  - MustInherit
  - Class
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
  id: GetCSharpDiagnosticAnalyzer
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: GetCSharpDiagnosticAnalyzer()
  nameWithType: DiagnosticVerifier.GetCSharpDiagnosticAnalyzer()
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetCSharpDiagnosticAnalyzer
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
    startLine: 34
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nGet the CSharp analyzer being tested - to be implemented in non-abstract class\n"
  example: []
  syntax:
    content: protected abstract DiagnosticAnalyzer GetCSharpDiagnosticAnalyzer()
    content.vb: Protected MustOverride Function GetCSharpDiagnosticAnalyzer As DiagnosticAnalyzer
    return:
      type: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer
  id: GetBasicDiagnosticAnalyzer
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: GetBasicDiagnosticAnalyzer()
  nameWithType: DiagnosticVerifier.GetBasicDiagnosticAnalyzer()
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetBasicDiagnosticAnalyzer
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
    startLine: 39
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nGet the Visual Basic analyzer being tested (C#) - to be implemented in non-abstract class\n"
  example: []
  syntax:
    content: protected abstract DiagnosticAnalyzer GetBasicDiagnosticAnalyzer()
    content.vb: Protected MustOverride Function GetBasicDiagnosticAnalyzer As DiagnosticAnalyzer
    return:
      type: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer*
  modifiers.csharp:
  - protected
  - abstract
  modifiers.vb:
  - Protected
  - MustOverride
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String,ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String,ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  id: VerifyCSharpDiagnostic(System.String,ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: VerifyCSharpDiagnostic(String, DiagnosticResult[])
  nameWithType: DiagnosticVerifier.VerifyCSharpDiagnostic(String, DiagnosticResult[])
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String, ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: VerifyCSharpDiagnostic
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
    startLine: 51
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nCalled to test a C# DiagnosticAnalyzer when applied on the single inputted string as a source\nNote: input a DiagnosticResult for each Diagnostic expected\n"
  example: []
  syntax:
    content: protected void VerifyCSharpDiagnostic(string source, params DiagnosticResult[] expected)
    content.vb: Protected Sub VerifyCSharpDiagnostic(source As String, ParamArray expected As DiagnosticResult())
    parameters:
    - id: source
      type: System.String
      description: A class in the form of a string to run the analyzer on
    - id: expected
      type: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[]
      description: DiagnosticResults that should appear after the analyzer is run on the source
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic*
  nameWithType.vb: DiagnosticVerifier.VerifyCSharpDiagnostic(String, DiagnosticResult())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String, ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult())
  name.vb: VerifyCSharpDiagnostic(String, DiagnosticResult())
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String[],ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String[],ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  id: VerifyCSharpDiagnostic(System.String[],ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: VerifyCSharpDiagnostic(String[], DiagnosticResult[])
  nameWithType: DiagnosticVerifier.VerifyCSharpDiagnostic(String[], DiagnosticResult[])
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String[], ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: VerifyCSharpDiagnostic
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Verifiers/DiagnosticVerifier.cs
    startLine: 62
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nCalled to test a C# DiagnosticAnalyzer when applied on the inputted strings as a source\nNote: input a DiagnosticResult for each Diagnostic expected\n"
  example: []
  syntax:
    content: protected void VerifyCSharpDiagnostic(string[] sources, params DiagnosticResult[] expected)
    content.vb: Protected Sub VerifyCSharpDiagnostic(sources As String(), ParamArray expected As DiagnosticResult())
    parameters:
    - id: sources
      type: System.String[]
      description: An array of strings to create source documents from to run the analyzers on
    - id: expected
      type: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[]
      description: DiagnosticResults that should appear after the analyzer is run on the sources
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic*
  nameWithType.vb: DiagnosticVerifier.VerifyCSharpDiagnostic(String(), DiagnosticResult())
  modifiers.csharp:
  - protected
  modifiers.vb:
  - Protected
  fullName.vb: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic(System.String(), ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult())
  name.vb: VerifyCSharpDiagnostic(String(), DiagnosticResult())
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Document[])
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Document[])
  id: GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer,Microsoft.CodeAnalysis.Document[])
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer, Document[])
  nameWithType: DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer, Document[])
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Document[])
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetSortedDiagnosticsFromDocuments
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
    startLine: 62
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nGiven an analyzer and a document to apply it to, run the analyzer and gather an array of diagnostics found in it.\nThe returned diagnostics are then ordered by location in the source document.\n"
  example: []
  syntax:
    content: protected static Diagnostic[] GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer analyzer, Document[] documents)
    content.vb: Protected Shared Function GetSortedDiagnosticsFromDocuments(analyzer As DiagnosticAnalyzer, documents As Document()) As Diagnostic()
    parameters:
    - id: analyzer
      type: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
      description: The analyzer to run on the documents
    - id: documents
      type: Microsoft.CodeAnalysis.Document[]
      description: The Documents that the analyzer will be run on
    return:
      type: Microsoft.CodeAnalysis.Diagnostic[]
      description: An IEnumerable of Diagnostics that surfaced in the source code, sorted by Location
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments*
  nameWithType.vb: DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer, Document())
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
  fullName.vb: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments(Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer, Microsoft.CodeAnalysis.Document())
  name.vb: GetSortedDiagnosticsFromDocuments(DiagnosticAnalyzer, Document())
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument(System.String,System.String)
  commentId: M:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument(System.String,System.String)
  id: CreateDocument(System.String,System.String)
  parent: ConfigureAwaitAnalyzerTests.DiagnosticVerifier
  langs:
  - csharp
  - vb
  name: CreateDocument(String, String)
  nameWithType: DiagnosticVerifier.CreateDocument(String, String)
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument(System.String, System.String)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateDocument
    path: src/Batch/Client/Tools/ConfigureAwaitAnalyzer/ConfigureAwaitAnalyzer.Tests/Helpers/DiagnosticVerifier.Helper.cs
    startLine: 144
  assemblies:
  - ConfigureAwaitAnalyzer.Tests
  namespace: ConfigureAwaitAnalyzerTests
  summary: "\nCreate a Document from a string through creating a project that contains it.\n"
  example: []
  syntax:
    content: protected static Document CreateDocument(string source, string language = "C#")
    content.vb: Protected Shared Function CreateDocument(source As String, language As String = "C#") As Document
    parameters:
    - id: source
      type: System.String
      description: Classes in the form of a string
    - id: language
      type: System.String
      description: The language the source code is in
    return:
      type: Microsoft.CodeAnalysis.Document
      description: A Document created from the source string
  overload: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument*
  modifiers.csharp:
  - protected
  - static
  modifiers.vb:
  - Protected
  - Shared
references:
- uid: ConfigureAwaitAnalyzerTests
  commentId: N:ConfigureAwaitAnalyzerTests
  isExternal: false
  name: ConfigureAwaitAnalyzerTests
  nameWithType: ConfigureAwaitAnalyzerTests
  fullName: ConfigureAwaitAnalyzerTests
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer*
  commentId: Overload:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
  isExternal: false
  name: GetCSharpDiagnosticAnalyzer
  nameWithType: DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetCSharpDiagnosticAnalyzer
- uid: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  commentId: T:Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
  parent: Microsoft.CodeAnalysis.Diagnostics
  isExternal: true
  name: DiagnosticAnalyzer
  nameWithType: DiagnosticAnalyzer
  fullName: Microsoft.CodeAnalysis.Diagnostics.DiagnosticAnalyzer
- uid: Microsoft.CodeAnalysis.Diagnostics
  commentId: N:Microsoft.CodeAnalysis.Diagnostics
  isExternal: false
  name: Microsoft.CodeAnalysis.Diagnostics
  nameWithType: Microsoft.CodeAnalysis.Diagnostics
  fullName: Microsoft.CodeAnalysis.Diagnostics
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer*
  commentId: Overload:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer
  isExternal: false
  name: GetBasicDiagnosticAnalyzer
  nameWithType: DiagnosticVerifier.GetBasicDiagnosticAnalyzer
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetBasicDiagnosticAnalyzer
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic*
  commentId: Overload:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic
  isExternal: false
  name: VerifyCSharpDiagnostic
  nameWithType: DiagnosticVerifier.VerifyCSharpDiagnostic
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.VerifyCSharpDiagnostic
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[]
  name: DiagnosticResult[]
  nameWithType: DiagnosticResult[]
  fullName: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult[]
  nameWithType.vb: DiagnosticResult()
  fullname.vb: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult()
  name.vb: DiagnosticResult()
  spec.csharp:
  - uid: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult
    name: DiagnosticResult
    nameWithType: DiagnosticResult
    fullName: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult
    name: DiagnosticResult
    nameWithType: DiagnosticResult
    fullName: ConfigureAwaitAnalyzerTests.Helpers.DiagnosticResult
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.String[]
  name: String[]
  nameWithType: String[]
  fullName: System.String[]
  nameWithType.vb: String()
  fullname.vb: System.String()
  name.vb: String()
  spec.csharp:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments*
  commentId: Overload:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments
  isExternal: false
  name: GetSortedDiagnosticsFromDocuments
  nameWithType: DiagnosticVerifier.GetSortedDiagnosticsFromDocuments
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.GetSortedDiagnosticsFromDocuments
- uid: Microsoft.CodeAnalysis.Document[]
  name: Document[]
  nameWithType: Document[]
  fullName: Microsoft.CodeAnalysis.Document[]
  nameWithType.vb: Document()
  fullname.vb: Microsoft.CodeAnalysis.Document()
  name.vb: Document()
  spec.csharp:
  - uid: Microsoft.CodeAnalysis.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.CodeAnalysis.Document
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.CodeAnalysis.Document
    name: Document
    nameWithType: Document
    fullName: Microsoft.CodeAnalysis.Document
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: Microsoft.CodeAnalysis.Diagnostic[]
  name: Diagnostic[]
  nameWithType: Diagnostic[]
  fullName: Microsoft.CodeAnalysis.Diagnostic[]
  nameWithType.vb: Diagnostic()
  fullname.vb: Microsoft.CodeAnalysis.Diagnostic()
  name.vb: Diagnostic()
  spec.csharp:
  - uid: Microsoft.CodeAnalysis.Diagnostic
    name: Diagnostic
    nameWithType: Diagnostic
    fullName: Microsoft.CodeAnalysis.Diagnostic
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: Microsoft.CodeAnalysis.Diagnostic
    name: Diagnostic
    nameWithType: Diagnostic
    fullName: Microsoft.CodeAnalysis.Diagnostic
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument*
  commentId: Overload:ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument
  isExternal: false
  name: CreateDocument
  nameWithType: DiagnosticVerifier.CreateDocument
  fullName: ConfigureAwaitAnalyzerTests.DiagnosticVerifier.CreateDocument
- uid: Microsoft.CodeAnalysis.Document
  commentId: T:Microsoft.CodeAnalysis.Document
  parent: Microsoft.CodeAnalysis
  isExternal: true
  name: Document
  nameWithType: Document
  fullName: Microsoft.CodeAnalysis.Document
- uid: Microsoft.CodeAnalysis
  commentId: N:Microsoft.CodeAnalysis
  isExternal: false
  name: Microsoft.CodeAnalysis
  nameWithType: Microsoft.CodeAnalysis
  fullName: Microsoft.CodeAnalysis
