### YamlMime:ManagedReference
items:
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  commentId: T:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  id: InterceptorFactory
  parent: Azure.Batch.Unit.Tests.TestUtilities
  children:
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor``3(System.Func{``2})
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult})
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.Certificate)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.ComputeNode)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJob)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudPool)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor``3(``1)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor``3(System.Collections.Generic.IEnumerable{``1})
  - Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask})
  langs:
  - csharp
  - vb
  name: InterceptorFactory
  nameWithType: InterceptorFactory
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  type: Class
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: InterceptorFactory
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 24
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static class InterceptorFactory
    content.vb: Public Module InterceptorFactory
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - static
  - class
  modifiers.vb:
  - Public
  - Module
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJob)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJob)
  id: CreateGetJobRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJob)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetJobRequestInterceptor(CloudJob)
  nameWithType: InterceptorFactory.CreateGetJobRequestInterceptor(CloudJob)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJob)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetJobRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 26
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetJobRequestInterceptor(CloudJob jobToReturn)
    content.vb: Public Shared Function CreateGetJobRequestInterceptor(jobToReturn As CloudJob) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: jobToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.CloudJob
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor
  id: CreateAddJobRequestInterceptor
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddJobRequestInterceptor()
  nameWithType: InterceptorFactory.CreateAddJobRequestInterceptor()
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddJobRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 31
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateAddJobRequestInterceptor()
    content.vb: Public Shared Function CreateAddJobRequestInterceptor As IEnumerable(Of RequestInterceptor)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  id: CreateGetTaskRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetTaskRequestInterceptor(CloudTask)
  nameWithType: InterceptorFactory.CreateGetTaskRequestInterceptor(CloudTask)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetTaskRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 39
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetTaskRequestInterceptor(CloudTask TaskToReturn)
    content.vb: Public Shared Function CreateGetTaskRequestInterceptor(TaskToReturn As CloudTask) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: TaskToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.CloudTask
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudPool)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudPool)
  id: CreateGetPoolRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudPool)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetPoolRequestInterceptor(CloudPool)
  nameWithType: InterceptorFactory.CreateGetPoolRequestInterceptor(CloudPool)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudPool)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetPoolRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 44
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetPoolRequestInterceptor(CloudPool poolToReturn)
    content.vb: Public Shared Function CreateGetPoolRequestInterceptor(poolToReturn As CloudPool) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: poolToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.CloudPool
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.ComputeNode)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.ComputeNode)
  id: CreateGetComputeNodeRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.ComputeNode)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetComputeNodeRequestInterceptor(ComputeNode)
  nameWithType: InterceptorFactory.CreateGetComputeNodeRequestInterceptor(ComputeNode)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.ComputeNode)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetComputeNodeRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 49
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetComputeNodeRequestInterceptor(ComputeNode nodeToReturn)
    content.vb: Public Shared Function CreateGetComputeNodeRequestInterceptor(nodeToReturn As ComputeNode) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: nodeToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor
  id: CreateAddPoolRequestInterceptor
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddPoolRequestInterceptor()
  nameWithType: InterceptorFactory.CreateAddPoolRequestInterceptor()
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddPoolRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 54
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateAddPoolRequestInterceptor()
    content.vb: Public Shared Function CreateAddPoolRequestInterceptor As IEnumerable(Of RequestInterceptor)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule)
  id: CreateGetJobScheduleRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetJobScheduleRequestInterceptor(CloudJobSchedule)
  nameWithType: InterceptorFactory.CreateGetJobScheduleRequestInterceptor(CloudJobSchedule)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetJobScheduleRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 62
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetJobScheduleRequestInterceptor(CloudJobSchedule jobScheduleToReturn)
    content.vb: Public Shared Function CreateGetJobScheduleRequestInterceptor(jobScheduleToReturn As CloudJobSchedule) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: jobScheduleToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor
  id: CreateAddJobScheduleRequestInterceptor
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddJobScheduleRequestInterceptor()
  nameWithType: InterceptorFactory.CreateAddJobScheduleRequestInterceptor()
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddJobScheduleRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 67
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateAddJobScheduleRequestInterceptor()
    content.vb: Public Shared Function CreateAddJobScheduleRequestInterceptor As IEnumerable(Of RequestInterceptor)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.Certificate)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.Certificate)
  id: CreateGetCertificateRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.Certificate)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetCertificateRequestInterceptor(Certificate)
  nameWithType: InterceptorFactory.CreateGetCertificateRequestInterceptor(Certificate)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor(Microsoft.Azure.Batch.Protocol.Models.Certificate)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetCertificateRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 75
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateGetCertificateRequestInterceptor(Certificate certificateToReturn)
    content.vb: Public Shared Function CreateGetCertificateRequestInterceptor(certificateToReturn As Certificate) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: certificateToReturn
      type: Microsoft.Azure.Batch.Protocol.Models.Certificate
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor
  id: CreateAddCertificateRequestInterceptor
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddCertificateRequestInterceptor()
  nameWithType: InterceptorFactory.CreateAddCertificateRequestInterceptor()
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor()
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddCertificateRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 80
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateAddCertificateRequestInterceptor()
    content.vb: Public Shared Function CreateAddCertificateRequestInterceptor As IEnumerable(Of RequestInterceptor)
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask})
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask})
  id: CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask})
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateListTasksRequestInterceptor(IEnumerable<CloudTask>)
  nameWithType: InterceptorFactory.CreateListTasksRequestInterceptor(IEnumerable<CloudTask>)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Protocol.Models.CloudTask>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateListTasksRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 88
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateListTasksRequestInterceptor(IEnumerable<CloudTask> tasksToReturn)
    content.vb: Public Shared Function CreateListTasksRequestInterceptor(tasksToReturn As IEnumerable(Of CloudTask)) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: tasksToReturn
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask}
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor*
  nameWithType.vb: InterceptorFactory.CreateListTasksRequestInterceptor(IEnumerable(Of CloudTask))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Protocol.Models.CloudTask))
  name.vb: CreateListTasksRequestInterceptor(IEnumerable(Of CloudTask))
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult})
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult})
  id: CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult})
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddTaskCollectionInterceptor(IEnumerable<TaskAddResult>)
  nameWithType: InterceptorFactory.CreateAddTaskCollectionInterceptor(IEnumerable<TaskAddResult>)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Protocol.Models.TaskAddResult>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddTaskCollectionInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 96
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: public static IEnumerable<RequestInterceptor> CreateAddTaskCollectionInterceptor(IEnumerable<TaskAddResult> resultsToReturn)
    content.vb: Public Shared Function CreateAddTaskCollectionInterceptor(resultsToReturn As IEnumerable(Of TaskAddResult)) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: resultsToReturn
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult}
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor*
  nameWithType.vb: InterceptorFactory.CreateAddTaskCollectionInterceptor(IEnumerable(Of TaskAddResult))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor(System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Protocol.Models.TaskAddResult))
  name.vb: CreateAddTaskCollectionInterceptor(IEnumerable(Of TaskAddResult))
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor``3(System.Func{``2})
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor``3(System.Func{``2})
  id: CreateAddRequestInterceptor``3(System.Func{``2})
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateAddRequestInterceptor<TBody, TOptions, TResponse>(Func<TResponse>)
  nameWithType: InterceptorFactory.CreateAddRequestInterceptor<TBody, TOptions, TResponse>(Func<TResponse>)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor<TBody, TOptions, TResponse>(System.Func<TResponse>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateAddRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 111
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: 'public static IEnumerable<RequestInterceptor> CreateAddRequestInterceptor<TBody, TOptions, TResponse>(Func<TResponse> responseFactory = null)where TOptions : IOptions, new ()where TResponse : IAzureOperationResponse, new ()'
    content.vb: Public Shared Function CreateAddRequestInterceptor(Of TBody, TOptions As {IOptions, New}, TResponse As {IAzureOperationResponse, New})(responseFactory As Func(Of TResponse) = Nothing) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: responseFactory
      type: System.Func{{TResponse}}
    typeParameters:
    - id: TBody
    - id: TOptions
    - id: TResponse
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor*
  nameWithType.vb: InterceptorFactory.CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)(Func(Of TResponse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)(System.Func(Of TResponse))
  name.vb: CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)(Func(Of TResponse))
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor``3(``1)
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor``3(``1)
  id: CreateGetRequestInterceptor``3(``1)
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>(TResponse)
  nameWithType: InterceptorFactory.CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>(TResponse)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>(TResponse)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateGetRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 126
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: 'public static IEnumerable<RequestInterceptor> CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>(TResponse valueToReturn)where TOptions : IOptions, new ()'
    content.vb: Public Shared Function CreateGetRequestInterceptor(Of TOptions As {IOptions, New}, TResponse, TResponseHeaders)(valueToReturn As TResponse) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: valueToReturn
      type: '{TResponse}'
    typeParameters:
    - id: TOptions
    - id: TResponse
    - id: TResponseHeaders
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor*
  nameWithType.vb: InterceptorFactory.CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(TResponse)
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(TResponse)
  name.vb: CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(TResponse)
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor``3(System.Collections.Generic.IEnumerable{``1})
  commentId: M:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor``3(System.Collections.Generic.IEnumerable{``1})
  id: CreateListRequestInterceptor``3(System.Collections.Generic.IEnumerable{``1})
  parent: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory
  langs:
  - csharp
  - vb
  name: CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>(IEnumerable<TResponse>)
  nameWithType: InterceptorFactory.CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>(IEnumerable<TResponse>)
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>(System.Collections.Generic.IEnumerable<TResponse>)
  type: Method
  source:
    remote:
      path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CreateListRequestInterceptor
    path: src/Batch/Client/Tests/ObjectModel/Azure.Batch.Unit.Tests/TestUtilities/InterceptorFactory.cs
    startLine: 145
  assemblies:
  - Azure.Batch.Unit.Tests
  namespace: Azure.Batch.Unit.Tests.TestUtilities
  syntax:
    content: 'public static IEnumerable<RequestInterceptor> CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>(IEnumerable<TResponse> valueToReturn)where TOptions : IOptions, new ()'
    content.vb: Public Shared Function CreateListRequestInterceptor(Of TOptions As {IOptions, New}, TResponse, TResponseHeaders)(valueToReturn As IEnumerable(Of TResponse)) As IEnumerable(Of RequestInterceptor)
    parameters:
    - id: valueToReturn
      type: System.Collections.Generic.IEnumerable{{TResponse}}
    typeParameters:
    - id: TOptions
    - id: TResponse
    - id: TResponseHeaders
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  overload: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor*
  nameWithType.vb: InterceptorFactory.CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(IEnumerable(Of TResponse))
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
  fullName.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(System.Collections.Generic.IEnumerable(Of TResponse))
  name.vb: CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)(IEnumerable(Of TResponse))
references:
- uid: Azure.Batch.Unit.Tests.TestUtilities
  commentId: N:Azure.Batch.Unit.Tests.TestUtilities
  isExternal: false
  name: Azure.Batch.Unit.Tests.TestUtilities
  nameWithType: Azure.Batch.Unit.Tests.TestUtilities
  fullName: Azure.Batch.Unit.Tests.TestUtilities
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor
  isExternal: false
  name: CreateGetJobRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetJobRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.CloudJob
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.CloudJob
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: CloudJob
  nameWithType: CloudJob
  fullName: Microsoft.Azure.Batch.Protocol.Models.CloudJob
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.RequestInterceptor}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<RequestInterceptor>
  nameWithType: IEnumerable<RequestInterceptor>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Protocol.RequestInterceptor>
  nameWithType.vb: IEnumerable(Of RequestInterceptor)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Protocol.RequestInterceptor)
  name.vb: IEnumerable(Of RequestInterceptor)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.RequestInterceptor
    name: RequestInterceptor
    nameWithType: RequestInterceptor
    fullName: Microsoft.Azure.Batch.Protocol.RequestInterceptor
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.RequestInterceptor
    name: RequestInterceptor
    nameWithType: RequestInterceptor
    fullName: Microsoft.Azure.Batch.Protocol.RequestInterceptor
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Protocol.Models
  commentId: N:Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Microsoft.Azure.Batch.Protocol.Models
  nameWithType: Microsoft.Azure.Batch.Protocol.Models
  fullName: Microsoft.Azure.Batch.Protocol.Models
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor
  isExternal: false
  name: CreateAddJobRequestInterceptor
  nameWithType: InterceptorFactory.CreateAddJobRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobRequestInterceptor
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor
  isExternal: false
  name: CreateGetTaskRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetTaskRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetTaskRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.CloudTask
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.CloudTask
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: CloudTask
  nameWithType: CloudTask
  fullName: Microsoft.Azure.Batch.Protocol.Models.CloudTask
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor
  isExternal: false
  name: CreateGetPoolRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetPoolRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetPoolRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.CloudPool
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.CloudPool
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: CloudPool
  nameWithType: CloudPool
  fullName: Microsoft.Azure.Batch.Protocol.Models.CloudPool
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor
  isExternal: false
  name: CreateGetComputeNodeRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetComputeNodeRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetComputeNodeRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.ComputeNode
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: ComputeNode
  nameWithType: ComputeNode
  fullName: Microsoft.Azure.Batch.Protocol.Models.ComputeNode
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor
  isExternal: false
  name: CreateAddPoolRequestInterceptor
  nameWithType: InterceptorFactory.CreateAddPoolRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddPoolRequestInterceptor
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor
  isExternal: false
  name: CreateGetJobScheduleRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetJobScheduleRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetJobScheduleRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: CloudJobSchedule
  nameWithType: CloudJobSchedule
  fullName: Microsoft.Azure.Batch.Protocol.Models.CloudJobSchedule
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor
  isExternal: false
  name: CreateAddJobScheduleRequestInterceptor
  nameWithType: InterceptorFactory.CreateAddJobScheduleRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddJobScheduleRequestInterceptor
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor
  isExternal: false
  name: CreateGetCertificateRequestInterceptor
  nameWithType: InterceptorFactory.CreateGetCertificateRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetCertificateRequestInterceptor
- uid: Microsoft.Azure.Batch.Protocol.Models.Certificate
  commentId: T:Microsoft.Azure.Batch.Protocol.Models.Certificate
  parent: Microsoft.Azure.Batch.Protocol.Models
  isExternal: false
  name: Certificate
  nameWithType: Certificate
  fullName: Microsoft.Azure.Batch.Protocol.Models.Certificate
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor
  isExternal: false
  name: CreateAddCertificateRequestInterceptor
  nameWithType: InterceptorFactory.CreateAddCertificateRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddCertificateRequestInterceptor
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor
  isExternal: false
  name: CreateListTasksRequestInterceptor
  nameWithType: InterceptorFactory.CreateListTasksRequestInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListTasksRequestInterceptor
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.CloudTask}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<CloudTask>
  nameWithType: IEnumerable<CloudTask>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Protocol.Models.CloudTask>
  nameWithType.vb: IEnumerable(Of CloudTask)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Protocol.Models.CloudTask)
  name.vb: IEnumerable(Of CloudTask)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.Protocol.Models.CloudTask
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.CloudTask
    name: CloudTask
    nameWithType: CloudTask
    fullName: Microsoft.Azure.Batch.Protocol.Models.CloudTask
  - name: )
    nameWithType: )
    fullName: )
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor
  isExternal: false
  name: CreateAddTaskCollectionInterceptor
  nameWithType: InterceptorFactory.CreateAddTaskCollectionInterceptor
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddTaskCollectionInterceptor
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Protocol.Models.TaskAddResult}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TaskAddResult>
  nameWithType: IEnumerable<TaskAddResult>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Protocol.Models.TaskAddResult>
  nameWithType.vb: IEnumerable(Of TaskAddResult)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Protocol.Models.TaskAddResult)
  name.vb: IEnumerable(Of TaskAddResult)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Protocol.Models.TaskAddResult
    name: TaskAddResult
    nameWithType: TaskAddResult
    fullName: Microsoft.Azure.Batch.Protocol.Models.TaskAddResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Protocol.Models.TaskAddResult
    name: TaskAddResult
    nameWithType: TaskAddResult
    fullName: Microsoft.Azure.Batch.Protocol.Models.TaskAddResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor
  isExternal: false
  name: CreateAddRequestInterceptor<TBody, TOptions, TResponse>
  nameWithType: InterceptorFactory.CreateAddRequestInterceptor<TBody, TOptions, TResponse>
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor<TBody, TOptions, TResponse>
  nameWithType.vb: InterceptorFactory.CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)
  fullname.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)
  name.vb: CreateAddRequestInterceptor(Of TBody, TOptions, TResponse)
- uid: System.Func{{TResponse}}
  commentId: T:System.Func{``2}
  parent: System
  definition: System.Func`1
  name: Func<TResponse>
  nameWithType: Func<TResponse>
  fullName: System.Func<TResponse>
  nameWithType.vb: Func(Of TResponse)
  fullname.vb: System.Func(Of TResponse)
  name.vb: Func(Of TResponse)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Func`1
  commentId: T:System.Func`1
  isExternal: true
  name: Func<TResult>
  nameWithType: Func<TResult>
  fullName: System.Func<TResult>
  nameWithType.vb: Func(Of TResult)
  fullname.vb: System.Func(Of TResult)
  name.vb: Func(Of TResult)
  spec.csharp:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Func`1
    name: Func
    nameWithType: Func
    fullName: System.Func
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor
  isExternal: false
  name: CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  nameWithType: InterceptorFactory.CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  nameWithType.vb: InterceptorFactory.CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
  fullname.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
  name.vb: CreateGetRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
- uid: '{TResponse}'
  commentId: '!:TResponse'
  definition: TResponse
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: TResponse
  commentId: '!:TResponse'
  isExternal: false
  name: TResponse
  nameWithType: TResponse
  fullName: TResponse
- uid: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor*
  commentId: Overload:Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor
  isExternal: false
  name: CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  nameWithType: InterceptorFactory.CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  fullName: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor<TOptions, TResponse, TResponseHeaders>
  nameWithType.vb: InterceptorFactory.CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
  fullname.vb: Azure.Batch.Unit.Tests.TestUtilities.InterceptorFactory.CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
  name.vb: CreateListRequestInterceptor(Of TOptions, TResponse, TResponseHeaders)
- uid: System.Collections.Generic.IEnumerable{{TResponse}}
  commentId: T:System.Collections.Generic.IEnumerable{``1}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<TResponse>
  nameWithType: IEnumerable<TResponse>
  fullName: System.Collections.Generic.IEnumerable<TResponse>
  nameWithType.vb: IEnumerable(Of TResponse)
  fullname.vb: System.Collections.Generic.IEnumerable(Of TResponse)
  name.vb: IEnumerable(Of TResponse)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResponse
    nameWithType: TResponse
    fullName: TResponse
  - name: )
    nameWithType: )
    fullName: )
