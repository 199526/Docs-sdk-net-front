### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  id: OutputFileReference
  parent: Microsoft.Azure.Batch.Conventions.Files
  children:
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync(System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
  langs:
  - csharp
  - vb
  name: OutputFileReference
  nameWithType: OutputFileReference
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  type: Class
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: OutputFileReference
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nA reference to a task or job output file in persistent storage.\n"
  example: []
  syntax:
    content: public sealed class OutputFileReference
    content.vb: Public NotInheritable Class OutputFileReference
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
  commentId: P:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
  id: FilePath
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: FilePath
  nameWithType: OutputFileReference.FilePath
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
  type: Property
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: FilePath
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 46
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nGets the path under which the file was stored.\n"
  remarks: >-
    If the file was stored under a directory path, the FilePath property uses the directory

    separator of the underlying blob storage (for example, mydirectory/myfile.txt). Such paths may

    not be directly usable as Windows paths.
  example: []
  syntax:
    content: public string FilePath { get; }
    content.vb: Public ReadOnly Property FilePath As String
    parameters: []
    return:
      type: System.String
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
  commentId: P:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
  id: Uri
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: Uri
  nameWithType: OutputFileReference.Uri
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
  type: Property
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Uri
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 61
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nGets the URI of the file in persistent storage.\n"
  example: []
  syntax:
    content: public Uri Uri { get; }
    content.vb: Public ReadOnly Property Uri As Uri
    parameters: []
    return:
      type: System.Uri
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
  commentId: P:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
  id: CloudBlob
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: CloudBlob
  nameWithType: OutputFileReference.CloudBlob
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
  type: Property
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: CloudBlob
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 68
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nGets a reference to the underlying <xref href=\"Microsoft.WindowsAzure.Storage.Blob.ICloudBlob\" data-throw-if-not-resolved=\"false\"></xref> object representing the\nfile in persistent storage. This can be used to invoke blob methods or overloads not surfaced\nby the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.OutputFileReference\" data-throw-if-not-resolved=\"false\"></xref> abstraction.\n"
  example: []
  syntax:
    content: public ICloudBlob CloudBlob { get; }
    content.vb: Public ReadOnly Property CloudBlob As ICloudBlob
    parameters: []
    return:
      type: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob*
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  id: DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: DownloadToFileAsync(String, FileMode, CancellationToken)
  nameWithType: OutputFileReference.DownloadToFileAsync(String, FileMode, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync(System.String, System.IO.FileMode, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DownloadToFileAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDownloads the contents of the file to a specified path.\n"
  example: []
  syntax:
    content: public Task DownloadToFileAsync(string path, FileMode mode, CancellationToken cancellationToken = null)
    content.vb: Public Function DownloadToFileAsync(path As String, mode As FileMode, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: path
      type: System.String
      description: The path to which to download the file.
    - id: mode
      type: System.IO.FileMode
      description: Specifies how to open or create the file.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync*
  seealso:
  - linkId: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
    commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  id: DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: DownloadToStreamAsync(Stream, CancellationToken)
  nameWithType: OutputFileReference.DownloadToStreamAsync(Stream, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync(System.IO.Stream, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DownloadToStreamAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 90
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDownloads the contents of the file to a stream.\n"
  example: []
  syntax:
    content: public Task DownloadToStreamAsync(Stream target, CancellationToken cancellationToken = null)
    content.vb: Public Function DownloadToStreamAsync(target As Stream, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: target
      type: System.IO.Stream
      description: The target stream.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync*
  seealso:
  - linkId: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
    commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  id: DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: DownloadToByteArrayAsync(Byte[], Int32, CancellationToken)
  nameWithType: OutputFileReference.DownloadToByteArrayAsync(Byte[], Int32, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync(System.Byte[], System.Int32, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DownloadToByteArrayAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 103
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDownloads the contents of the file to a byte array.\n"
  example: []
  syntax:
    content: public Task<int> DownloadToByteArrayAsync(byte[] target, int index, CancellationToken cancellationToken = null)
    content.vb: Public Function DownloadToByteArrayAsync(target As Byte(), index As Integer, cancellationToken As CancellationToken = Nothing) As Task(Of Integer)
    parameters:
    - id: target
      type: System.Byte[]
      description: The target byte array.
    - id: index
      type: System.Int32
      description: The starting offset in the byte array
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.Int32}
      description: The total number of bytes read into the buffer.
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync*
  seealso:
  - linkId: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
    commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  nameWithType.vb: OutputFileReference.DownloadToByteArrayAsync(Byte(), Int32, CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync(System.Byte(), System.Int32, System.Threading.CancellationToken)
  name.vb: DownloadToByteArrayAsync(Byte(), Int32, CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync(System.Threading.CancellationToken)
  id: DeleteAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: DeleteAsync(CancellationToken)
  nameWithType: OutputFileReference.DeleteAsync(CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: DeleteAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 114
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDeletes the file from persistent storage.\n"
  example: []
  syntax:
    content: public Task DeleteAsync(CancellationToken cancellationToken = null)
    content.vb: Public Function DeleteAsync(cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync*
  seealso:
  - linkId: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DeleteAsync(System.Threading.CancellationToken)
    commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DeleteAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync(System.Threading.CancellationToken)
  id: OpenReadAsync(System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  langs:
  - csharp
  - vb
  name: OpenReadAsync(CancellationToken)
  nameWithType: OutputFileReference.OpenReadAsync(CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync(System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: OpenReadAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/OutputFileReference.cs
    startLine: 125
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nOpens a stream for reading from the file in persistent storage.\n"
  example: []
  syntax:
    content: public Task<Stream> OpenReadAsync(CancellationToken cancellationToken = null)
    content.vb: Public Function OpenReadAsync(cancellationToken As CancellationToken = Nothing) As Task(Of Stream)
    parameters:
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{System.IO.Stream}
      description: A stream to be used for reading from the blob.
  overload: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync*
  seealso:
  - linkId: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.OpenReadAsync(System.Threading.CancellationToken)
    commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.OpenReadAsync(System.Threading.CancellationToken)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Conventions.Files
  commentId: N:Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: Microsoft.Azure.Batch.Conventions.Files
  nameWithType: Microsoft.Azure.Batch.Conventions.Files
  fullName: Microsoft.Azure.Batch.Conventions.Files
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
  isExternal: false
  name: FilePath
  nameWithType: OutputFileReference.FilePath
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.FilePath
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
  isExternal: false
  name: Uri
  nameWithType: OutputFileReference.Uri
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.Uri
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob
  commentId: T:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob
  parent: Microsoft.WindowsAzure.Storage.Blob
  isExternal: true
  name: ICloudBlob
  nameWithType: ICloudBlob
  fullName: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  isExternal: false
  name: OutputFileReference
  nameWithType: OutputFileReference
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
  isExternal: false
  name: CloudBlob
  nameWithType: OutputFileReference.CloudBlob
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.CloudBlob
- uid: Microsoft.WindowsAzure.Storage.Blob
  commentId: N:Microsoft.WindowsAzure.Storage.Blob
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.Blob
  nameWithType: Microsoft.WindowsAzure.Storage.Blob
  fullName: Microsoft.WindowsAzure.Storage.Blob
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToFileAsync(System.String,System.IO.FileMode,System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync
  isExternal: false
  name: DownloadToFileAsync
  nameWithType: OutputFileReference.DownloadToFileAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToFileAsync
- uid: System.IO.FileMode
  commentId: T:System.IO.FileMode
  parent: System.IO
  isExternal: true
  name: FileMode
  nameWithType: FileMode
  fullName: System.IO.FileMode
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: System.IO
  commentId: N:System.IO
  isExternal: false
  name: System.IO
  nameWithType: System.IO
  fullName: System.IO
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToStreamAsync(System.IO.Stream,System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync
  isExternal: false
  name: DownloadToStreamAsync
  nameWithType: OutputFileReference.DownloadToStreamAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToStreamAsync
- uid: System.IO.Stream
  commentId: T:System.IO.Stream
  parent: System.IO
  isExternal: true
  name: Stream
  nameWithType: Stream
  fullName: System.IO.Stream
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DownloadToByteArrayAsync(System.Byte[],System.Int32,System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync
  isExternal: false
  name: DownloadToByteArrayAsync
  nameWithType: OutputFileReference.DownloadToByteArrayAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DownloadToByteArrayAsync
- uid: System.Byte[]
  name: Byte[]
  nameWithType: Byte[]
  fullName: System.Byte[]
  nameWithType.vb: Byte()
  fullname.vb: System.Byte()
  name.vb: Byte()
  spec.csharp:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: '[]'
    nameWithType: '[]'
    fullName: '[]'
  spec.vb:
  - uid: System.Byte
    name: Byte
    nameWithType: Byte
    fullName: System.Byte
    isExternal: true
  - name: ()
    nameWithType: ()
    fullName: ()
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: System.Threading.Tasks.Task{System.Int32}
  commentId: T:System.Threading.Tasks.Task{System.Int32}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Int32>
  nameWithType: Task<Int32>
  fullName: System.Threading.Tasks.Task<System.Int32>
  nameWithType.vb: Task(Of Int32)
  fullname.vb: System.Threading.Tasks.Task(Of System.Int32)
  name.vb: Task(Of Int32)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DeleteAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.DeleteAsync(System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync
  isExternal: false
  name: DeleteAsync
  nameWithType: OutputFileReference.DeleteAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.DeleteAsync
- uid: Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.OpenReadAsync(System.Threading.CancellationToken)
  commentId: M:Microsoft.WindowsAzure.Storage.Blob.ICloudBlob.OpenReadAsync(System.Threading.CancellationToken)
- uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync
  isExternal: false
  name: OpenReadAsync
  nameWithType: OutputFileReference.OpenReadAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference.OpenReadAsync
- uid: System.Threading.Tasks.Task{System.IO.Stream}
  commentId: T:System.Threading.Tasks.Task{System.IO.Stream}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<Stream>
  nameWithType: Task<Stream>
  fullName: System.Threading.Tasks.Task<System.IO.Stream>
  nameWithType.vb: Task(Of Stream)
  fullname.vb: System.Threading.Tasks.Task(Of System.IO.Stream)
  name.vb: Task(Of Stream)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.IO.Stream
    name: Stream
    nameWithType: Stream
    fullName: System.IO.Stream
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
