### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  id: JobOutputStorage
  parent: Microsoft.Azure.Batch.Conventions.Files
  children:
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.String,System.Threading.CancellationToken)
  - Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  langs:
  - csharp
  - vb
  name: JobOutputStorage
  nameWithType: JobOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  type: Class
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: JobOutputStorage
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 37
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRepresents persistent storage for the outputs of an Azure Batch job.\n"
  remarks: "\nJob outputs refer to output data logically associated with the entire job, rather than\na particular task. For example, in a movie rendering job, if a task combined all the frames\ninto a movie, that would logically be a job output. The purpose of categorising an\noutput as a 'job' output is to save the client from having to know which task produced it.\n"
  example: []
  syntax:
    content: public class JobOutputStorage
    content.vb: Public Class JobOutputStorage
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri)
  id: '#ctor(System.Uri)'
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: JobOutputStorage(Uri)
  nameWithType: JobOutputStorage.JobOutputStorage(Uri)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.JobOutputStorage(System.Uri)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 50
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a URL representing\nthe job output container.\n"
  remarks: >-
    The container must already exist; the JobOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public JobOutputStorage(Uri jobOutputContainerUri)
    content.vb: Public Sub New(jobOutputContainerUri As Uri)
    parameters:
    - id: jobOutputContainerUri
      type: System.Uri
      description: >-
        The URL in Azure storage of the blob container to

        use for job outputs. This URL must contain a SAS (Shared Access Signature) granting

        access to the container, or the container must be public.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)
  id: '#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String)'
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: JobOutputStorage(CloudStorageAccount, String)
  nameWithType: JobOutputStorage.JobOutputStorage(CloudStorageAccount, String)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.JobOutputStorage(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 63
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a storage account\nand job id.\n"
  remarks: >-
    The job output container must already exist; the JobOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public JobOutputStorage(CloudStorageAccount storageAccount, string jobId)
    content.vb: Public Sub New(storageAccount As CloudStorageAccount, jobId As String)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account linked to the Azure Batch account.
    - id: jobId
      type: System.String
      description: The id of the Azure Batch job.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(System.Uri,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  id: '#ctor(System.Uri,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)'
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: JobOutputStorage(Uri, IRetryPolicy)
  nameWithType: JobOutputStorage.JobOutputStorage(Uri, IRetryPolicy)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.JobOutputStorage(System.Uri, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a URL representing\nthe job output container.\n"
  remarks: >-
    The container must already exist; the JobOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public JobOutputStorage(Uri jobOutputContainerUri, IRetryPolicy storageRetryPolicy)
    content.vb: Public Sub New(jobOutputContainerUri As Uri, storageRetryPolicy As IRetryPolicy)
    parameters:
    - id: jobOutputContainerUri
      type: System.Uri
      description: >-
        The URL in Azure storage of the blob container to

        use for job outputs. This URL must contain a SAS (Shared Access Signature) granting

        access to the container, or the container must be public.
    - id: storageRetryPolicy
      type: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
      description: The retry policy for storage requests.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  id: '#ctor(Microsoft.WindowsAzure.Storage.CloudStorageAccount,System.String,Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)'
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: JobOutputStorage(CloudStorageAccount, String, IRetryPolicy)
  nameWithType: JobOutputStorage.JobOutputStorage(CloudStorageAccount, String, IRetryPolicy)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.JobOutputStorage(Microsoft.WindowsAzure.Storage.CloudStorageAccount, System.String, Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy)
  type: Constructor
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: .ctor
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 92
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nInitializes a new instance of the <xref href=\"Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage\" data-throw-if-not-resolved=\"false\"></xref> class from a storage account\nand job id.\n"
  remarks: >-
    The job output container must already exist; the JobOutputStorage class does not create

    it for you.
  example: []
  syntax:
    content: public JobOutputStorage(CloudStorageAccount storageAccount, string jobId, IRetryPolicy storageRetryPolicy)
    content.vb: Public Sub New(storageAccount As CloudStorageAccount, jobId As String, storageRetryPolicy As IRetryPolicy)
    parameters:
    - id: storageAccount
      type: Microsoft.WindowsAzure.Storage.CloudStorageAccount
      description: The storage account linked to the Azure Batch account.
    - id: jobId
      type: System.String
      description: The id of the Azure Batch job.
    - id: storageRetryPolicy
      type: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
      description: The retry policy for storage requests.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  id: SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: SaveAsync(JobOutputKind, String, CancellationToken)
  nameWithType: JobOutputStorage.SaveAsync(JobOutputKind, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 127
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage.\n"
  remarks: >-
    If the file is outside the current directory, traversals up the directory tree are removed.

    For example, a <em>relativePath</em> of "..\ProcessEnv.cmd" would be treated as "ProcessEnv.cmd"

    for the purposes of creating a blob name.
  example: []
  syntax:
    content: public Task SaveAsync(JobOutputKind kind, string relativePath, CancellationToken cancellationToken = null)
    content.vb: Public Function SaveAsync(kind As JobOutputKind, relativePath As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this file, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview" data-throw-if-not-resolved="false"></xref>.
    - id: relativePath
      type: System.String
      description: >-
        The path of the file to save, relative to the current directory.

        If the file is in a subdirectory of the current directory, the relative path will be preserved

        in blob storage.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em> or <em>relativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>relativePath</em> argument is an absolute path, or is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.String,System.Threading.CancellationToken)
  id: SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: SaveAsync(JobOutputKind, String, String, CancellationToken)
  nameWithType: JobOutputStorage.SaveAsync(JobOutputKind, String, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind, System.String, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: SaveAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 154
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nSaves the specified file to persistent storage.\n"
  example: []
  syntax:
    content: public Task SaveAsync(JobOutputKind kind, string sourcePath, string destinationRelativePath, CancellationToken cancellationToken = null)
    content.vb: Public Function SaveAsync(kind As JobOutputKind, sourcePath As String, destinationRelativePath As String, cancellationToken As CancellationToken = Nothing) As Task
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind" data-throw-if-not-resolved="false"></xref> representing the category under which to

        store this file, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview" data-throw-if-not-resolved="false"></xref>.
    - id: sourcePath
      type: System.String
      description: The path of the file to save.
    - id: destinationRelativePath
      type: System.String
      description: >-
        The blob name under which to save the file. This may include a

        relative component, such as "pointclouds/pointcloud_0001.txt".
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task
      description: A <xref href="System.Threading.Tasks.Task" data-throw-if-not-resolved="false"></xref> that represents the asynchronous operation.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: The <em>kind</em>, <em>sourcePath</em>, or <em>destinationRelativePath</em> argument is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: The <em>sourcePath</em> or <em>destinationRelativePath</em> argument is empty.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind)
  id: ListOutputs(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind)
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: ListOutputs(JobOutputKind)
  nameWithType: JobOutputStorage.ListOutputs(JobOutputKind)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ListOutputs
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 169
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nLists the job outputs of the specified kind.\n"
  remarks: The list is retrieved lazily from Azure blob storage when it is enumerated.
  example: []
  syntax:
    content: public IEnumerable<OutputFileReference> ListOutputs(JobOutputKind kind)
    content.vb: Public Function ListOutputs(kind As JobOutputKind) As IEnumerable(Of OutputFileReference)
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind" data-throw-if-not-resolved="false"></xref> representing the category of outputs to

        list, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview" data-throw-if-not-resolved="false"></xref>.
    return:
      type: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
      description: A list of persisted job outputs of the specified kind.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  id: GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind,System.String,System.Threading.CancellationToken)
  parent: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  langs:
  - csharp
  - vb
  name: GetOutputAsync(JobOutputKind, String, CancellationToken)
  nameWithType: JobOutputStorage.GetOutputAsync(JobOutputKind, String, CancellationToken)
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync(Microsoft.Azure.Batch.Conventions.Files.JobOutputKind, System.String, System.Threading.CancellationToken)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetOutputAsync
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/JobOutputStorage.cs
    startLine: 180
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRetrieves a job output from Azure blob storage by kind and path.\n"
  example: []
  syntax:
    content: public Task<OutputFileReference> GetOutputAsync(JobOutputKind kind, string filePath, CancellationToken cancellationToken = null)
    content.vb: Public Function GetOutputAsync(kind As JobOutputKind, filePath As String, cancellationToken As CancellationToken = Nothing) As Task(Of OutputFileReference)
    parameters:
    - id: kind
      type: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
      description: >-
        A <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind" data-throw-if-not-resolved="false"></xref> representing the category of the output to

        retrieve, for example <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput" data-throw-if-not-resolved="false"></xref> or <xref href="Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview" data-throw-if-not-resolved="false"></xref>.
    - id: filePath
      type: System.String
      description: The path under which the output was persisted in blob storage.
    - id: cancellationToken
      type: System.Threading.CancellationToken
      description: A <xref href="System.Threading.CancellationToken" data-throw-if-not-resolved="false"></xref> for controlling the lifetime of the asynchronous operation.
    return:
      type: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
      description: A reference to the requested file in Azure blob storage.
  overload: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync*
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.Azure.Batch.Conventions.Files
  commentId: N:Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: Microsoft.Azure.Batch.Conventions.Files
  nameWithType: Microsoft.Azure.Batch.Conventions.Files
  fullName: Microsoft.Azure.Batch.Conventions.Files
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
  parent: Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: JobOutputStorage
  nameWithType: JobOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.#ctor
  isExternal: false
  name: JobOutputStorage
  nameWithType: JobOutputStorage.JobOutputStorage
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.JobOutputStorage
- uid: System.Uri
  commentId: T:System.Uri
  parent: System
  isExternal: true
  name: Uri
  nameWithType: Uri
  fullName: System.Uri
- uid: Microsoft.WindowsAzure.Storage.CloudStorageAccount
  commentId: T:Microsoft.WindowsAzure.Storage.CloudStorageAccount
  parent: Microsoft.WindowsAzure.Storage
  isExternal: true
  name: CloudStorageAccount
  nameWithType: CloudStorageAccount
  fullName: Microsoft.WindowsAzure.Storage.CloudStorageAccount
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: Microsoft.WindowsAzure.Storage
  commentId: N:Microsoft.WindowsAzure.Storage
  isExternal: false
  name: Microsoft.WindowsAzure.Storage
  nameWithType: Microsoft.WindowsAzure.Storage
  fullName: Microsoft.WindowsAzure.Storage
- uid: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
  commentId: T:Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
  parent: Microsoft.WindowsAzure.Storage.RetryPolicies
  isExternal: true
  name: IRetryPolicy
  nameWithType: IRetryPolicy
  fullName: Microsoft.WindowsAzure.Storage.RetryPolicies.IRetryPolicy
- uid: Microsoft.WindowsAzure.Storage.RetryPolicies
  commentId: N:Microsoft.WindowsAzure.Storage.RetryPolicies
  isExternal: false
  name: Microsoft.WindowsAzure.Storage.RetryPolicies
  nameWithType: Microsoft.WindowsAzure.Storage.RetryPolicies
  fullName: Microsoft.WindowsAzure.Storage.RetryPolicies
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
  parent: Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: JobOutputKind
  nameWithType: JobOutputKind
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobOutput
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.JobOutputKind.JobPreview
- uid: System.Threading.CancellationToken
  commentId: T:System.Threading.CancellationToken
  parent: System.Threading
  isExternal: true
  name: CancellationToken
  nameWithType: CancellationToken
  fullName: System.Threading.CancellationToken
- uid: System.Threading.Tasks.Task
  commentId: T:System.Threading.Tasks.Task
  parent: System.Threading.Tasks
  isExternal: true
  name: Task
  nameWithType: Task
  fullName: System.Threading.Tasks.Task
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync
  isExternal: false
  name: SaveAsync
  nameWithType: JobOutputStorage.SaveAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.SaveAsync
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.Threading
  commentId: N:System.Threading
  isExternal: false
  name: System.Threading
  nameWithType: System.Threading
  fullName: System.Threading
- uid: System.Threading.Tasks
  commentId: N:System.Threading.Tasks
  isExternal: false
  name: System.Threading.Tasks
  nameWithType: System.Threading.Tasks
  fullName: System.Threading.Tasks
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs
  isExternal: false
  name: ListOutputs
  nameWithType: JobOutputStorage.ListOutputs
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.ListOutputs
- uid: System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  commentId: T:System.Collections.Generic.IEnumerable{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IEnumerable`1
  name: IEnumerable<OutputFileReference>
  nameWithType: IEnumerable<OutputFileReference>
  fullName: System.Collections.Generic.IEnumerable<Microsoft.Azure.Batch.Conventions.Files.OutputFileReference>
  nameWithType.vb: IEnumerable(Of OutputFileReference)
  fullname.vb: System.Collections.Generic.IEnumerable(Of Microsoft.Azure.Batch.Conventions.Files.OutputFileReference)
  name.vb: IEnumerable(Of OutputFileReference)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IEnumerable`1
  commentId: T:System.Collections.Generic.IEnumerable`1
  isExternal: true
  name: IEnumerable<T>
  nameWithType: IEnumerable<T>
  fullName: System.Collections.Generic.IEnumerable<T>
  nameWithType.vb: IEnumerable(Of T)
  fullname.vb: System.Collections.Generic.IEnumerable(Of T)
  name.vb: IEnumerable(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IEnumerable`1
    name: IEnumerable
    nameWithType: IEnumerable
    fullName: System.Collections.Generic.IEnumerable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync
  isExternal: false
  name: GetOutputAsync
  nameWithType: JobOutputStorage.GetOutputAsync
  fullName: Microsoft.Azure.Batch.Conventions.Files.JobOutputStorage.GetOutputAsync
- uid: System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  commentId: T:System.Threading.Tasks.Task{Microsoft.Azure.Batch.Conventions.Files.OutputFileReference}
  parent: System.Threading.Tasks
  definition: System.Threading.Tasks.Task`1
  name: Task<OutputFileReference>
  nameWithType: Task<OutputFileReference>
  fullName: System.Threading.Tasks.Task<Microsoft.Azure.Batch.Conventions.Files.OutputFileReference>
  nameWithType.vb: Task(Of OutputFileReference)
  fullname.vb: System.Threading.Tasks.Task(Of Microsoft.Azure.Batch.Conventions.Files.OutputFileReference)
  name.vb: Task(Of OutputFileReference)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
    name: OutputFileReference
    nameWithType: OutputFileReference
    fullName: Microsoft.Azure.Batch.Conventions.Files.OutputFileReference
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Threading.Tasks.Task`1
  commentId: T:System.Threading.Tasks.Task`1
  isExternal: true
  name: Task<TResult>
  nameWithType: Task<TResult>
  fullName: System.Threading.Tasks.Task<TResult>
  nameWithType.vb: Task(Of TResult)
  fullname.vb: System.Threading.Tasks.Task(Of TResult)
  name.vb: Task(Of TResult)
  spec.csharp:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Threading.Tasks.Task`1
    name: Task
    nameWithType: Task
    fullName: System.Threading.Tasks.Task
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TResult
    nameWithType: TResult
    fullName: TResult
  - name: )
    nameWithType: )
    fullName: )
