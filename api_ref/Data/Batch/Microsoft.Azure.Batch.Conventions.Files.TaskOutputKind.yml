### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  id: TaskOutputKind
  parent: Microsoft.Azure.Batch.Conventions.Files
  children:
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom(System.String)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(System.Object)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskIntermediate
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskPreview
  - Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString
  langs:
  - csharp
  - vb
  name: TaskOutputKind
  nameWithType: TaskOutputKind
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  type: Class
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskOutputKind
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 28
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRepresents a category of job outputs, such as the main task output, or a preview of the\ntask output, or a log of the task processing.\n"
  example: []
  syntax:
    content: 'public sealed class TaskOutputKind : IEquatable<TaskOutputKind>, IOutputKind'
    content.vb: >-
      Public NotInheritable Class TaskOutputKind
          Implements IEquatable(Of TaskOutputKind), IOutputKind
  inheritance:
  - System.Object
  implements:
  - System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}
  inheritedMembers:
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - sealed
  - class
  modifiers.vb:
  - Public
  - NotInheritable
  - Class
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
  id: TaskOutput
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: TaskOutput
  nameWithType: TaskOutputKind.TaskOutput
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskOutput
  type: Field
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskOutput
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 33
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nA <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> representing the main output of a task.\n"
  example: []
  syntax:
    content: public static readonly TaskOutputKind TaskOutput
    content.vb: Public Shared ReadOnly TaskOutput As TaskOutputKind
    return:
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskPreview
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskPreview
  id: TaskPreview
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: TaskPreview
  nameWithType: TaskOutputKind.TaskPreview
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskPreview
  type: Field
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskPreview
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 38
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nA <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> representing a preview of the task output.\n"
  example: []
  syntax:
    content: public static readonly TaskOutputKind TaskPreview
    content.vb: Public Shared ReadOnly TaskPreview As TaskOutputKind
    return:
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
  id: TaskLog
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: TaskLog
  nameWithType: TaskOutputKind.TaskLog
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskLog
  type: Field
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskLog
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 43
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nA <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> representing a log of the task processing.\n"
  example: []
  syntax:
    content: public static readonly TaskOutputKind TaskLog
    content.vb: Public Shared ReadOnly TaskLog As TaskOutputKind
    return:
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskIntermediate
  commentId: F:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskIntermediate
  id: TaskIntermediate
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: TaskIntermediate
  nameWithType: TaskOutputKind.TaskIntermediate
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.TaskIntermediate
  type: Field
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: TaskIntermediate
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 49
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nA <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> representing an intermediate file, for example being\npersisted for diagnostic or checkpointing purposes.\n"
  example: []
  syntax:
    content: public static readonly TaskOutputKind TaskIntermediate
    content.vb: Public Shared ReadOnly TaskIntermediate As TaskOutputKind
    return:
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom(System.String)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom(System.String)
  id: Custom(System.String)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: Custom(String)
  nameWithType: TaskOutputKind.Custom(String)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom(System.String)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Custom
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 69
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nGets a <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> representing a custom category of task outputs.\n"
  example: []
  syntax:
    content: public static TaskOutputKind Custom(string text)
    content.vb: Public Shared Function Custom(text As String) As TaskOutputKind
    parameters:
    - id: text
      type: System.String
      description: A text identifier for the custom TaskOutputKind.
    return:
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: A TaskOutputKind with the specified text.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom*
  exceptions:
  - type: System.ArgumentNullException
    commentId: T:System.ArgumentNullException
    description: <em>text</em> is null.
  - type: System.ArgumentException
    commentId: T:System.ArgumentException
    description: <em>text</em> is empty.
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString
  id: ToString
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: ToString()
  nameWithType: TaskOutputKind.ToString()
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString()
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ToString
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 78
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nReturns a string that represents the current object.\n"
  example: []
  syntax:
    content: public override string ToString()
    content.vb: Public Overrides Function ToString As String
    return:
      type: System.String
      description: A textual representation of the <xref href="Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind" data-throw-if-not-resolved="false"></xref>.
  overridden: System.Object.ToString
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  id: Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: Equals(TaskOutputKind)
  nameWithType: TaskOutputKind.Equals(TaskOutputKind)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Equals
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 90
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDeterminates whether this instance and another specified <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref>\nhave the same value.\n"
  example: []
  syntax:
    content: public bool Equals(TaskOutputKind other)
    content.vb: Public Function Equals(other As TaskOutputKind) As Boolean
    parameters:
    - id: other
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: The TaskOutputKind to compare to this instance.
    return:
      type: System.Boolean
      description: >-
        true if the value of the <em>other</em> parameter is the same as

        the value of this instance; otherwise, false.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals*
  implements:
  - System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(System.Object)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(System.Object)
  id: Equals(System.Object)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: Equals(Object)
  nameWithType: TaskOutputKind.Equals(Object)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals(System.Object)
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: Equals
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 104
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDetermines whether the specified object is equal to the current object.\n"
  example: []
  syntax:
    content: public override bool Equals(object obj)
    content.vb: Public Overrides Function Equals(obj As Object) As Boolean
    parameters:
    - id: obj
      type: System.Object
      description: The object to compare with the current object.
    return:
      type: System.Boolean
      description: true if the specified object is equal to the current object; otherwise, false.
  overridden: System.Object.Equals(System.Object)
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode
  id: GetHashCode
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: GetHashCode()
  nameWithType: TaskOutputKind.GetHashCode()
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode()
  type: Method
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: GetHashCode
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 113
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nReturns the hash code for this <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref>.\n"
  example: []
  syntax:
    content: public override int GetHashCode()
    content.vb: Public Overrides Function GetHashCode As Integer
    return:
      type: System.Int32
      description: A 32-bit signed integer hash code.
  overridden: System.Object.GetHashCode
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode*
  modifiers.csharp:
  - public
  - override
  modifiers.vb:
  - Public
  - Overrides
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  id: op_Equality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: Equality(TaskOutputKind, TaskOutputKind)
  nameWithType: TaskOutputKind.Equality(TaskOutputKind, TaskOutputKind)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  type: Operator
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: op_Equality
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 126
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDetermines whether two specified <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> instances have the same value.\n"
  example: []
  syntax:
    content: public static bool operator ==(TaskOutputKind x, TaskOutputKind y)
    content.vb: Public Shared Operator =(x As TaskOutputKind, y As TaskOutputKind) As Boolean
    parameters:
    - id: x
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: The first TaskOutputKind to compare.
    - id: y
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: The second TaskOutputKind to compare.
    return:
      type: System.Boolean
      description: true if the value of <em>x</em> is the same as the value of <em>y</em>; otherwise, false.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  id: op_Inequality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  parent: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  langs:
  - csharp
  - vb
  name: Inequality(TaskOutputKind, TaskOutputKind)
  nameWithType: TaskOutputKind.Inequality(TaskOutputKind, TaskOutputKind)
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Inequality(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind, Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  type: Operator
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: op_Inequality
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/TaskOutputKind.cs
    startLine: 141
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nDetermines whether two specified <xref href=\"Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind\" data-throw-if-not-resolved=\"false\"></xref> instances have different values.\n"
  example: []
  syntax:
    content: public static bool operator !=(TaskOutputKind x, TaskOutputKind y)
    content.vb: Public Shared Operator <>(x As TaskOutputKind, y As TaskOutputKind) As Boolean
    parameters:
    - id: x
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: The first TaskOutputKind to compare.
    - id: y
      type: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
      description: The second TaskOutputKind to compare.
    return:
      type: System.Boolean
      description: true if the value of <em>x</em> is different from the value of <em>y</em>; otherwise, false.
  overload: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality*
  modifiers.csharp:
  - public
  - static
  modifiers.vb:
  - Public
  - Shared
references:
- uid: Microsoft.Azure.Batch.Conventions.Files
  commentId: N:Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: Microsoft.Azure.Batch.Conventions.Files
  nameWithType: Microsoft.Azure.Batch.Conventions.Files
  fullName: Microsoft.Azure.Batch.Conventions.Files
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}
  commentId: T:System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}
  parent: System
  definition: System.IEquatable`1
  name: IEquatable<TaskOutputKind>
  nameWithType: IEquatable<TaskOutputKind>
  fullName: System.IEquatable<Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind>
  nameWithType.vb: IEquatable(Of TaskOutputKind)
  fullname.vb: System.IEquatable(Of Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  name.vb: IEquatable(Of TaskOutputKind)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
    name: TaskOutputKind
    nameWithType: TaskOutputKind
    fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
    name: TaskOutputKind
    nameWithType: TaskOutputKind
    fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.IEquatable`1
  commentId: T:System.IEquatable`1
  isExternal: true
  name: IEquatable<T>
  nameWithType: IEquatable<T>
  fullName: System.IEquatable<T>
  nameWithType.vb: IEquatable(Of T)
  fullname.vb: System.IEquatable(Of T)
  name.vb: IEquatable(Of T)
  spec.csharp:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.IEquatable`1
    name: IEquatable
    nameWithType: IEquatable
    fullName: System.IEquatable
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  parent: Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: TaskOutputKind
  nameWithType: TaskOutputKind
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom
  isExternal: false
  name: Custom
  nameWithType: TaskOutputKind.Custom
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Custom
- uid: System.ArgumentNullException
  commentId: T:System.ArgumentNullException
- uid: System.ArgumentException
  commentId: T:System.ArgumentException
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString
  isExternal: false
  name: ToString
  nameWithType: TaskOutputKind.ToString
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.ToString
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals
  isExternal: false
  name: Equals
  nameWithType: TaskOutputKind.Equals
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equals
- uid: System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  commentId: M:System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  parent: System.IEquatable{Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind}
  definition: System.IEquatable`1.Equals(`0)
  name: Equals(TaskOutputKind)
  nameWithType: IEquatable<TaskOutputKind>.Equals(TaskOutputKind)
  fullName: System.IEquatable<Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind>.Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  nameWithType.vb: IEquatable(Of TaskOutputKind).Equals(TaskOutputKind)
  fullname.vb: System.IEquatable(Of Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind).Equals(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<TaskOutputKind>.Equals
    fullName: System.IEquatable<Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
    name: TaskOutputKind
    nameWithType: TaskOutputKind
    fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of TaskOutputKind).Equals
    fullName: System.IEquatable(Of Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
    name: TaskOutputKind
    nameWithType: TaskOutputKind
    fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Boolean
  commentId: T:System.Boolean
  parent: System
  isExternal: true
  name: Boolean
  nameWithType: Boolean
  fullName: System.Boolean
- uid: System.IEquatable`1.Equals(`0)
  commentId: M:System.IEquatable`1.Equals(`0)
  isExternal: true
  name: Equals(T)
  nameWithType: IEquatable<T>.Equals(T)
  fullName: System.IEquatable<T>.Equals(T)
  nameWithType.vb: IEquatable(Of T).Equals(T)
  fullname.vb: System.IEquatable(Of T).Equals(T)
  spec.csharp:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable<T>.Equals
    fullName: System.IEquatable<T>.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IEquatable`1.Equals(`0)
    name: Equals
    nameWithType: IEquatable(Of T).Equals
    fullName: System.IEquatable(Of T).Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode
  isExternal: false
  name: GetHashCode
  nameWithType: TaskOutputKind.GetHashCode
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.GetHashCode
- uid: System.Int32
  commentId: T:System.Int32
  parent: System
  isExternal: true
  name: Int32
  nameWithType: Int32
  fullName: System.Int32
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Equality
  isExternal: false
  name: Equality
  nameWithType: TaskOutputKind.Equality
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Equality
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality*
  commentId: Overload:Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.op_Inequality
  isExternal: false
  name: Inequality
  nameWithType: TaskOutputKind.Inequality
  fullName: Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind.Inequality
