### YamlMime:ManagedReference
items:
- uid: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  commentId: T:Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  id: ITrackedSaveOperation
  parent: Microsoft.Azure.Batch.Conventions.Files
  children:
  - Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation.FlushError
  langs:
  - csharp
  - vb
  name: ITrackedSaveOperation
  nameWithType: ITrackedSaveOperation
  fullName: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  type: Interface
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/ITrackedSaveOperation.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: ITrackedSaveOperation
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/ITrackedSaveOperation.cs
    startLine: 27
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nRepresents a tracked save, in which a background operation periodically copies appends\nto a file to the corresponding append blob in Azure Storage.\n"
  example: []
  syntax:
    content: 'public interface ITrackedSaveOperation : IDisposable'
    content.vb: >-
      Public Interface ITrackedSaveOperation
          Inherits IDisposable
  seealso:
  - linkId: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
    commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  inheritedMembers:
  - System.IDisposable.Dispose
  modifiers.csharp:
  - public
  - interface
  modifiers.vb:
  - Public
  - Interface
- uid: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation.FlushError
  commentId: E:Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation.FlushError
  id: FlushError
  parent: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation
  langs:
  - csharp
  - vb
  name: FlushError
  nameWithType: ITrackedSaveOperation.FlushError
  fullName: Microsoft.Azure.Batch.Conventions.Files.ITrackedSaveOperation.FlushError
  type: Event
  source:
    remote:
      path: src/Batch/FileConventions/Src/AzureBatchFileConventions/ITrackedSaveOperation.cs
      branch: AutoRest
      repo: https://github.com/Visual-Studio-China/azure-sdk-for-net.git
    id: FlushError
    path: src/Batch/FileConventions/Src/AzureBatchFileConventions/ITrackedSaveOperation.cs
    startLine: 44
  assemblies:
  - Microsoft.Azure.Batch.Conventions.Files
  namespace: Microsoft.Azure.Batch.Conventions.Files
  summary: "\nOccurs when there is an error while performing a background append to the blob in Azure Storage.\n"
  remarks: "\n<p>\nIf an error occurs while appending, the 'last position' is not updated, so the data that\ncould not be appended will be included in the next flush.\n</p>\n<p>\nThis event is not raised if an error occurs during <xref href=\"System.IDisposable.Dispose\" data-throw-if-not-resolved=\"false\"></xref>; instead,\nthe Dispose method method re-throws the exception directly. In this case, the background\nappends are no longer running, so it is up to the calling code to decide whether and how to\nsave the unflushed data (for example, re-saving the file using the non-tracking methods).\n</p>\n"
  example: []
  syntax:
    content: event EventHandler<Exception> FlushError
    content.vb: Event FlushError As EventHandler(Of Exception)
    return:
      type: System.EventHandler{System.Exception}
references:
- uid: Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
  commentId: M:Microsoft.Azure.Batch.Conventions.Files.TaskOutputStorage.SaveTrackedAsync(Microsoft.Azure.Batch.Conventions.Files.TaskOutputKind,System.String,System.String,System.TimeSpan)
- uid: Microsoft.Azure.Batch.Conventions.Files
  commentId: N:Microsoft.Azure.Batch.Conventions.Files
  isExternal: false
  name: Microsoft.Azure.Batch.Conventions.Files
  nameWithType: Microsoft.Azure.Batch.Conventions.Files
  fullName: Microsoft.Azure.Batch.Conventions.Files
- uid: System.IDisposable.Dispose
  commentId: M:System.IDisposable.Dispose
  parent: System.IDisposable
  isExternal: true
  name: Dispose()
  nameWithType: IDisposable.Dispose()
  fullName: System.IDisposable.Dispose()
  spec.csharp:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.IDisposable.Dispose
    name: Dispose
    nameWithType: IDisposable.Dispose
    fullName: System.IDisposable.Dispose
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.IDisposable
  commentId: T:System.IDisposable
  parent: System
  isExternal: true
  name: IDisposable
  nameWithType: IDisposable
  fullName: System.IDisposable
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.EventHandler{System.Exception}
  commentId: T:System.EventHandler{System.Exception}
  parent: System
  definition: System.EventHandler`1
  name: EventHandler<Exception>
  nameWithType: EventHandler<Exception>
  fullName: System.EventHandler<System.Exception>
  nameWithType.vb: EventHandler(Of Exception)
  fullname.vb: System.EventHandler(Of System.Exception)
  name.vb: EventHandler(Of Exception)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Exception
    name: Exception
    nameWithType: Exception
    fullName: System.Exception
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.EventHandler`1
  commentId: T:System.EventHandler`1
  isExternal: true
  name: EventHandler<TEventArgs>
  nameWithType: EventHandler<TEventArgs>
  fullName: System.EventHandler<TEventArgs>
  nameWithType.vb: EventHandler(Of TEventArgs)
  fullname.vb: System.EventHandler(Of TEventArgs)
  name.vb: EventHandler(Of TEventArgs)
  spec.csharp:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.EventHandler`1
    name: EventHandler
    nameWithType: EventHandler
    fullName: System.EventHandler
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: TEventArgs
    nameWithType: TEventArgs
    fullName: TEventArgs
  - name: )
    nameWithType: )
    fullName: )
