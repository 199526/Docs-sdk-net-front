### YamlMime:ManagedReference
items:
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  commentId: T:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  id: RecurrentSchedule
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  children:
  - Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.#ctor
  - Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Days
  - Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Hours
  - Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Minutes
  - Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.TimeZone
  langs:
  - csharp
  - vb
  name: RecurrentSchedule
  nameWithType: RecurrentSchedule
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  type: Class
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: RecurrentSchedule
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 28
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  syntax:
    content: public class RecurrentSchedule
    content.vb: Public Class RecurrentSchedule
  inheritance:
  - System.Object
  inheritedMembers:
  - System.Object.ToString
  - System.Object.Equals(System.Object)
  - System.Object.Equals(System.Object,System.Object)
  - System.Object.ReferenceEquals(System.Object,System.Object)
  - System.Object.GetHashCode
  - System.Object.GetType
  - System.Object.MemberwiseClone
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Days
  commentId: P:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Days
  id: Days
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  langs:
  - csharp
  - vb
  name: Days
  nameWithType: RecurrentSchedule.Days
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Days
  type: Property
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Days
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 35
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  summary: "\nOptional.\n"
  example: []
  syntax:
    content: public IList<string> Days { get; set; }
    content.vb: Public Property Days As IList(Of String)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.String}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Hours
  commentId: P:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Hours
  id: Hours
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  langs:
  - csharp
  - vb
  name: Hours
  nameWithType: RecurrentSchedule.Hours
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Hours
  type: Property
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Hours
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 46
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  summary: "\nOptional.\n"
  example: []
  syntax:
    content: public IList<int> Hours { get; set; }
    content.vb: Public Property Hours As IList(Of Integer)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Int32}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Minutes
  commentId: P:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Minutes
  id: Minutes
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  langs:
  - csharp
  - vb
  name: Minutes
  nameWithType: RecurrentSchedule.Minutes
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.Minutes
  type: Property
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: Minutes
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 57
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  summary: "\nOptional.\n"
  example: []
  syntax:
    content: public IList<int> Minutes { get; set; }
    content.vb: Public Property Minutes As IList(Of Integer)
    parameters: []
    return:
      type: System.Collections.Generic.IList{System.Int32}
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.TimeZone
  commentId: P:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.TimeZone
  id: TimeZone
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  langs:
  - csharp
  - vb
  name: TimeZone
  nameWithType: RecurrentSchedule.TimeZone
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.TimeZone
  type: Property
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: TimeZone
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 68
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  summary: "\nOptional.\n"
  example: []
  syntax:
    content: public string TimeZone { get; set; }
    content.vb: Public Property TimeZone As String
    parameters: []
    return:
      type: System.String
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.#ctor
  commentId: M:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.#ctor
  id: '#ctor'
  parent: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule
  langs:
  - csharp
  - vb
  name: RecurrentSchedule()
  nameWithType: RecurrentSchedule.RecurrentSchedule()
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models.RecurrentSchedule.RecurrentSchedule()
  type: Constructor
  source:
    remote:
      path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
      branch: AutoRest
      repo: https://github.com/Azure/azure-sdk-for-net.git
    id: .ctor
    path: src/ServiceManagement/Monitoring/Monitoring/Generated/Autoscale/Models/RecurrentSchedule.cs
    startLine: 77
  assemblies:
  - Microsoft.WindowsAzure.Management.Monitoring
  namespace: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  summary: "\nInitializes a new instance of the RecurrentSchedule class.\n"
  example: []
  syntax:
    content: public RecurrentSchedule()
    content.vb: Public Sub New
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  commentId: N:Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  isExternal: false
  name: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  nameWithType: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
  fullName: Microsoft.WindowsAzure.Management.Monitoring.Autoscale.Models
- uid: System.Object
  commentId: T:System.Object
  parent: System
  isExternal: true
  name: Object
  nameWithType: Object
  fullName: System.Object
- uid: System.Object.ToString
  commentId: M:System.Object.ToString
  parent: System.Object
  isExternal: true
  name: ToString()
  nameWithType: Object.ToString()
  fullName: System.Object.ToString()
  spec.csharp:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ToString
    name: ToString
    nameWithType: Object.ToString
    fullName: System.Object.ToString
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object)
  commentId: M:System.Object.Equals(System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object)
  nameWithType: Object.Equals(Object)
  fullName: System.Object.Equals(System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.Equals(System.Object,System.Object)
  commentId: M:System.Object.Equals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: Equals(Object, Object)
  nameWithType: Object.Equals(Object, Object)
  fullName: System.Object.Equals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.Equals(System.Object,System.Object)
    name: Equals
    nameWithType: Object.Equals
    fullName: System.Object.Equals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.ReferenceEquals(System.Object,System.Object)
  commentId: M:System.Object.ReferenceEquals(System.Object,System.Object)
  parent: System.Object
  isExternal: true
  name: ReferenceEquals(Object, Object)
  nameWithType: Object.ReferenceEquals(Object, Object)
  fullName: System.Object.ReferenceEquals(System.Object, System.Object)
  spec.csharp:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.ReferenceEquals(System.Object,System.Object)
    name: ReferenceEquals
    nameWithType: Object.ReferenceEquals
    fullName: System.Object.ReferenceEquals
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: ', '
    nameWithType: ', '
    fullName: ', '
  - uid: System.Object
    name: Object
    nameWithType: Object
    fullName: System.Object
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetHashCode
  commentId: M:System.Object.GetHashCode
  parent: System.Object
  isExternal: true
  name: GetHashCode()
  nameWithType: Object.GetHashCode()
  fullName: System.Object.GetHashCode()
  spec.csharp:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetHashCode
    name: GetHashCode
    nameWithType: Object.GetHashCode
    fullName: System.Object.GetHashCode
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.GetType
  commentId: M:System.Object.GetType
  parent: System.Object
  isExternal: true
  name: GetType()
  nameWithType: Object.GetType()
  fullName: System.Object.GetType()
  spec.csharp:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.GetType
    name: GetType
    nameWithType: Object.GetType
    fullName: System.Object.GetType
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Object.MemberwiseClone
  commentId: M:System.Object.MemberwiseClone
  parent: System.Object
  isExternal: true
  name: MemberwiseClone()
  nameWithType: Object.MemberwiseClone()
  fullName: System.Object.MemberwiseClone()
  spec.csharp:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
  spec.vb:
  - uid: System.Object.MemberwiseClone
    name: MemberwiseClone
    nameWithType: Object.MemberwiseClone
    fullName: System.Object.MemberwiseClone
    isExternal: true
  - name: (
    nameWithType: (
    fullName: (
  - name: )
    nameWithType: )
    fullName: )
- uid: System
  commentId: N:System
  isExternal: false
  name: System
  nameWithType: System
  fullName: System
- uid: System.Collections.Generic.IList{System.String}
  commentId: T:System.Collections.Generic.IList{System.String}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<String>
  nameWithType: IList<String>
  fullName: System.Collections.Generic.IList<System.String>
  nameWithType.vb: IList(Of String)
  fullname.vb: System.Collections.Generic.IList(Of System.String)
  name.vb: IList(Of String)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.String
    name: String
    nameWithType: String
    fullName: System.String
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic.IList`1
  commentId: T:System.Collections.Generic.IList`1
  isExternal: true
  name: IList<T>
  nameWithType: IList<T>
  fullName: System.Collections.Generic.IList<T>
  nameWithType.vb: IList(Of T)
  fullname.vb: System.Collections.Generic.IList(Of T)
  name.vb: IList(Of T)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - name: T
    nameWithType: T
    fullName: T
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - name: T
    nameWithType: T
    fullName: T
  - name: )
    nameWithType: )
    fullName: )
- uid: System.Collections.Generic
  commentId: N:System.Collections.Generic
  isExternal: false
  name: System.Collections.Generic
  nameWithType: System.Collections.Generic
  fullName: System.Collections.Generic
- uid: System.Collections.Generic.IList{System.Int32}
  commentId: T:System.Collections.Generic.IList{System.Int32}
  parent: System.Collections.Generic
  definition: System.Collections.Generic.IList`1
  name: IList<Int32>
  nameWithType: IList<Int32>
  fullName: System.Collections.Generic.IList<System.Int32>
  nameWithType.vb: IList(Of Int32)
  fullname.vb: System.Collections.Generic.IList(Of System.Int32)
  name.vb: IList(Of Int32)
  spec.csharp:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: <
    nameWithType: <
    fullName: <
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: '>'
    nameWithType: '>'
    fullName: '>'
  spec.vb:
  - uid: System.Collections.Generic.IList`1
    name: IList
    nameWithType: IList
    fullName: System.Collections.Generic.IList
    isExternal: true
  - name: '(Of '
    nameWithType: '(Of '
    fullName: '(Of '
  - uid: System.Int32
    name: Int32
    nameWithType: Int32
    fullName: System.Int32
    isExternal: true
  - name: )
    nameWithType: )
    fullName: )
- uid: System.String
  commentId: T:System.String
  parent: System
  isExternal: true
  name: String
  nameWithType: String
  fullName: System.String
