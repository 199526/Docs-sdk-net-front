items:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  commentId: T:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  id: TaskTimer
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation
  children:
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  - Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(Func{Task})
  langs:
  - csharp
  - vb
  name: TaskTimer
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  type: Class
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: TaskTimer
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 19
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nRuns a task after a certain delay and log any error.\n"
  example: []
  syntax:
    content: 'public class TaskTimer : IDisposable'
    content.vb: >-
      Public Class TaskTimer
          Inherits IDisposable
  inheritance:
  - System.Object
  modifiers.csharp:
  - public
  - class
  modifiers.vb:
  - Public
  - Class
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  commentId: F:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  id: InfiniteTimeSpan
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: InfiniteTimeSpan
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.InfiniteTimeSpan
  type: Field
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: InfiniteTimeSpan
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 24
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nRepresents an infinite time span.\n"
  example: []
  syntax:
    content: public static readonly TimeSpan InfiniteTimeSpan
    content.vb: Public Shared ReadOnly InfiniteTimeSpan As TimeSpan
    return:
      type: TimeSpan
  modifiers.csharp:
  - public
  - static
  - readonly
  modifiers.vb:
  - Public
  - Shared
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  id: Delay
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Delay
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Delay
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Delay
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 32
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets or sets the delay before the task starts. \n"
  example: []
  syntax:
    content: public TimeSpan Delay { get; set; }
    content.vb: Public Property Delay As TimeSpan
    parameters: []
    return:
      type: TimeSpan
  modifiers.csharp:
  - public
  - get
  - set
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  commentId: P:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  id: IsStarted
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: IsStarted
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.IsStarted
  type: Property
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: IsStarted
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 53
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nGets a value indicating whether value that indicates if a task has already started.\n"
  example: []
  syntax:
    content: public bool IsStarted { get; }
    content.vb: Public ReadOnly Property IsStarted As Boolean
    parameters: []
    return:
      type: System.Boolean
  modifiers.csharp:
  - public
  - get
  modifiers.vb:
  - Public
  - ReadOnly
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(Func{Task})
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(Func{Task})
  id: Start(Func{Task})
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Start(Func<Task>)
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(Func<Task>)
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Start
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 62
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nStart the task.\n"
  example: []
  syntax:
    content: public void Start(Func<Task> elapsed)
    content.vb: Public Sub Start(elapsed As Func(Of Task))
    parameters:
    - id: elapsed
      type: Func{Task}
      description: The task to run.
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
  fullName.vb: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Start(Func(Of Task))
  name.vb: Start(Func(Of Task))
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel
  id: Cancel
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Cancel()
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Cancel()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Cancel
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 105
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nCancels the current task.\n"
  example: []
  syntax:
    content: public void Cancel()
    content.vb: Public Sub Cancel
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  commentId: M:Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose
  id: Dispose
  parent: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer
  langs:
  - csharp
  - vb
  name: Dispose()
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation.TaskTimer.Dispose()
  type: Method
  source:
    remote:
      path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
      branch: master
      repo: https://github.com/Microsoft/ApplicationInsights-dotnet
    id: Dispose
    path: src/Core/Managed/Shared/Extensibility/Implementation/TaskTimer.cs
    startLine: 113
  assemblies:
  - Microsoft.ApplicationInsights
  namespace: Microsoft.ApplicationInsights.Extensibility.Implementation
  summary: "\nReleases unmanaged and - optionally - managed resources.\n"
  example: []
  syntax:
    content: public void Dispose()
    content.vb: Public Sub Dispose
  modifiers.csharp:
  - public
  modifiers.vb:
  - Public
references:
- uid: Microsoft.ApplicationInsights.Extensibility.Implementation
  isExternal: false
  name: Microsoft.ApplicationInsights.Extensibility.Implementation
  fullName: Microsoft.ApplicationInsights.Extensibility.Implementation
- uid: System.Object
  isExternal: true
  name: Object
  fullName: System.Object
- uid: TimeSpan
  isExternal: true
  name: TimeSpan
  fullName: TimeSpan
- uid: System.Boolean
  isExternal: true
  name: Boolean
  fullName: System.Boolean
- uid: Func{Task}
  definition: Func`1
  name: Func<Task>
  fullName: Func<Task>
  fullname.vb: Func(Of Task)
  name.vb: Func(Of Task)
  spec.csharp:
  - uid: Func`1
    name: Func
    fullName: Func
    isExternal: true
  - name: <
    fullName: <
  - uid: Task
    name: Task
    fullName: Task
    isExternal: true
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - uid: Task
    name: Task
    fullName: Task
    isExternal: true
  - name: )
    fullName: )
- uid: Func`1
  isExternal: true
  name: Func<>
  fullName: Func<>
  fullname.vb: Func(Of )
  name.vb: Func(Of )
  spec.csharp:
  - uid: Func`1
    name: Func
    fullName: Func
    isExternal: true
  - name: <
    fullName: <
  - name: 
    fullName: 
  - name: '>'
    fullName: '>'
  spec.vb:
  - uid: Func`1
    name: Func
    fullName: Func
    isExternal: true
  - name: '(Of '
    fullName: '(Of '
  - name: 
    fullName: 
  - name: )
    fullName: )
